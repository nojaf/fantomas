[{"uri":"/fantomas/reference/fsharp-compiler-abstractil.html","title":"FSharp.Compiler.AbstractIL","content":"IL"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics.html","title":"FSharp.Compiler.Diagnostics","content":"FSharpDiagnosticOptions \nFSharpDiagnosticSeverity"},{"uri":"/fantomas/reference/fsharp-compiler-io.html","title":"FSharp.Compiler.IO","content":"FileSystemAutoOpens \nStreamExtensions \nByteMemory \nDefaultAssemblyLoader \nDefaultFileSystem \nIAssemblyLoader \nIFileSystem"},{"uri":"/fantomas/reference/fsharp-compiler-syntax.html","title":"FSharp.Compiler.Syntax","content":"PrettyNaming \nSynLongIdentHelpers \nBlockSeparator \nDebugPointAtBinding \nDebugPointAtFinally \nDebugPointAtFor \nDebugPointAtInOrTo \nDebugPointAtLeafExpr \nDebugPointAtSequential \nDebugPointAtTarget \nDebugPointAtTry \nDebugPointAtWhile \nDebugPointAtWith \nExprAtomicFlag \nIdent \nLongIdent \nParsedHashDirective \nParsedHashDirectiveArgument \nParsedImplFile \nParsedImplFileFragment \nParsedImplFileInput \nParsedInput \nParsedScriptInteraction \nParsedSigFile \nParsedSigFileFragment \nParsedSigFileInput \nParserDetail \nQualifiedNameOfFile \nRecordFieldName \nScopedPragma \nSeqExprOnly \nSynAccess \nSynArgInfo \nSynArgPats \nSynAttribute \nSynAttributeList \nSynAttributes \nSynBinding \nSynBindingKind \nSynBindingReturnInfo \nSynByteStringKind \nSynComponentInfo \nSynConst \nSynEnumCase \nSynExceptionDefn \nSynExceptionDefnRepr \nSynExceptionSig \nSynExpr \nSynExprAndBang \nSynExprRecordField \nSynField \nSynIdent \nSynInterfaceImpl \nSynInterpolatedStringPart \nSynLongIdent \nSynMatchClause \nSynMeasure \nSynMemberDefn \nSynMemberDefns \nSynMemberFlags \nSynMemberKind \nSynMemberSig \nSynModuleDecl \nSynModuleOrNamespace \nSynModuleOrNamespaceKind \nSynModuleOrNamespaceSig \nSynModuleSigDecl \nSynOpenDeclTarget \nSynPat \nSynRationalConst \nSynReturnInfo \nSynSimplePat \nSynSimplePatAlternativeIdInfo \nSynSimplePats \nSynStaticOptimizationConstraint \nSynStringKind \nSynTupleTypeSegment \nSynTypar \nSynTyparDecl \nSynTyparDecls \nSynType \nSynTypeConstraint \nSynTypeDefn \nSynTypeDefnKind \nSynTypeDefnRepr \nSynTypeDefnSig \nSynTypeDefnSigRepr \nSynTypeDefnSimpleRepr \nSynUnionCase \nSynUnionCaseKind \nSynValData \nSynValInfo \nSynValSig \nSynValTyparDecls \nTyparStaticReq"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia.html","title":"FSharp.Compiler.SyntaxTrivia","content":"CommentTrivia \nConditionalDirectiveTrivia \nIdentTrivia \nIfDirectiveExpression \nParsedImplFileInputTrivia \nParsedSigFileInputTrivia \nSynBindingTrivia \nSynEnumCaseTrivia \nSynExprAndBangTrivia \nSynExprIfThenElseTrivia \nSynExprLambdaTrivia \nSynExprLetOrUseBangTrivia \nSynExprLetOrUseTrivia \nSynExprMatchBangTrivia \nSynExprMatchTrivia \nSynExprTryFinallyTrivia \nSynExprTryWithTrivia \nSynMatchClauseTrivia \nSynMemberFlagsTrivia \nSynMemberGetSetTrivia \nSynModuleDeclNestedModuleTrivia \nSynModuleOrNamespaceSigTrivia \nSynModuleOrNamespaceTrivia \nSynModuleSigDeclNestedModuleTrivia \nSynPatOrTrivia \nSynTypeDefnSigTrivia \nSynTypeDefnTrivia \nSynTypeFunTrivia \nSynUnionCaseTrivia \nSynValSigTrivia"},{"uri":"/fantomas/reference/fsharp-compiler-text.html","title":"FSharp.Compiler.Text","content":"Line \nPosition \nRange \nSourceText \nTaggedText \nISourceText \nLine0 \nNavigableTaggedText \nPosition \nPosition01 \nRange \nRange01 \nTaggedText \nTextTag \npos \nrange"},{"uri":"/fantomas/reference/fsharp-compiler-xml.html","title":"FSharp.Compiler.Xml","content":"PreXmlDoc \nXmlDoc"},{"uri":"/fantomas/reference/fantomas-client.html","title":"Fantomas.Client","content":"Contracts \nFantomasToolLocator \nLSPFantomasService \nLSPFantomasServiceTypes"},{"uri":"/fantomas/reference/fantomas-core.html","title":"Fantomas.Core","content":"Async \nCache \nChar \nContinuation \nDict \nFormatConfig \nISourceTextExtensions \nList \nMap \nQueue \nRangeHelpers \nRangePatterns \nString \nCodeFormatter \nQueue\u003C\u0027T\u003E"},{"uri":"/fantomas/reference/fantomas-fcs.html","title":"Fantomas.FCS","content":"Parse"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html","title":"IL","content":"IL \n\n The \u0022unlinked\u0022 view of .NET metadata and code.  Central to the Abstract IL library\n \nIL.ILArgConvention \nILArgConvention \nIL.ILArrayShape \nILArrayShape \nIL.ILAssemblyLongevity \nILAssemblyLongevity \nIL.ILAssemblyManifest \nILAssemblyManifest \nIL.ILAssemblyRef \nILAssemblyRef \nIL.ILAttribElem \nILAttribElem \nIL.ILAttribute \nILAttribute \nIL.ILAttributeNamedArg \nILAttributeNamedArg \nIL.ILAttributes \nILAttributes \nIL.ILAttributesStored \nILAttributesStored \nIL.ILCallingConv \nILCallingConv \nIL.ILCallingSignature \nILCallingSignature \nIL.ILDebugImport \nILDebugImport \nIL.ILDebugImports \nILDebugImports \nIL.ILDefaultPInvokeEncoding \nILDefaultPInvokeEncoding \nIL.ILEventDef \nILEventDef \nIL.ILEventDefs \nILEventDefs \nIL.ILExportedTypeOrForwarder \nILExportedTypeOrForwarder \nIL.ILExportedTypesAndForwarders \nILExportedTypesAndForwarders \nIL.ILFieldDef \nILFieldDef \nIL.ILFieldDefs \nILFieldDefs \nIL.ILFieldInit \nILFieldInit \nIL.ILFieldRef \nILFieldRef \nIL.ILFieldSpec \nILFieldSpec \nIL.ILGenericArgs \nILGenericArgs \nIL.ILGenericParameterDef \nILGenericParameterDef \nIL.ILGenericParameterDefs \nILGenericParameterDefs \nIL.ILGenericVariance \nILGenericVariance \nIL.ILGuid \nILGuid \nIL.ILMemberAccess \nILMemberAccess \nIL.ILMethodDef \nILMethodDef \nIL.ILMethodDefs \nILMethodDefs \nIL.ILMethodImplDef \nILMethodImplDef \nIL.ILMethodImplDefs \nILMethodImplDefs \nIL.ILMethodRef \nILMethodRef \nIL.ILMethodSpec \nILMethodSpec \nIL.ILModuleDef \nILModuleDef \nIL.ILModuleRef \nILModuleRef \nIL.ILNativeResource \nILNativeResource \nIL.ILNativeType \nILNativeType \nIL.ILNestedExportedType \nILNestedExportedType \nIL.ILNestedExportedTypes \nILNestedExportedTypes \nIL.ILParameter \nILParameter \nIL.ILParameters \nILParameters \nIL.ILPlatform \nILPlatform \nIL.ILPreTypeDef \nILPreTypeDef \nIL.ILPropertyDef \nILPropertyDef \nIL.ILPropertyDefs \nILPropertyDefs \nIL.ILReferences \nILReferences \nIL.ILResources \nILResources \nIL.ILReturn \nILReturn \nIL.ILScopeRef \nILScopeRef \nIL.ILSecurityDeclsStored \nILSecurityDeclsStored \nIL.ILSourceDocument \nILSourceDocument \nIL.ILThisConvention \nILThisConvention \nIL.ILType \nILType \nIL.ILTypeDef \nILTypeDef \nIL.ILTypeDefAccess \nILTypeDefAccess \nIL.ILTypeDefKind \nILTypeDefKind \nIL.ILTypeDefLayout \nILTypeDefLayout \nIL.ILTypeDefs \nILTypeDefs \nIL.ILTypeInit \nILTypeInit \nIL.ILTypeRef \nILTypeRef \nIL.ILTypeSpec \nILTypeSpec \nIL.ILTypes \nILTypes \nIL.ILVersionInfo \nILVersionInfo \nIL.MethodBody \nMethodBody \nIL.PublicKey \nPublicKey \nIL.mkILReturn \nmkILReturn \nIL.mkILCustomAttrs \nmkILCustomAttrs \nIL.mkILCustomAttrsFromArray \nmkILCustomAttrsFromArray \nIL.storeILCustomAttrs \nstoreILCustomAttrs \nIL.emptyILCustomAttrs \nemptyILCustomAttrs \nIL.mkILSecurityDecls \nmkILSecurityDecls \nIL.emptyILSecurityDecls \nemptyILSecurityDecls \nIL.storeILSecurityDecls \nstoreILSecurityDecls \nIL.mkILEvents \nmkILEvents \nIL.mkILEventsLazy \nmkILEventsLazy \nIL.emptyILEvents \nemptyILEvents \nIL.mkILProperties \nmkILProperties \nIL.mkILPropertiesLazy \nmkILPropertiesLazy \nIL.emptyILProperties \nemptyILProperties \nIL.mkILMethods \nmkILMethods \nIL.mkILMethodsFromArray \nmkILMethodsFromArray \nIL.mkILMethodsComputed \nmkILMethodsComputed \nIL.emptyILMethods \nemptyILMethods \nIL.mkILFields \nmkILFields \nIL.mkILFieldsLazy \nmkILFieldsLazy \nIL.emptyILFields \nemptyILFields \nIL.mkILMethodImpls \nmkILMethodImpls \nIL.mkILMethodImplsLazy \nmkILMethodImplsLazy \nIL.emptyILMethodImpls \nemptyILMethodImpls \nIL.mkILTypeDefs \nmkILTypeDefs \nIL.mkILTypeDefsFromArray \nmkILTypeDefsFromArray \nIL.emptyILTypeDefs \nemptyILTypeDefs \nIL.mkILTypeDefsComputed \nmkILTypeDefsComputed \nIL.mkILNestedExportedTypes \nmkILNestedExportedTypes \nIL.mkILExportedTypes \nmkILExportedTypes \nIL.emptyILResources \nemptyILResources \nIL.mkILSimpleModule \nmkILSimpleModule \nIL.NoMetadataIdx \nNoMetadataIdx"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILReturn","title":"IL.mkILReturn","content":"IL.mkILReturn \nmkILReturn \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILCustomAttrs","title":"IL.mkILCustomAttrs","content":"IL.mkILCustomAttrs \nmkILCustomAttrs \n\n Making tables of custom attributes, etc.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILCustomAttrsFromArray","title":"IL.mkILCustomAttrsFromArray","content":"IL.mkILCustomAttrsFromArray \nmkILCustomAttrsFromArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#storeILCustomAttrs","title":"IL.storeILCustomAttrs","content":"IL.storeILCustomAttrs \nstoreILCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILCustomAttrs","title":"IL.emptyILCustomAttrs","content":"IL.emptyILCustomAttrs \nemptyILCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILSecurityDecls","title":"IL.mkILSecurityDecls","content":"IL.mkILSecurityDecls \nmkILSecurityDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILSecurityDecls","title":"IL.emptyILSecurityDecls","content":"IL.emptyILSecurityDecls \nemptyILSecurityDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#storeILSecurityDecls","title":"IL.storeILSecurityDecls","content":"IL.storeILSecurityDecls \nstoreILSecurityDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILEvents","title":"IL.mkILEvents","content":"IL.mkILEvents \nmkILEvents \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILEventsLazy","title":"IL.mkILEventsLazy","content":"IL.mkILEventsLazy \nmkILEventsLazy \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILEvents","title":"IL.emptyILEvents","content":"IL.emptyILEvents \nemptyILEvents \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILProperties","title":"IL.mkILProperties","content":"IL.mkILProperties \nmkILProperties \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILPropertiesLazy","title":"IL.mkILPropertiesLazy","content":"IL.mkILPropertiesLazy \nmkILPropertiesLazy \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILProperties","title":"IL.emptyILProperties","content":"IL.emptyILProperties \nemptyILProperties \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILMethods","title":"IL.mkILMethods","content":"IL.mkILMethods \nmkILMethods \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILMethodsFromArray","title":"IL.mkILMethodsFromArray","content":"IL.mkILMethodsFromArray \nmkILMethodsFromArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILMethodsComputed","title":"IL.mkILMethodsComputed","content":"IL.mkILMethodsComputed \nmkILMethodsComputed \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILMethods","title":"IL.emptyILMethods","content":"IL.emptyILMethods \nemptyILMethods \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILFields","title":"IL.mkILFields","content":"IL.mkILFields \nmkILFields \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILFieldsLazy","title":"IL.mkILFieldsLazy","content":"IL.mkILFieldsLazy \nmkILFieldsLazy \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILFields","title":"IL.emptyILFields","content":"IL.emptyILFields \nemptyILFields \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILMethodImpls","title":"IL.mkILMethodImpls","content":"IL.mkILMethodImpls \nmkILMethodImpls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILMethodImplsLazy","title":"IL.mkILMethodImplsLazy","content":"IL.mkILMethodImplsLazy \nmkILMethodImplsLazy \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILMethodImpls","title":"IL.emptyILMethodImpls","content":"IL.emptyILMethodImpls \nemptyILMethodImpls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefs","title":"IL.mkILTypeDefs","content":"IL.mkILTypeDefs \nmkILTypeDefs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefsFromArray","title":"IL.mkILTypeDefsFromArray","content":"IL.mkILTypeDefsFromArray \nmkILTypeDefsFromArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILTypeDefs","title":"IL.emptyILTypeDefs","content":"IL.emptyILTypeDefs \nemptyILTypeDefs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefsComputed","title":"IL.mkILTypeDefsComputed","content":"IL.mkILTypeDefsComputed \nmkILTypeDefsComputed \n\n Create table of types which is loaded/computed on-demand, and whose individual\n elements are also loaded/computed on-demand. Any call to tdefs.AsList will\n result in the laziness being forced.  Operations can examine the\n custom attributes and name of each type in order to decide whether\n to proceed with examining the other details of the type.\n\n Note that individual type definitions may contain further delays\n in their method, field and other tables.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILNestedExportedTypes","title":"IL.mkILNestedExportedTypes","content":"IL.mkILNestedExportedTypes \nmkILNestedExportedTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILExportedTypes","title":"IL.mkILExportedTypes","content":"IL.mkILExportedTypes \nmkILExportedTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#emptyILResources","title":"IL.emptyILResources","content":"IL.emptyILResources \nemptyILResources \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#mkILSimpleModule","title":"IL.mkILSimpleModule","content":"IL.mkILSimpleModule \nmkILSimpleModule \n\n Making modules.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il.html#NoMetadataIdx","title":"IL.NoMetadataIdx","content":"IL.NoMetadataIdx \nNoMetadataIdx \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilargconvention.html","title":"ILArgConvention","content":"ILArgConvention \n \nILArgConvention.Default \nDefault \nILArgConvention.CDecl \nCDecl \nILArgConvention.StdCall \nStdCall \nILArgConvention.ThisCall \nThisCall \nILArgConvention.FastCall \nFastCall \nILArgConvention.VarArg \nVarArg"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilargconvention.html#Default","title":"ILArgConvention.Default","content":"ILArgConvention.Default \nDefault \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilargconvention.html#CDecl","title":"ILArgConvention.CDecl","content":"ILArgConvention.CDecl \nCDecl \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilargconvention.html#StdCall","title":"ILArgConvention.StdCall","content":"ILArgConvention.StdCall \nStdCall \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilargconvention.html#ThisCall","title":"ILArgConvention.ThisCall","content":"ILArgConvention.ThisCall \nThisCall \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilargconvention.html#FastCall","title":"ILArgConvention.FastCall","content":"ILArgConvention.FastCall \nFastCall \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilargconvention.html#VarArg","title":"ILArgConvention.VarArg","content":"ILArgConvention.VarArg \nVarArg \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilarrayshape.html","title":"ILArrayShape","content":"ILArrayShape \n \nILArrayShape.Rank \nRank \nILArrayShape.FromRank \nFromRank \nILArrayShape.SingleDimensional \nSingleDimensional"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#Rank","title":"ILArrayShape.Rank","content":"ILArrayShape.Rank \nRank \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#FromRank","title":"ILArrayShape.FromRank","content":"ILArrayShape.FromRank \nFromRank \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#SingleDimensional","title":"ILArrayShape.SingleDimensional","content":"ILArrayShape.SingleDimensional \nSingleDimensional \n\n Bounds for a single dimensional, zero based array\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblylongevity.html","title":"ILAssemblyLongevity","content":"ILAssemblyLongevity \n \nILAssemblyLongevity.Default \nDefault"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblylongevity.html#Default","title":"ILAssemblyLongevity.Default","content":"ILAssemblyLongevity.Default \nDefault \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html","title":"ILAssemblyManifest","content":"ILAssemblyManifest \n\n The main module of an assembly is a module plus some manifest information.\n \nILAssemblyManifest.CustomAttrs \nCustomAttrs \nILAssemblyManifest.SecurityDecls \nSecurityDecls \nILAssemblyManifest.Name \nName \nILAssemblyManifest.AuxModuleHashAlgorithm \nAuxModuleHashAlgorithm \nILAssemblyManifest.SecurityDeclsStored \nSecurityDeclsStored \nILAssemblyManifest.PublicKey \nPublicKey \nILAssemblyManifest.Version \nVersion \nILAssemblyManifest.Locale \nLocale \nILAssemblyManifest.CustomAttrsStored \nCustomAttrsStored \nILAssemblyManifest.AssemblyLongevity \nAssemblyLongevity \nILAssemblyManifest.DisableJitOptimizations \nDisableJitOptimizations \nILAssemblyManifest.JitTracking \nJitTracking \nILAssemblyManifest.IgnoreSymbolStoreSequencePoints \nIgnoreSymbolStoreSequencePoints \nILAssemblyManifest.Retargetable \nRetargetable \nILAssemblyManifest.ExportedTypes \nExportedTypes \nILAssemblyManifest.EntrypointElsewhere \nEntrypointElsewhere \nILAssemblyManifest.MetadataIndex \nMetadataIndex"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#CustomAttrs","title":"ILAssemblyManifest.CustomAttrs","content":"ILAssemblyManifest.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#SecurityDecls","title":"ILAssemblyManifest.SecurityDecls","content":"ILAssemblyManifest.SecurityDecls \nSecurityDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Name","title":"ILAssemblyManifest.Name","content":"ILAssemblyManifest.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#AuxModuleHashAlgorithm","title":"ILAssemblyManifest.AuxModuleHashAlgorithm","content":"ILAssemblyManifest.AuxModuleHashAlgorithm \nAuxModuleHashAlgorithm \n\n This is the ID of the algorithm used for the hashes of auxiliary\n files in the assembly.   These hashes are stored in the\n \u003Cc\u003EILModuleRef.Hash\u003C/c\u003E fields of this assembly. These are not\n cryptographic hashes: they are simple file hashes. The algorithm\n is normally \u003Cc\u003E0x00008004\u003C/c\u003E indicating the SHA1 hash algorithm.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#SecurityDeclsStored","title":"ILAssemblyManifest.SecurityDeclsStored","content":"ILAssemblyManifest.SecurityDeclsStored \nSecurityDeclsStored \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#PublicKey","title":"ILAssemblyManifest.PublicKey","content":"ILAssemblyManifest.PublicKey \nPublicKey \n\n This is the public key used to sign this\n assembly (the signature itself is stored elsewhere: see the\n binary format, and may not have been written if delay signing\n is used).  (member Name, member PublicKey) forms the full\n public name of the assembly.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Version","title":"ILAssemblyManifest.Version","content":"ILAssemblyManifest.Version \nVersion \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Locale","title":"ILAssemblyManifest.Locale","content":"ILAssemblyManifest.Locale \nLocale \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#CustomAttrsStored","title":"ILAssemblyManifest.CustomAttrsStored","content":"ILAssemblyManifest.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#AssemblyLongevity","title":"ILAssemblyManifest.AssemblyLongevity","content":"ILAssemblyManifest.AssemblyLongevity \nAssemblyLongevity \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#DisableJitOptimizations","title":"ILAssemblyManifest.DisableJitOptimizations","content":"ILAssemblyManifest.DisableJitOptimizations \nDisableJitOptimizations \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#JitTracking","title":"ILAssemblyManifest.JitTracking","content":"ILAssemblyManifest.JitTracking \nJitTracking \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#IgnoreSymbolStoreSequencePoints","title":"ILAssemblyManifest.IgnoreSymbolStoreSequencePoints","content":"ILAssemblyManifest.IgnoreSymbolStoreSequencePoints \nIgnoreSymbolStoreSequencePoints \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Retargetable","title":"ILAssemblyManifest.Retargetable","content":"ILAssemblyManifest.Retargetable \nRetargetable \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#ExportedTypes","title":"ILAssemblyManifest.ExportedTypes","content":"ILAssemblyManifest.ExportedTypes \nExportedTypes \n\n Records the types implemented by this assembly in auxiliary\n modules.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#EntrypointElsewhere","title":"ILAssemblyManifest.EntrypointElsewhere","content":"ILAssemblyManifest.EntrypointElsewhere \nEntrypointElsewhere \n\n Records whether the entrypoint resides in another module.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#MetadataIndex","title":"ILAssemblyManifest.MetadataIndex","content":"ILAssemblyManifest.MetadataIndex \nMetadataIndex \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html","title":"ILAssemblyRef","content":"ILAssemblyRef \n \nILAssemblyRef.EqualsIgnoringVersion \nEqualsIgnoringVersion \nILAssemblyRef.PublicKey \nPublicKey \nILAssemblyRef.QualifiedName \nQualifiedName \nILAssemblyRef.Retargetable \nRetargetable \nILAssemblyRef.Hash \nHash \nILAssemblyRef.Version \nVersion \nILAssemblyRef.Locale \nLocale \nILAssemblyRef.Name \nName \nILAssemblyRef.Create \nCreate \nILAssemblyRef.FromAssemblyName \nFromAssemblyName"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#EqualsIgnoringVersion","title":"ILAssemblyRef.EqualsIgnoringVersion","content":"ILAssemblyRef.EqualsIgnoringVersion \nEqualsIgnoringVersion \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#PublicKey","title":"ILAssemblyRef.PublicKey","content":"ILAssemblyRef.PublicKey \nPublicKey \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#QualifiedName","title":"ILAssemblyRef.QualifiedName","content":"ILAssemblyRef.QualifiedName \nQualifiedName \n\n The fully qualified name of the assembly reference, e.g. mscorlib, Version=1.0.3705 etc.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Retargetable","title":"ILAssemblyRef.Retargetable","content":"ILAssemblyRef.Retargetable \nRetargetable \n\n CLI says this indicates if the assembly can be retargeted (at runtime) to be from a different publisher.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Hash","title":"ILAssemblyRef.Hash","content":"ILAssemblyRef.Hash \nHash \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Version","title":"ILAssemblyRef.Version","content":"ILAssemblyRef.Version \nVersion \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Locale","title":"ILAssemblyRef.Locale","content":"ILAssemblyRef.Locale \nLocale \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Name","title":"ILAssemblyRef.Name","content":"ILAssemblyRef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Create","title":"ILAssemblyRef.Create","content":"ILAssemblyRef.Create \nCreate \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#FromAssemblyName","title":"ILAssemblyRef.FromAssemblyName","content":"ILAssemblyRef.FromAssemblyName \nFromAssemblyName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html","title":"ILAttribElem","content":"ILAttribElem \n \nILAttribElem.String \nString \nILAttribElem.Bool \nBool \nILAttribElem.Char \nChar \nILAttribElem.SByte \nSByte \nILAttribElem.Int16 \nInt16 \nILAttribElem.Int32 \nInt32 \nILAttribElem.Int64 \nInt64 \nILAttribElem.Byte \nByte \nILAttribElem.UInt16 \nUInt16 \nILAttribElem.UInt32 \nUInt32 \nILAttribElem.UInt64 \nUInt64 \nILAttribElem.Single \nSingle \nILAttribElem.Double \nDouble \nILAttribElem.Null \nNull \nILAttribElem.Type \nType \nILAttribElem.TypeRef \nTypeRef \nILAttribElem.Array \nArray"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#String","title":"ILAttribElem.String","content":"ILAttribElem.String \nString \n\n Represents a custom attribute parameter of type \u0027string\u0027. These may be null, in which case they are encoded in a special\n way as indicated by Ecma-335 Partition II.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Bool","title":"ILAttribElem.Bool","content":"ILAttribElem.Bool \nBool \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Char","title":"ILAttribElem.Char","content":"ILAttribElem.Char \nChar \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#SByte","title":"ILAttribElem.SByte","content":"ILAttribElem.SByte \nSByte \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int16","title":"ILAttribElem.Int16","content":"ILAttribElem.Int16 \nInt16 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int32","title":"ILAttribElem.Int32","content":"ILAttribElem.Int32 \nInt32 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int64","title":"ILAttribElem.Int64","content":"ILAttribElem.Int64 \nInt64 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Byte","title":"ILAttribElem.Byte","content":"ILAttribElem.Byte \nByte \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt16","title":"ILAttribElem.UInt16","content":"ILAttribElem.UInt16 \nUInt16 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt32","title":"ILAttribElem.UInt32","content":"ILAttribElem.UInt32 \nUInt32 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt64","title":"ILAttribElem.UInt64","content":"ILAttribElem.UInt64 \nUInt64 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Single","title":"ILAttribElem.Single","content":"ILAttribElem.Single \nSingle \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Double","title":"ILAttribElem.Double","content":"ILAttribElem.Double \nDouble \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Null","title":"ILAttribElem.Null","content":"ILAttribElem.Null \nNull \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Type","title":"ILAttribElem.Type","content":"ILAttribElem.Type \nType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#TypeRef","title":"ILAttribElem.TypeRef","content":"ILAttribElem.TypeRef \nTypeRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Array","title":"ILAttribElem.Array","content":"ILAttribElem.Array \nArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribute.html","title":"ILAttribute","content":"ILAttribute \n\n Custom attribute.\n \nILAttribute.Encoded \nEncoded \nILAttribute.Decoded \nDecoded"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribute.html#Encoded","title":"ILAttribute.Encoded","content":"ILAttribute.Encoded \nEncoded \n\n Attribute with args encoded to a binary blob according to ECMA-335 II.21 and II.23.3.\n \u0027decodeILAttribData\u0027 is used to parse the byte[] blob to ILAttribElem\u0027s as best as possible.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattribute.html#Decoded","title":"ILAttribute.Decoded","content":"ILAttribute.Decoded \nDecoded \n\n Attribute with args in decoded form.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributenamedarg.html","title":"ILAttributeNamedArg","content":"ILAttributeNamedArg \n\n Named args: values and flags indicating if they are fields or properties.\n \nILAttributeNamedArg.Item1 \nItem1 \nILAttributeNamedArg.Item2 \nItem2 \nILAttributeNamedArg.Item3 \nItem3 \nILAttributeNamedArg.Item4 \nItem4"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributenamedarg.html#Item1","title":"ILAttributeNamedArg.Item1","content":"ILAttributeNamedArg.Item1 \nItem1 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributenamedarg.html#Item2","title":"ILAttributeNamedArg.Item2","content":"ILAttributeNamedArg.Item2 \nItem2 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributenamedarg.html#Item3","title":"ILAttributeNamedArg.Item3","content":"ILAttributeNamedArg.Item3 \nItem3 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributenamedarg.html#Item4","title":"ILAttributeNamedArg.Item4","content":"ILAttributeNamedArg.Item4 \nItem4 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributes.html","title":"ILAttributes","content":"ILAttributes \n \nILAttributes.AsArray \nAsArray \nILAttributes.AsList \nAsList"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributes.html#AsArray","title":"ILAttributes.AsArray","content":"ILAttributes.AsArray \nAsArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributes.html#AsList","title":"ILAttributes.AsList","content":"ILAttributes.AsList \nAsList \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilattributesstored.html","title":"ILAttributesStored","content":"ILAttributesStored \n\n Represents the efficiency-oriented storage of ILAttributes in another item.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingconv.html","title":"ILCallingConv","content":"ILCallingConv \n \nILCallingConv.Static \nStatic \nILCallingConv.Instance \nInstance \nILCallingConv.Callconv \nCallconv"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Static","title":"ILCallingConv.Static","content":"ILCallingConv.Static \nStatic \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Instance","title":"ILCallingConv.Instance","content":"ILCallingConv.Instance \nInstance \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Callconv","title":"ILCallingConv.Callconv","content":"ILCallingConv.Callconv \nCallconv \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html","title":"ILCallingSignature","content":"ILCallingSignature \n \nILCallingSignature.CallingConv \nCallingConv \nILCallingSignature.ArgTypes \nArgTypes \nILCallingSignature.ReturnType \nReturnType"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#CallingConv","title":"ILCallingSignature.CallingConv","content":"ILCallingSignature.CallingConv \nCallingConv \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#ArgTypes","title":"ILCallingSignature.ArgTypes","content":"ILCallingSignature.ArgTypes \nArgTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#ReturnType","title":"ILCallingSignature.ReturnType","content":"ILCallingSignature.ReturnType \nReturnType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildebugimport.html","title":"ILDebugImport","content":"ILDebugImport \n\n Defines an opened namespace, type relevant to a code location.\n\n Emitted to the PortablePDB format. Note the format supports additional variations on\n imported things that are not yet emitted in F#.\n \nILDebugImport.ImportType \nImportType \nILDebugImport.ImportNamespace \nImportNamespace"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildebugimport.html#ImportType","title":"ILDebugImport.ImportType","content":"ILDebugImport.ImportType \nImportType \n\n Represents an \u0027open type XYZ\u0027 opening a type\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildebugimport.html#ImportNamespace","title":"ILDebugImport.ImportNamespace","content":"ILDebugImport.ImportNamespace \nImportNamespace \n\n Represents an \u0027open XYZ\u0027 opening a namespace\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildebugimports.html","title":"ILDebugImports","content":"ILDebugImports \n\n Defines a set of opened namespace, type relevant to a code location.\n\n Emitted to the PortablePDB format.\n \nILDebugImports.Parent \nParent \nILDebugImports.Imports \nImports"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildebugimports.html#Parent","title":"ILDebugImports.Parent","content":"ILDebugImports.Parent \nParent \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildebugimports.html#Imports","title":"ILDebugImports.Imports","content":"ILDebugImports.Imports \nImports \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html","title":"ILDefaultPInvokeEncoding","content":"ILDefaultPInvokeEncoding \n\n Default Unicode encoding for P/Invoke  within a type.\n \nILDefaultPInvokeEncoding.Ansi \nAnsi \nILDefaultPInvokeEncoding.Auto \nAuto \nILDefaultPInvokeEncoding.Unicode \nUnicode"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Ansi","title":"ILDefaultPInvokeEncoding.Ansi","content":"ILDefaultPInvokeEncoding.Ansi \nAnsi \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Auto","title":"ILDefaultPInvokeEncoding.Auto","content":"ILDefaultPInvokeEncoding.Auto \nAuto \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Unicode","title":"ILDefaultPInvokeEncoding.Unicode","content":"ILDefaultPInvokeEncoding.Unicode \nUnicode \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html","title":"ILEventDef","content":"ILEventDef \n\n Event definitions.\n \nILEventDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILEventDef.OtherMethods \nOtherMethods \nILEventDef.AddMethod \nAddMethod \nILEventDef.CustomAttrs \nCustomAttrs \nILEventDef.IsSpecialName \nIsSpecialName \nILEventDef.RemoveMethod \nRemoveMethod \nILEventDef.Attributes \nAttributes \nILEventDef.EventType \nEventType \nILEventDef.FireMethod \nFireMethod \nILEventDef.IsRTSpecialName \nIsRTSpecialName \nILEventDef.Name \nName"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILEventDef.\u0060\u0060.ctor\u0060\u0060","content":"ILEventDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n\n Functional creation of a value, immediate\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#OtherMethods","title":"ILEventDef.OtherMethods","content":"ILEventDef.OtherMethods \nOtherMethods \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#AddMethod","title":"ILEventDef.AddMethod","content":"ILEventDef.AddMethod \nAddMethod \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#CustomAttrs","title":"ILEventDef.CustomAttrs","content":"ILEventDef.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#IsSpecialName","title":"ILEventDef.IsSpecialName","content":"ILEventDef.IsSpecialName \nIsSpecialName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#RemoveMethod","title":"ILEventDef.RemoveMethod","content":"ILEventDef.RemoveMethod \nRemoveMethod \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#Attributes","title":"ILEventDef.Attributes","content":"ILEventDef.Attributes \nAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#EventType","title":"ILEventDef.EventType","content":"ILEventDef.EventType \nEventType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#FireMethod","title":"ILEventDef.FireMethod","content":"ILEventDef.FireMethod \nFireMethod \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#IsRTSpecialName","title":"ILEventDef.IsRTSpecialName","content":"ILEventDef.IsRTSpecialName \nIsRTSpecialName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdef.html#Name","title":"ILEventDef.Name","content":"ILEventDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ileventdefs.html","title":"ILEventDefs","content":"ILEventDefs \n\n Table of those events in a type definition.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html","title":"ILExportedTypeOrForwarder","content":"ILExportedTypeOrForwarder \n\n these are only found in the ILExportedTypesAndForwarders table in the manifest\n \nILExportedTypeOrForwarder.Access \nAccess \nILExportedTypeOrForwarder.CustomAttrs \nCustomAttrs \nILExportedTypeOrForwarder.IsForwarder \nIsForwarder \nILExportedTypeOrForwarder.ScopeRef \nScopeRef \nILExportedTypeOrForwarder.Name \nName \nILExportedTypeOrForwarder.Attributes \nAttributes \nILExportedTypeOrForwarder.Nested \nNested \nILExportedTypeOrForwarder.CustomAttrsStored \nCustomAttrsStored \nILExportedTypeOrForwarder.MetadataIndex \nMetadataIndex"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Access","title":"ILExportedTypeOrForwarder.Access","content":"ILExportedTypeOrForwarder.Access \nAccess \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#CustomAttrs","title":"ILExportedTypeOrForwarder.CustomAttrs","content":"ILExportedTypeOrForwarder.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#IsForwarder","title":"ILExportedTypeOrForwarder.IsForwarder","content":"ILExportedTypeOrForwarder.IsForwarder \nIsForwarder \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#ScopeRef","title":"ILExportedTypeOrForwarder.ScopeRef","content":"ILExportedTypeOrForwarder.ScopeRef \nScopeRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Name","title":"ILExportedTypeOrForwarder.Name","content":"ILExportedTypeOrForwarder.Name \nName \n\n [Namespace.]Name\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Attributes","title":"ILExportedTypeOrForwarder.Attributes","content":"ILExportedTypeOrForwarder.Attributes \nAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Nested","title":"ILExportedTypeOrForwarder.Nested","content":"ILExportedTypeOrForwarder.Nested \nNested \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#CustomAttrsStored","title":"ILExportedTypeOrForwarder.CustomAttrsStored","content":"ILExportedTypeOrForwarder.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#MetadataIndex","title":"ILExportedTypeOrForwarder.MetadataIndex","content":"ILExportedTypeOrForwarder.MetadataIndex \nMetadataIndex \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilexportedtypesandforwarders.html","title":"ILExportedTypesAndForwarders","content":"ILExportedTypesAndForwarders \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html","title":"ILFieldDef","content":"ILFieldDef \n\n Field definitions.\n \nILFieldDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILFieldDef.IsInitOnly \nIsInitOnly \nILFieldDef.FieldType \nFieldType \nILFieldDef.Access \nAccess \nILFieldDef.CustomAttrs \nCustomAttrs \nILFieldDef.NotSerialized \nNotSerialized \nILFieldDef.Offset \nOffset \nILFieldDef.IsSpecialName \nIsSpecialName \nILFieldDef.IsStatic \nIsStatic \nILFieldDef.Data \nData \nILFieldDef.IsLiteral \nIsLiteral \nILFieldDef.Attributes \nAttributes \nILFieldDef.LiteralValue \nLiteralValue \nILFieldDef.Marshal \nMarshal \nILFieldDef.Name \nName"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILFieldDef.\u0060\u0060.ctor\u0060\u0060","content":"ILFieldDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n\n Functional creation of a value, immediate\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsInitOnly","title":"ILFieldDef.IsInitOnly","content":"ILFieldDef.IsInitOnly \nIsInitOnly \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#FieldType","title":"ILFieldDef.FieldType","content":"ILFieldDef.FieldType \nFieldType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Access","title":"ILFieldDef.Access","content":"ILFieldDef.Access \nAccess \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#CustomAttrs","title":"ILFieldDef.CustomAttrs","content":"ILFieldDef.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#NotSerialized","title":"ILFieldDef.NotSerialized","content":"ILFieldDef.NotSerialized \nNotSerialized \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Offset","title":"ILFieldDef.Offset","content":"ILFieldDef.Offset \nOffset \n\n The explicit offset in bytes when explicit layout is used.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsSpecialName","title":"ILFieldDef.IsSpecialName","content":"ILFieldDef.IsSpecialName \nIsSpecialName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsStatic","title":"ILFieldDef.IsStatic","content":"ILFieldDef.IsStatic \nIsStatic \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Data","title":"ILFieldDef.Data","content":"ILFieldDef.Data \nData \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsLiteral","title":"ILFieldDef.IsLiteral","content":"ILFieldDef.IsLiteral \nIsLiteral \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Attributes","title":"ILFieldDef.Attributes","content":"ILFieldDef.Attributes \nAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#LiteralValue","title":"ILFieldDef.LiteralValue","content":"ILFieldDef.LiteralValue \nLiteralValue \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Marshal","title":"ILFieldDef.Marshal","content":"ILFieldDef.Marshal \nMarshal \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Name","title":"ILFieldDef.Name","content":"ILFieldDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfielddefs.html","title":"ILFieldDefs","content":"ILFieldDefs \n\n Tables of fields.  Logically equivalent to a list of fields but the table is kept in\n a form to allow efficient looking up fields by name.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html","title":"ILFieldInit","content":"ILFieldInit \n\n Field Init\n \nILFieldInit.AsObject \nAsObject \nILFieldInit.String \nString \nILFieldInit.Bool \nBool \nILFieldInit.Char \nChar \nILFieldInit.Int8 \nInt8 \nILFieldInit.Int16 \nInt16 \nILFieldInit.Int32 \nInt32 \nILFieldInit.Int64 \nInt64 \nILFieldInit.UInt8 \nUInt8 \nILFieldInit.UInt16 \nUInt16 \nILFieldInit.UInt32 \nUInt32 \nILFieldInit.UInt64 \nUInt64 \nILFieldInit.Single \nSingle \nILFieldInit.Double \nDouble \nILFieldInit.Null \nNull"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#AsObject","title":"ILFieldInit.AsObject","content":"ILFieldInit.AsObject \nAsObject \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#String","title":"ILFieldInit.String","content":"ILFieldInit.String \nString \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Bool","title":"ILFieldInit.Bool","content":"ILFieldInit.Bool \nBool \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Char","title":"ILFieldInit.Char","content":"ILFieldInit.Char \nChar \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int8","title":"ILFieldInit.Int8","content":"ILFieldInit.Int8 \nInt8 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int16","title":"ILFieldInit.Int16","content":"ILFieldInit.Int16 \nInt16 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int32","title":"ILFieldInit.Int32","content":"ILFieldInit.Int32 \nInt32 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int64","title":"ILFieldInit.Int64","content":"ILFieldInit.Int64 \nInt64 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt8","title":"ILFieldInit.UInt8","content":"ILFieldInit.UInt8 \nUInt8 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt16","title":"ILFieldInit.UInt16","content":"ILFieldInit.UInt16 \nUInt16 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt32","title":"ILFieldInit.UInt32","content":"ILFieldInit.UInt32 \nUInt32 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt64","title":"ILFieldInit.UInt64","content":"ILFieldInit.UInt64 \nUInt64 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Single","title":"ILFieldInit.Single","content":"ILFieldInit.Single \nSingle \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Double","title":"ILFieldInit.Double","content":"ILFieldInit.Double \nDouble \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Null","title":"ILFieldInit.Null","content":"ILFieldInit.Null \nNull \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldref.html","title":"ILFieldRef","content":"ILFieldRef \n\n Formal identities of fields.\n \nILFieldRef.DeclaringTypeRef \nDeclaringTypeRef \nILFieldRef.Name \nName \nILFieldRef.Type \nType"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldref.html#DeclaringTypeRef","title":"ILFieldRef.DeclaringTypeRef","content":"ILFieldRef.DeclaringTypeRef \nDeclaringTypeRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldref.html#Name","title":"ILFieldRef.Name","content":"ILFieldRef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldref.html#Type","title":"ILFieldRef.Type","content":"ILFieldRef.Type \nType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldspec.html","title":"ILFieldSpec","content":"ILFieldSpec \n\n Field specs.  The data given for a ldfld, stfld etc. instruction.\n \nILFieldSpec.ActualType \nActualType \nILFieldSpec.FormalType \nFormalType \nILFieldSpec.DeclaringTypeRef \nDeclaringTypeRef \nILFieldSpec.Name \nName \nILFieldSpec.FieldRef \nFieldRef \nILFieldSpec.DeclaringType \nDeclaringType"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#ActualType","title":"ILFieldSpec.ActualType","content":"ILFieldSpec.ActualType \nActualType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#FormalType","title":"ILFieldSpec.FormalType","content":"ILFieldSpec.FormalType \nFormalType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#DeclaringTypeRef","title":"ILFieldSpec.DeclaringTypeRef","content":"ILFieldSpec.DeclaringTypeRef \nDeclaringTypeRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#Name","title":"ILFieldSpec.Name","content":"ILFieldSpec.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#FieldRef","title":"ILFieldSpec.FieldRef","content":"ILFieldSpec.FieldRef \nFieldRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#DeclaringType","title":"ILFieldSpec.DeclaringType","content":"ILFieldSpec.DeclaringType \nDeclaringType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericargs.html","title":"ILGenericArgs","content":"ILGenericArgs \n\n Actual generic parameters are  always types.\n \nILGenericArgs.Tail \nTail \nILGenericArgs.Length \nLength \nILGenericArgs.IsEmpty \nIsEmpty \nILGenericArgs.Head \nHead \nILGenericArgs.Item \nItem \nILGenericArgs.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericargs.html#Tail","title":"ILGenericArgs.Tail","content":"ILGenericArgs.Tail \nTail \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericargs.html#Length","title":"ILGenericArgs.Length","content":"ILGenericArgs.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericargs.html#IsEmpty","title":"ILGenericArgs.IsEmpty","content":"ILGenericArgs.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericargs.html#Head","title":"ILGenericArgs.Head","content":"ILGenericArgs.Head \nHead \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericargs.html#Item","title":"ILGenericArgs.Item","content":"ILGenericArgs.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericargs.html#Empty","title":"ILGenericArgs.Empty","content":"ILGenericArgs.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html","title":"ILGenericParameterDef","content":"ILGenericParameterDef \n\n Generic parameters.  Formal generic parameter declarations may include the bounds, if any, on the generic parameter.\n \nILGenericParameterDef.CustomAttrs \nCustomAttrs \nILGenericParameterDef.Name \nName \nILGenericParameterDef.Constraints \nConstraints \nILGenericParameterDef.Variance \nVariance \nILGenericParameterDef.HasReferenceTypeConstraint \nHasReferenceTypeConstraint \nILGenericParameterDef.HasNotNullableValueTypeConstraint \nHasNotNullableValueTypeConstraint \nILGenericParameterDef.HasDefaultConstructorConstraint \nHasDefaultConstructorConstraint \nILGenericParameterDef.CustomAttrsStored \nCustomAttrsStored \nILGenericParameterDef.MetadataIndex \nMetadataIndex"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#CustomAttrs","title":"ILGenericParameterDef.CustomAttrs","content":"ILGenericParameterDef.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Name","title":"ILGenericParameterDef.Name","content":"ILGenericParameterDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Constraints","title":"ILGenericParameterDef.Constraints","content":"ILGenericParameterDef.Constraints \nConstraints \n\n At most one is the parent type, the others are interface types.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Variance","title":"ILGenericParameterDef.Variance","content":"ILGenericParameterDef.Variance \nVariance \n\n Variance of type parameters, only applicable to generic parameters for generic interfaces and delegates.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasReferenceTypeConstraint","title":"ILGenericParameterDef.HasReferenceTypeConstraint","content":"ILGenericParameterDef.HasReferenceTypeConstraint \nHasReferenceTypeConstraint \n\n Indicates the type argument must be a reference type.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasNotNullableValueTypeConstraint","title":"ILGenericParameterDef.HasNotNullableValueTypeConstraint","content":"ILGenericParameterDef.HasNotNullableValueTypeConstraint \nHasNotNullableValueTypeConstraint \n\n Indicates the type argument must be a value type, but not Nullable.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasDefaultConstructorConstraint","title":"ILGenericParameterDef.HasDefaultConstructorConstraint","content":"ILGenericParameterDef.HasDefaultConstructorConstraint \nHasDefaultConstructorConstraint \n\n Indicates the type argument must have a public nullary constructor.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#CustomAttrsStored","title":"ILGenericParameterDef.CustomAttrsStored","content":"ILGenericParameterDef.CustomAttrsStored \nCustomAttrsStored \n\n Do not use this\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#MetadataIndex","title":"ILGenericParameterDef.MetadataIndex","content":"ILGenericParameterDef.MetadataIndex \nMetadataIndex \n\n Do not use this\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdefs.html","title":"ILGenericParameterDefs","content":"ILGenericParameterDefs \n \nILGenericParameterDefs.Tail \nTail \nILGenericParameterDefs.Length \nLength \nILGenericParameterDefs.IsEmpty \nIsEmpty \nILGenericParameterDefs.Head \nHead \nILGenericParameterDefs.Item \nItem \nILGenericParameterDefs.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdefs.html#Tail","title":"ILGenericParameterDefs.Tail","content":"ILGenericParameterDefs.Tail \nTail \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdefs.html#Length","title":"ILGenericParameterDefs.Length","content":"ILGenericParameterDefs.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdefs.html#IsEmpty","title":"ILGenericParameterDefs.IsEmpty","content":"ILGenericParameterDefs.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdefs.html#Head","title":"ILGenericParameterDefs.Head","content":"ILGenericParameterDefs.Head \nHead \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdefs.html#Item","title":"ILGenericParameterDefs.Item","content":"ILGenericParameterDefs.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericparameterdefs.html#Empty","title":"ILGenericParameterDefs.Empty","content":"ILGenericParameterDefs.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html","title":"ILGenericVariance","content":"ILGenericVariance \n \nILGenericVariance.NonVariant \nNonVariant \nILGenericVariance.CoVariant \nCoVariant \nILGenericVariance.ContraVariant \nContraVariant"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#NonVariant","title":"ILGenericVariance.NonVariant","content":"ILGenericVariance.NonVariant \nNonVariant \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#CoVariant","title":"ILGenericVariance.CoVariant","content":"ILGenericVariance.CoVariant \nCoVariant \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#ContraVariant","title":"ILGenericVariance.ContraVariant","content":"ILGenericVariance.ContraVariant \nContraVariant \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilguid.html","title":"ILGuid","content":"ILGuid \n\n Represents guids\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html","title":"ILMemberAccess","content":"ILMemberAccess \n\n Member Access\n \nILMemberAccess.Assembly \nAssembly \nILMemberAccess.CompilerControlled \nCompilerControlled \nILMemberAccess.FamilyAndAssembly \nFamilyAndAssembly \nILMemberAccess.FamilyOrAssembly \nFamilyOrAssembly \nILMemberAccess.Family \nFamily \nILMemberAccess.Private \nPrivate \nILMemberAccess.Public \nPublic"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Assembly","title":"ILMemberAccess.Assembly","content":"ILMemberAccess.Assembly \nAssembly \n\n Assembly - Indicates that the method is accessible to any class of this assembly. (internal)\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#CompilerControlled","title":"ILMemberAccess.CompilerControlled","content":"ILMemberAccess.CompilerControlled \nCompilerControlled \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#FamilyAndAssembly","title":"ILMemberAccess.FamilyAndAssembly","content":"ILMemberAccess.FamilyAndAssembly \nFamilyAndAssembly \n\n FamilyAndAssembly - Indicates that the method is accessible to members of this type and its derived types that are in _this assembly only_. (private protected)\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#FamilyOrAssembly","title":"ILMemberAccess.FamilyOrAssembly","content":"ILMemberAccess.FamilyOrAssembly \nFamilyOrAssembly \n\n FamilyOrAssembly - Indicates that the method is accessible to derived classes anywhere, as well as to any class _in the assembly_. (protected internal)\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Family","title":"ILMemberAccess.Family","content":"ILMemberAccess.Family \nFamily \n\n Family - Indicates that the method is accessible only to members of this class and its derived classes. (protected)\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Private","title":"ILMemberAccess.Private","content":"ILMemberAccess.Private \nPrivate \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Public","title":"ILMemberAccess.Public","content":"ILMemberAccess.Public \nPublic \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html","title":"ILMethodDef","content":"ILMethodDef \n\n IL Method definitions.\n \nILMethodDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILMethodDef.IsClassInitializer \nIsClassInitializer \nILMethodDef.IsFinal \nIsFinal \nILMethodDef.IsManaged \nIsManaged \nILMethodDef.IsHideBySig \nIsHideBySig \nILMethodDef.IsAbstract \nIsAbstract \nILMethodDef.IsNoInline \nIsNoInline \nILMethodDef.Locals \nLocals \nILMethodDef.Code \nCode \nILMethodDef.Name \nName \nILMethodDef.IsConstructor \nIsConstructor \nILMethodDef.IsCheckAccessOnOverride \nIsCheckAccessOnOverride \nILMethodDef.IsStatic \nIsStatic \nILMethodDef.ImplAttributes \nImplAttributes \nILMethodDef.Parameters \nParameters \nILMethodDef.IsNewSlot \nIsNewSlot \nILMethodDef.IsInternalCall \nIsInternalCall \nILMethodDef.Attributes \nAttributes \nILMethodDef.Return \nReturn \nILMethodDef.IsZeroInit \nIsZeroInit \nILMethodDef.HasSecurity \nHasSecurity \nILMethodDef.MethodBody \nMethodBody \nILMethodDef.ParameterTypes \nParameterTypes \nILMethodDef.Access \nAccess \nILMethodDef.IsMustRun \nIsMustRun \nILMethodDef.IsReqSecObj \nIsReqSecObj \nILMethodDef.IsIL \nIsIL \nILMethodDef.IsAggressiveInline \nIsAggressiveInline \nILMethodDef.IsSynchronized \nIsSynchronized \nILMethodDef.IsForwardRef \nIsForwardRef \nILMethodDef.GenericParams \nGenericParams \nILMethodDef.Body \nBody \nILMethodDef.SecurityDecls \nSecurityDecls \nILMethodDef.IsSpecialName \nIsSpecialName \nILMethodDef.IsEntryPoint \nIsEntryPoint \nILMethodDef.CallingConv \nCallingConv \nILMethodDef.CustomAttrs \nCustomAttrs \nILMethodDef.IsNonVirtualInstance \nIsNonVirtualInstance \nILMethodDef.IsPreserveSig \nIsPreserveSig \nILMethodDef.IsUnmanagedExport \nIsUnmanagedExport \nILMethodDef.MaxStack \nMaxStack \nILMethodDef.IsVirtual \nIsVirtual \nILMethodDef.CallingSignature \nCallingSignature"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILMethodDef.\u0060\u0060.ctor\u0060\u0060","content":"ILMethodDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n\n Functional creation of a value, immediate\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsClassInitializer","title":"ILMethodDef.IsClassInitializer","content":"ILMethodDef.IsClassInitializer \nIsClassInitializer \n\n Indicates a .cctor method.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsFinal","title":"ILMethodDef.IsFinal","content":"ILMethodDef.IsFinal \nIsFinal \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsManaged","title":"ILMethodDef.IsManaged","content":"ILMethodDef.IsManaged \nIsManaged \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsHideBySig","title":"ILMethodDef.IsHideBySig","content":"ILMethodDef.IsHideBySig \nIsHideBySig \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsAbstract","title":"ILMethodDef.IsAbstract","content":"ILMethodDef.IsAbstract \nIsAbstract \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNoInline","title":"ILMethodDef.IsNoInline","content":"ILMethodDef.IsNoInline \nIsNoInline \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Locals","title":"ILMethodDef.Locals","content":"ILMethodDef.Locals \nLocals \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Code","title":"ILMethodDef.Code","content":"ILMethodDef.Code \nCode \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Name","title":"ILMethodDef.Name","content":"ILMethodDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsConstructor","title":"ILMethodDef.IsConstructor","content":"ILMethodDef.IsConstructor \nIsConstructor \n\n Indicates a .ctor method.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsCheckAccessOnOverride","title":"ILMethodDef.IsCheckAccessOnOverride","content":"ILMethodDef.IsCheckAccessOnOverride \nIsCheckAccessOnOverride \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsStatic","title":"ILMethodDef.IsStatic","content":"ILMethodDef.IsStatic \nIsStatic \n\n Indicates a static method.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#ImplAttributes","title":"ILMethodDef.ImplAttributes","content":"ILMethodDef.ImplAttributes \nImplAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Parameters","title":"ILMethodDef.Parameters","content":"ILMethodDef.Parameters \nParameters \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNewSlot","title":"ILMethodDef.IsNewSlot","content":"ILMethodDef.IsNewSlot \nIsNewSlot \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsInternalCall","title":"ILMethodDef.IsInternalCall","content":"ILMethodDef.IsInternalCall \nIsInternalCall \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Attributes","title":"ILMethodDef.Attributes","content":"ILMethodDef.Attributes \nAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Return","title":"ILMethodDef.Return","content":"ILMethodDef.Return \nReturn \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsZeroInit","title":"ILMethodDef.IsZeroInit","content":"ILMethodDef.IsZeroInit \nIsZeroInit \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#HasSecurity","title":"ILMethodDef.HasSecurity","content":"ILMethodDef.HasSecurity \nHasSecurity \n\n Some methods are marked \u0022HasSecurity\u0022 even if there are no permissions attached, e.g. if they use SuppressUnmanagedCodeSecurityAttribute\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#MethodBody","title":"ILMethodDef.MethodBody","content":"ILMethodDef.MethodBody \nMethodBody \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#ParameterTypes","title":"ILMethodDef.ParameterTypes","content":"ILMethodDef.ParameterTypes \nParameterTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Access","title":"ILMethodDef.Access","content":"ILMethodDef.Access \nAccess \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsMustRun","title":"ILMethodDef.IsMustRun","content":"ILMethodDef.IsMustRun \nIsMustRun \n\n SafeHandle finalizer must be run.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsReqSecObj","title":"ILMethodDef.IsReqSecObj","content":"ILMethodDef.IsReqSecObj \nIsReqSecObj \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsIL","title":"ILMethodDef.IsIL","content":"ILMethodDef.IsIL \nIsIL \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsAggressiveInline","title":"ILMethodDef.IsAggressiveInline","content":"ILMethodDef.IsAggressiveInline \nIsAggressiveInline \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsSynchronized","title":"ILMethodDef.IsSynchronized","content":"ILMethodDef.IsSynchronized \nIsSynchronized \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsForwardRef","title":"ILMethodDef.IsForwardRef","content":"ILMethodDef.IsForwardRef \nIsForwardRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#GenericParams","title":"ILMethodDef.GenericParams","content":"ILMethodDef.GenericParams \nGenericParams \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Body","title":"ILMethodDef.Body","content":"ILMethodDef.Body \nBody \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#SecurityDecls","title":"ILMethodDef.SecurityDecls","content":"ILMethodDef.SecurityDecls \nSecurityDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsSpecialName","title":"ILMethodDef.IsSpecialName","content":"ILMethodDef.IsSpecialName \nIsSpecialName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsEntryPoint","title":"ILMethodDef.IsEntryPoint","content":"ILMethodDef.IsEntryPoint \nIsEntryPoint \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CallingConv","title":"ILMethodDef.CallingConv","content":"ILMethodDef.CallingConv \nCallingConv \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CustomAttrs","title":"ILMethodDef.CustomAttrs","content":"ILMethodDef.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNonVirtualInstance","title":"ILMethodDef.IsNonVirtualInstance","content":"ILMethodDef.IsNonVirtualInstance \nIsNonVirtualInstance \n\n Indicates this is an instance methods that is not virtual.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsPreserveSig","title":"ILMethodDef.IsPreserveSig","content":"ILMethodDef.IsPreserveSig \nIsPreserveSig \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsUnmanagedExport","title":"ILMethodDef.IsUnmanagedExport","content":"ILMethodDef.IsUnmanagedExport \nIsUnmanagedExport \n\n The method is exported to unmanaged code using COM interop.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#MaxStack","title":"ILMethodDef.MaxStack","content":"ILMethodDef.MaxStack \nMaxStack \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsVirtual","title":"ILMethodDef.IsVirtual","content":"ILMethodDef.IsVirtual \nIsVirtual \n\n Indicates an instance methods that is virtual or abstract or implements an interface slot.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CallingSignature","title":"ILMethodDef.CallingSignature","content":"ILMethodDef.CallingSignature \nCallingSignature \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html","title":"ILMethodDefs","content":"ILMethodDefs \n\n Tables of methods.  Logically equivalent to a list of methods but\n the table is kept in a form optimized for looking up methods by\n name and arity.\n \nILMethodDefs.AsArray \nAsArray \nILMethodDefs.AsList \nAsList \nILMethodDefs.FindByName \nFindByName \nILMethodDefs.TryFindInstanceByNameAndCallingSignature \nTryFindInstanceByNameAndCallingSignature"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#AsArray","title":"ILMethodDefs.AsArray","content":"ILMethodDefs.AsArray \nAsArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#AsList","title":"ILMethodDefs.AsList","content":"ILMethodDefs.AsList \nAsList \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#FindByName","title":"ILMethodDefs.FindByName","content":"ILMethodDefs.FindByName \nFindByName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#TryFindInstanceByNameAndCallingSignature","title":"ILMethodDefs.TryFindInstanceByNameAndCallingSignature","content":"ILMethodDefs.TryFindInstanceByNameAndCallingSignature \nTryFindInstanceByNameAndCallingSignature \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html","title":"ILMethodImplDef","content":"ILMethodImplDef \n\n Method Impls\n \nILMethodImplDef.Overrides \nOverrides \nILMethodImplDef.OverrideBy \nOverrideBy"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html#Overrides","title":"ILMethodImplDef.Overrides","content":"ILMethodImplDef.Overrides \nOverrides \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html#OverrideBy","title":"ILMethodImplDef.OverrideBy","content":"ILMethodImplDef.OverrideBy \nOverrideBy \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodimpldefs.html","title":"ILMethodImplDefs","content":"ILMethodImplDefs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html","title":"ILMethodRef","content":"ILMethodRef \n\n Formal identities of methods.\n \nILMethodRef.ArgCount \nArgCount \nILMethodRef.CallingConv \nCallingConv \nILMethodRef.ReturnType \nReturnType \nILMethodRef.ArgTypes \nArgTypes \nILMethodRef.DeclaringTypeRef \nDeclaringTypeRef \nILMethodRef.GenericArity \nGenericArity \nILMethodRef.Name \nName \nILMethodRef.CallingSignature \nCallingSignature \nILMethodRef.Create \nCreate"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ArgCount","title":"ILMethodRef.ArgCount","content":"ILMethodRef.ArgCount \nArgCount \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#CallingConv","title":"ILMethodRef.CallingConv","content":"ILMethodRef.CallingConv \nCallingConv \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ReturnType","title":"ILMethodRef.ReturnType","content":"ILMethodRef.ReturnType \nReturnType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ArgTypes","title":"ILMethodRef.ArgTypes","content":"ILMethodRef.ArgTypes \nArgTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#DeclaringTypeRef","title":"ILMethodRef.DeclaringTypeRef","content":"ILMethodRef.DeclaringTypeRef \nDeclaringTypeRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#GenericArity","title":"ILMethodRef.GenericArity","content":"ILMethodRef.GenericArity \nGenericArity \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#Name","title":"ILMethodRef.Name","content":"ILMethodRef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#CallingSignature","title":"ILMethodRef.CallingSignature","content":"ILMethodRef.CallingSignature \nCallingSignature \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodref.html#Create","title":"ILMethodRef.Create","content":"ILMethodRef.Create \nCreate \n\n Functional creation\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html","title":"ILMethodSpec","content":"ILMethodSpec \n\n The information at the callsite of a method\n \nILMethodSpec.MethodRef \nMethodRef \nILMethodSpec.FormalReturnType \nFormalReturnType \nILMethodSpec.DeclaringType \nDeclaringType \nILMethodSpec.CallingConv \nCallingConv \nILMethodSpec.GenericArgs \nGenericArgs \nILMethodSpec.FormalArgTypes \nFormalArgTypes \nILMethodSpec.GenericArity \nGenericArity \nILMethodSpec.Name \nName \nILMethodSpec.Create \nCreate"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#MethodRef","title":"ILMethodSpec.MethodRef","content":"ILMethodSpec.MethodRef \nMethodRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#FormalReturnType","title":"ILMethodSpec.FormalReturnType","content":"ILMethodSpec.FormalReturnType \nFormalReturnType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#DeclaringType","title":"ILMethodSpec.DeclaringType","content":"ILMethodSpec.DeclaringType \nDeclaringType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#CallingConv","title":"ILMethodSpec.CallingConv","content":"ILMethodSpec.CallingConv \nCallingConv \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#GenericArgs","title":"ILMethodSpec.GenericArgs","content":"ILMethodSpec.GenericArgs \nGenericArgs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#FormalArgTypes","title":"ILMethodSpec.FormalArgTypes","content":"ILMethodSpec.FormalArgTypes \nFormalArgTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#GenericArity","title":"ILMethodSpec.GenericArity","content":"ILMethodSpec.GenericArity \nGenericArity \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#Name","title":"ILMethodSpec.Name","content":"ILMethodSpec.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#Create","title":"ILMethodSpec.Create","content":"ILMethodSpec.Create \nCreate \n\n Functional creation\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html","title":"ILModuleDef","content":"ILModuleDef \n\n One module in the \u0022current\u0022 assembly, either a main-module or\n an auxiliary module.  The main module will have a manifest.\n\n An assembly is built by joining together a \u0022main\u0022 module plus\n several auxiliary modules.\n \nILModuleDef.CustomAttrs \nCustomAttrs \nILModuleDef.HasManifest \nHasManifest \nILModuleDef.ManifestOfAssembly \nManifestOfAssembly \nILModuleDef.Manifest \nManifest \nILModuleDef.Name \nName \nILModuleDef.TypeDefs \nTypeDefs \nILModuleDef.SubsystemVersion \nSubsystemVersion \nILModuleDef.UseHighEntropyVA \nUseHighEntropyVA \nILModuleDef.SubSystemFlags \nSubSystemFlags \nILModuleDef.IsDLL \nIsDLL \nILModuleDef.IsILOnly \nIsILOnly \nILModuleDef.Platform \nPlatform \nILModuleDef.StackReserveSize \nStackReserveSize \nILModuleDef.Is32Bit \nIs32Bit \nILModuleDef.Is32BitPreferred \nIs32BitPreferred \nILModuleDef.Is64Bit \nIs64Bit \nILModuleDef.VirtualAlignment \nVirtualAlignment \nILModuleDef.PhysicalAlignment \nPhysicalAlignment \nILModuleDef.ImageBase \nImageBase \nILModuleDef.MetadataVersion \nMetadataVersion \nILModuleDef.Resources \nResources \nILModuleDef.NativeResources \nNativeResources \nILModuleDef.CustomAttrsStored \nCustomAttrsStored \nILModuleDef.MetadataIndex \nMetadataIndex"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#CustomAttrs","title":"ILModuleDef.CustomAttrs","content":"ILModuleDef.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#HasManifest","title":"ILModuleDef.HasManifest","content":"ILModuleDef.HasManifest \nHasManifest \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#ManifestOfAssembly","title":"ILModuleDef.ManifestOfAssembly","content":"ILModuleDef.ManifestOfAssembly \nManifestOfAssembly \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Manifest","title":"ILModuleDef.Manifest","content":"ILModuleDef.Manifest \nManifest \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Name","title":"ILModuleDef.Name","content":"ILModuleDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#TypeDefs","title":"ILModuleDef.TypeDefs","content":"ILModuleDef.TypeDefs \nTypeDefs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#SubsystemVersion","title":"ILModuleDef.SubsystemVersion","content":"ILModuleDef.SubsystemVersion \nSubsystemVersion \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#UseHighEntropyVA","title":"ILModuleDef.UseHighEntropyVA","content":"ILModuleDef.UseHighEntropyVA \nUseHighEntropyVA \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#SubSystemFlags","title":"ILModuleDef.SubSystemFlags","content":"ILModuleDef.SubSystemFlags \nSubSystemFlags \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#IsDLL","title":"ILModuleDef.IsDLL","content":"ILModuleDef.IsDLL \nIsDLL \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#IsILOnly","title":"ILModuleDef.IsILOnly","content":"ILModuleDef.IsILOnly \nIsILOnly \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Platform","title":"ILModuleDef.Platform","content":"ILModuleDef.Platform \nPlatform \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#StackReserveSize","title":"ILModuleDef.StackReserveSize","content":"ILModuleDef.StackReserveSize \nStackReserveSize \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is32Bit","title":"ILModuleDef.Is32Bit","content":"ILModuleDef.Is32Bit \nIs32Bit \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is32BitPreferred","title":"ILModuleDef.Is32BitPreferred","content":"ILModuleDef.Is32BitPreferred \nIs32BitPreferred \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is64Bit","title":"ILModuleDef.Is64Bit","content":"ILModuleDef.Is64Bit \nIs64Bit \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#VirtualAlignment","title":"ILModuleDef.VirtualAlignment","content":"ILModuleDef.VirtualAlignment \nVirtualAlignment \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#PhysicalAlignment","title":"ILModuleDef.PhysicalAlignment","content":"ILModuleDef.PhysicalAlignment \nPhysicalAlignment \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#ImageBase","title":"ILModuleDef.ImageBase","content":"ILModuleDef.ImageBase \nImageBase \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#MetadataVersion","title":"ILModuleDef.MetadataVersion","content":"ILModuleDef.MetadataVersion \nMetadataVersion \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Resources","title":"ILModuleDef.Resources","content":"ILModuleDef.Resources \nResources \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#NativeResources","title":"ILModuleDef.NativeResources","content":"ILModuleDef.NativeResources \nNativeResources \n\n e.g. win86 resources, as the exact contents of a .res or .obj file. Must be unlinked manually.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#CustomAttrsStored","title":"ILModuleDef.CustomAttrsStored","content":"ILModuleDef.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#MetadataIndex","title":"ILModuleDef.MetadataIndex","content":"ILModuleDef.MetadataIndex \nMetadataIndex \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduleref.html","title":"ILModuleRef","content":"ILModuleRef \n \nILModuleRef.Hash \nHash \nILModuleRef.HasMetadata \nHasMetadata \nILModuleRef.Name \nName \nILModuleRef.Create \nCreate"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Hash","title":"ILModuleRef.Hash","content":"ILModuleRef.Hash \nHash \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#HasMetadata","title":"ILModuleRef.HasMetadata","content":"ILModuleRef.HasMetadata \nHasMetadata \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Name","title":"ILModuleRef.Name","content":"ILModuleRef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Create","title":"ILModuleRef.Create","content":"ILModuleRef.Create \nCreate \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativeresource.html","title":"ILNativeResource","content":"ILNativeResource \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html","title":"ILNativeType","content":"ILNativeType \n\n Native Types, for marshalling to the native C interface.\n These are taken directly from the ILASM syntax.\n Most of these are listed in the CLI ECMA-335 Spec (Partition II, 7.4).\n \nILNativeType.Empty \nEmpty \nILNativeType.Custom \nCustom \nILNativeType.FixedSysString \nFixedSysString \nILNativeType.FixedArray \nFixedArray \nILNativeType.Currency \nCurrency \nILNativeType.LPSTR \nLPSTR \nILNativeType.LPWSTR \nLPWSTR \nILNativeType.LPTSTR \nLPTSTR \nILNativeType.LPUTF8STR \nLPUTF8STR \nILNativeType.ByValStr \nByValStr \nILNativeType.TBSTR \nTBSTR \nILNativeType.LPSTRUCT \nLPSTRUCT \nILNativeType.Struct \nStruct \nILNativeType.Void \nVoid \nILNativeType.Bool \nBool \nILNativeType.Int8 \nInt8 \nILNativeType.Int16 \nInt16 \nILNativeType.Int32 \nInt32 \nILNativeType.Int64 \nInt64 \nILNativeType.Single \nSingle \nILNativeType.Double \nDouble \nILNativeType.Byte \nByte \nILNativeType.UInt16 \nUInt16 \nILNativeType.UInt32 \nUInt32 \nILNativeType.UInt64 \nUInt64 \nILNativeType.Array \nArray \nILNativeType.Int \nInt \nILNativeType.UInt \nUInt \nILNativeType.Method \nMethod \nILNativeType.AsAny \nAsAny \nILNativeType.BSTR \nBSTR \nILNativeType.IUnknown \nIUnknown \nILNativeType.IDispatch \nIDispatch \nILNativeType.Interface \nInterface \nILNativeType.Error \nError \nILNativeType.SafeArray \nSafeArray \nILNativeType.ANSIBSTR \nANSIBSTR \nILNativeType.VariantBool \nVariantBool"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Empty","title":"ILNativeType.Empty","content":"ILNativeType.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Custom","title":"ILNativeType.Custom","content":"ILNativeType.Custom \nCustom \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#FixedSysString","title":"ILNativeType.FixedSysString","content":"ILNativeType.FixedSysString \nFixedSysString \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#FixedArray","title":"ILNativeType.FixedArray","content":"ILNativeType.FixedArray \nFixedArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Currency","title":"ILNativeType.Currency","content":"ILNativeType.Currency \nCurrency \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPSTR","title":"ILNativeType.LPSTR","content":"ILNativeType.LPSTR \nLPSTR \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPWSTR","title":"ILNativeType.LPWSTR","content":"ILNativeType.LPWSTR \nLPWSTR \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPTSTR","title":"ILNativeType.LPTSTR","content":"ILNativeType.LPTSTR \nLPTSTR \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPUTF8STR","title":"ILNativeType.LPUTF8STR","content":"ILNativeType.LPUTF8STR \nLPUTF8STR \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#ByValStr","title":"ILNativeType.ByValStr","content":"ILNativeType.ByValStr \nByValStr \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#TBSTR","title":"ILNativeType.TBSTR","content":"ILNativeType.TBSTR \nTBSTR \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPSTRUCT","title":"ILNativeType.LPSTRUCT","content":"ILNativeType.LPSTRUCT \nLPSTRUCT \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Struct","title":"ILNativeType.Struct","content":"ILNativeType.Struct \nStruct \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Void","title":"ILNativeType.Void","content":"ILNativeType.Void \nVoid \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Bool","title":"ILNativeType.Bool","content":"ILNativeType.Bool \nBool \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int8","title":"ILNativeType.Int8","content":"ILNativeType.Int8 \nInt8 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int16","title":"ILNativeType.Int16","content":"ILNativeType.Int16 \nInt16 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int32","title":"ILNativeType.Int32","content":"ILNativeType.Int32 \nInt32 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int64","title":"ILNativeType.Int64","content":"ILNativeType.Int64 \nInt64 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Single","title":"ILNativeType.Single","content":"ILNativeType.Single \nSingle \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Double","title":"ILNativeType.Double","content":"ILNativeType.Double \nDouble \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Byte","title":"ILNativeType.Byte","content":"ILNativeType.Byte \nByte \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt16","title":"ILNativeType.UInt16","content":"ILNativeType.UInt16 \nUInt16 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt32","title":"ILNativeType.UInt32","content":"ILNativeType.UInt32 \nUInt32 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt64","title":"ILNativeType.UInt64","content":"ILNativeType.UInt64 \nUInt64 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Array","title":"ILNativeType.Array","content":"ILNativeType.Array \nArray \n\n  optional idx of parameter giving size plus optional additive i.e. num elems\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int","title":"ILNativeType.Int","content":"ILNativeType.Int \nInt \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt","title":"ILNativeType.UInt","content":"ILNativeType.UInt \nUInt \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Method","title":"ILNativeType.Method","content":"ILNativeType.Method \nMethod \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#AsAny","title":"ILNativeType.AsAny","content":"ILNativeType.AsAny \nAsAny \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#BSTR","title":"ILNativeType.BSTR","content":"ILNativeType.BSTR \nBSTR \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IUnknown","title":"ILNativeType.IUnknown","content":"ILNativeType.IUnknown \nIUnknown \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IDispatch","title":"ILNativeType.IDispatch","content":"ILNativeType.IDispatch \nIDispatch \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Interface","title":"ILNativeType.Interface","content":"ILNativeType.Interface \nInterface \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Error","title":"ILNativeType.Error","content":"ILNativeType.Error \nError \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#SafeArray","title":"ILNativeType.SafeArray","content":"ILNativeType.SafeArray \nSafeArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#ANSIBSTR","title":"ILNativeType.ANSIBSTR","content":"ILNativeType.ANSIBSTR \nANSIBSTR \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnativetype.html#VariantBool","title":"ILNativeType.VariantBool","content":"ILNativeType.VariantBool \nVariantBool \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html","title":"ILNestedExportedType","content":"ILNestedExportedType \n\n \u0022Classes Elsewhere\u0022 - classes in auxiliary modules.\n\n Manifests include declarations for all the classes in an\n assembly, regardless of which module they are in.\n\n The \u0022.class extern\u0022 construct describes so-called exported types --\n these are public classes defined in the auxiliary modules of this assembly,\n i.e. modules other than the manifest-carrying module.\n\n For example, if you have a two-module\n assembly (A.DLL and B.DLL), and the manifest resides in the A.DLL,\n then in the manifest all the public classes declared in B.DLL should\n be defined as exported types, i.e., as \u0022.class extern\u0022. The public classes\n defined in A.DLL should not be defined as \u0022.class extern\u0022 -- they are\n already available in the manifest-carrying module. The union of all\n public classes defined in the manifest-carrying module and all\n exported types defined there is the set of all classes exposed by\n this assembly. Thus, by analysing the metadata of the manifest-carrying\n module of an assembly, you can identify all the classes exposed by\n this assembly, and where to find them.\n\n Nested classes found in external modules should also be located in\n this table, suitably nested inside another \u0022ILExportedTypeOrForwarder\u0022\n definition.\n these are only found in the \u0022Nested\u0022 field of ILExportedTypeOrForwarder objects\n \nILNestedExportedType.CustomAttrs \nCustomAttrs \nILNestedExportedType.Name \nName \nILNestedExportedType.Access \nAccess \nILNestedExportedType.Nested \nNested \nILNestedExportedType.CustomAttrsStored \nCustomAttrsStored \nILNestedExportedType.MetadataIndex \nMetadataIndex"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#CustomAttrs","title":"ILNestedExportedType.CustomAttrs","content":"ILNestedExportedType.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Name","title":"ILNestedExportedType.Name","content":"ILNestedExportedType.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Access","title":"ILNestedExportedType.Access","content":"ILNestedExportedType.Access \nAccess \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Nested","title":"ILNestedExportedType.Nested","content":"ILNestedExportedType.Nested \nNested \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#CustomAttrsStored","title":"ILNestedExportedType.CustomAttrsStored","content":"ILNestedExportedType.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#MetadataIndex","title":"ILNestedExportedType.MetadataIndex","content":"ILNestedExportedType.MetadataIndex \nMetadataIndex \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilnestedexportedtypes.html","title":"ILNestedExportedTypes","content":"ILNestedExportedTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html","title":"ILParameter","content":"ILParameter \n\n Method parameters and return values.\n \nILParameter.CustomAttrs \nCustomAttrs \nILParameter.Name \nName \nILParameter.Type \nType \nILParameter.Default \nDefault \nILParameter.Marshal \nMarshal \nILParameter.IsIn \nIsIn \nILParameter.IsOut \nIsOut \nILParameter.IsOptional \nIsOptional \nILParameter.CustomAttrsStored \nCustomAttrsStored \nILParameter.MetadataIndex \nMetadataIndex"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#CustomAttrs","title":"ILParameter.CustomAttrs","content":"ILParameter.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#Name","title":"ILParameter.Name","content":"ILParameter.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#Type","title":"ILParameter.Type","content":"ILParameter.Type \nType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#Default","title":"ILParameter.Default","content":"ILParameter.Default \nDefault \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#Marshal","title":"ILParameter.Marshal","content":"ILParameter.Marshal \nMarshal \n\n Marshalling map for parameters. COM Interop only.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsIn","title":"ILParameter.IsIn","content":"ILParameter.IsIn \nIsIn \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsOut","title":"ILParameter.IsOut","content":"ILParameter.IsOut \nIsOut \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsOptional","title":"ILParameter.IsOptional","content":"ILParameter.IsOptional \nIsOptional \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#CustomAttrsStored","title":"ILParameter.CustomAttrsStored","content":"ILParameter.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameter.html#MetadataIndex","title":"ILParameter.MetadataIndex","content":"ILParameter.MetadataIndex \nMetadataIndex \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameters.html","title":"ILParameters","content":"ILParameters \n \nILParameters.Tail \nTail \nILParameters.Length \nLength \nILParameters.IsEmpty \nIsEmpty \nILParameters.Head \nHead \nILParameters.Item \nItem \nILParameters.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameters.html#Tail","title":"ILParameters.Tail","content":"ILParameters.Tail \nTail \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameters.html#Length","title":"ILParameters.Length","content":"ILParameters.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameters.html#IsEmpty","title":"ILParameters.IsEmpty","content":"ILParameters.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameters.html#Head","title":"ILParameters.Head","content":"ILParameters.Head \nHead \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameters.html#Item","title":"ILParameters.Item","content":"ILParameters.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilparameters.html#Empty","title":"ILParameters.Empty","content":"ILParameters.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilplatform.html","title":"ILPlatform","content":"ILPlatform \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpretypedef.html","title":"ILPreTypeDef","content":"ILPreTypeDef \n\n Represents a prefix of information for ILTypeDef.\n\n The information is enough to perform name resolution for the F# compiler, probe attributes\n for ExtensionAttribute  etc.  This is key to the on-demand exploration of .NET metadata.\n This information has to be \u0022Goldilocks\u0022 - not too much, not too little, just right.\n \nILPreTypeDef.GetTypeDef \nGetTypeDef \nILPreTypeDef.Namespace \nNamespace \nILPreTypeDef.Name \nName"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#GetTypeDef","title":"ILPreTypeDef.GetTypeDef","content":"ILPreTypeDef.GetTypeDef \nGetTypeDef \n\n Realise the actual full typedef\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#Namespace","title":"ILPreTypeDef.Namespace","content":"ILPreTypeDef.Namespace \nNamespace \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#Name","title":"ILPreTypeDef.Name","content":"ILPreTypeDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html","title":"ILPropertyDef","content":"ILPropertyDef \n\n Property definitions\n \nILPropertyDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILPropertyDef.Args \nArgs \nILPropertyDef.CustomAttrs \nCustomAttrs \nILPropertyDef.GetMethod \nGetMethod \nILPropertyDef.IsSpecialName \nIsSpecialName \nILPropertyDef.SetMethod \nSetMethod \nILPropertyDef.CallingConv \nCallingConv \nILPropertyDef.PropertyType \nPropertyType \nILPropertyDef.Init \nInit \nILPropertyDef.Attributes \nAttributes \nILPropertyDef.IsRTSpecialName \nIsRTSpecialName \nILPropertyDef.Name \nName"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILPropertyDef.\u0060\u0060.ctor\u0060\u0060","content":"ILPropertyDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n\n Functional creation of a value, immediate\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Args","title":"ILPropertyDef.Args","content":"ILPropertyDef.Args \nArgs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#CustomAttrs","title":"ILPropertyDef.CustomAttrs","content":"ILPropertyDef.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#GetMethod","title":"ILPropertyDef.GetMethod","content":"ILPropertyDef.GetMethod \nGetMethod \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#IsSpecialName","title":"ILPropertyDef.IsSpecialName","content":"ILPropertyDef.IsSpecialName \nIsSpecialName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#SetMethod","title":"ILPropertyDef.SetMethod","content":"ILPropertyDef.SetMethod \nSetMethod \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#CallingConv","title":"ILPropertyDef.CallingConv","content":"ILPropertyDef.CallingConv \nCallingConv \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#PropertyType","title":"ILPropertyDef.PropertyType","content":"ILPropertyDef.PropertyType \nPropertyType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Init","title":"ILPropertyDef.Init","content":"ILPropertyDef.Init \nInit \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Attributes","title":"ILPropertyDef.Attributes","content":"ILPropertyDef.Attributes \nAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#IsRTSpecialName","title":"ILPropertyDef.IsRTSpecialName","content":"ILPropertyDef.IsRTSpecialName \nIsRTSpecialName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Name","title":"ILPropertyDef.Name","content":"ILPropertyDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilpropertydefs.html","title":"ILPropertyDefs","content":"ILPropertyDefs \n\n Table of properties in an IL type definition.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreferences.html","title":"ILReferences","content":"ILReferences \n \nILReferences.AssemblyReferences \nAssemblyReferences \nILReferences.ModuleReferences \nModuleReferences \nILReferences.TypeReferences \nTypeReferences \nILReferences.MethodReferences \nMethodReferences \nILReferences.FieldReferences \nFieldReferences"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreferences.html#AssemblyReferences","title":"ILReferences.AssemblyReferences","content":"ILReferences.AssemblyReferences \nAssemblyReferences \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreferences.html#ModuleReferences","title":"ILReferences.ModuleReferences","content":"ILReferences.ModuleReferences \nModuleReferences \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreferences.html#TypeReferences","title":"ILReferences.TypeReferences","content":"ILReferences.TypeReferences \nTypeReferences \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreferences.html#MethodReferences","title":"ILReferences.MethodReferences","content":"ILReferences.MethodReferences \nMethodReferences \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreferences.html#FieldReferences","title":"ILReferences.FieldReferences","content":"ILReferences.FieldReferences \nFieldReferences \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilresources.html","title":"ILResources","content":"ILResources \n\n Table of resources in a module.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreturn.html","title":"ILReturn","content":"ILReturn \n\n Method return values.\n \nILReturn.WithCustomAttrs \nWithCustomAttrs \nILReturn.CustomAttrs \nCustomAttrs \nILReturn.Marshal \nMarshal \nILReturn.Type \nType \nILReturn.CustomAttrsStored \nCustomAttrsStored \nILReturn.MetadataIndex \nMetadataIndex"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreturn.html#WithCustomAttrs","title":"ILReturn.WithCustomAttrs","content":"ILReturn.WithCustomAttrs \nWithCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreturn.html#CustomAttrs","title":"ILReturn.CustomAttrs","content":"ILReturn.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreturn.html#Marshal","title":"ILReturn.Marshal","content":"ILReturn.Marshal \nMarshal \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreturn.html#Type","title":"ILReturn.Type","content":"ILReturn.Type \nType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreturn.html#CustomAttrsStored","title":"ILReturn.CustomAttrsStored","content":"ILReturn.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilreturn.html#MetadataIndex","title":"ILReturn.MetadataIndex","content":"ILReturn.MetadataIndex \nMetadataIndex \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilscoperef.html","title":"ILScopeRef","content":"ILScopeRef \n \nILScopeRef.IsLocalRef \nIsLocalRef \nILScopeRef.QualifiedName \nQualifiedName \nILScopeRef.Local \nLocal \nILScopeRef.Module \nModule \nILScopeRef.Assembly \nAssembly \nILScopeRef.PrimaryAssembly \nPrimaryAssembly"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilscoperef.html#IsLocalRef","title":"ILScopeRef.IsLocalRef","content":"ILScopeRef.IsLocalRef \nIsLocalRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilscoperef.html#QualifiedName","title":"ILScopeRef.QualifiedName","content":"ILScopeRef.QualifiedName \nQualifiedName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Local","title":"ILScopeRef.Local","content":"ILScopeRef.Local \nLocal \n\n A reference to the type in the current module\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Module","title":"ILScopeRef.Module","content":"ILScopeRef.Module \nModule \n\n A reference to a type in a module in the same assembly\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Assembly","title":"ILScopeRef.Assembly","content":"ILScopeRef.Assembly \nAssembly \n\n A reference to a type in another assembly\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilscoperef.html#PrimaryAssembly","title":"ILScopeRef.PrimaryAssembly","content":"ILScopeRef.PrimaryAssembly \nPrimaryAssembly \n\n A reference to a type in the primary assembly\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilsecuritydeclsstored.html","title":"ILSecurityDeclsStored","content":"ILSecurityDeclsStored \n\n Represents the efficiency-oriented storage of ILSecurityDecls in another item.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html","title":"ILSourceDocument","content":"ILSourceDocument \n\n Debug info.  Values of type \u0022source\u0022 can be attached at sequence\n points and some other locations.\n \nILSourceDocument.File \nFile \nILSourceDocument.Language \nLanguage \nILSourceDocument.Vendor \nVendor \nILSourceDocument.DocumentType \nDocumentType \nILSourceDocument.Create \nCreate"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#File","title":"ILSourceDocument.File","content":"ILSourceDocument.File \nFile \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Language","title":"ILSourceDocument.Language","content":"ILSourceDocument.Language \nLanguage \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Vendor","title":"ILSourceDocument.Vendor","content":"ILSourceDocument.Vendor \nVendor \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#DocumentType","title":"ILSourceDocument.DocumentType","content":"ILSourceDocument.DocumentType \nDocumentType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Create","title":"ILSourceDocument.Create","content":"ILSourceDocument.Create \nCreate \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilthisconvention.html","title":"ILThisConvention","content":"ILThisConvention \n \nILThisConvention.Instance \nInstance \nILThisConvention.InstanceExplicit \nInstanceExplicit \nILThisConvention.Static \nStatic"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#Instance","title":"ILThisConvention.Instance","content":"ILThisConvention.Instance \nInstance \n\n accepts an implicit \u0027this\u0027 pointer\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#InstanceExplicit","title":"ILThisConvention.InstanceExplicit","content":"ILThisConvention.InstanceExplicit \nInstanceExplicit \n\n accepts an explicit \u0027this\u0027 pointer\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#Static","title":"ILThisConvention.Static","content":"ILThisConvention.Static \nStatic \n\n no \u0027this\u0027 pointer is passed\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html","title":"ILType","content":"ILType \n \nILType.IsNominal \nIsNominal \nILType.QualifiedName \nQualifiedName \nILType.BasicQualifiedName \nBasicQualifiedName \nILType.TypeRef \nTypeRef \nILType.IsTyvar \nIsTyvar \nILType.GenericArgs \nGenericArgs \nILType.TypeSpec \nTypeSpec \nILType.Void \nVoid \nILType.Array \nArray \nILType.Value \nValue \nILType.Boxed \nBoxed \nILType.Ptr \nPtr \nILType.Byref \nByref \nILType.FunctionPointer \nFunctionPointer \nILType.TypeVar \nTypeVar \nILType.Modified \nModified"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#IsNominal","title":"ILType.IsNominal","content":"ILType.IsNominal \nIsNominal \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#QualifiedName","title":"ILType.QualifiedName","content":"ILType.QualifiedName \nQualifiedName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#BasicQualifiedName","title":"ILType.BasicQualifiedName","content":"ILType.BasicQualifiedName \nBasicQualifiedName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#TypeRef","title":"ILType.TypeRef","content":"ILType.TypeRef \nTypeRef \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#IsTyvar","title":"ILType.IsTyvar","content":"ILType.IsTyvar \nIsTyvar \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#GenericArgs","title":"ILType.GenericArgs","content":"ILType.GenericArgs \nGenericArgs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#TypeSpec","title":"ILType.TypeSpec","content":"ILType.TypeSpec \nTypeSpec \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#Void","title":"ILType.Void","content":"ILType.Void \nVoid \n\n Used only in return and pointer types.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#Array","title":"ILType.Array","content":"ILType.Array \nArray \n\n Array types\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#Value","title":"ILType.Value","content":"ILType.Value \nValue \n\n Unboxed types, including builtin types.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#Boxed","title":"ILType.Boxed","content":"ILType.Boxed \nBoxed \n\n Reference types.  Also may be used for parents of members even if for members in value types.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#Ptr","title":"ILType.Ptr","content":"ILType.Ptr \nPtr \n\n Unmanaged pointers.  Nb. the type is used by tools and for binding only, not by the verifier.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#Byref","title":"ILType.Byref","content":"ILType.Byref \nByref \n\n Managed pointers.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#FunctionPointer","title":"ILType.FunctionPointer","content":"ILType.FunctionPointer \nFunctionPointer \n\n ILCode pointers.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#TypeVar","title":"ILType.TypeVar","content":"ILType.TypeVar \nTypeVar \n\n Reference a generic arg.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltype.html#Modified","title":"ILType.Modified","content":"ILType.Modified \nModified \n\n Custom modifiers.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html","title":"ILTypeDef","content":"ILTypeDef \n\n Represents IL Type Definitions.\n \nILTypeDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILTypeDef.With \nWith \nILTypeDef.Properties \nProperties \nILTypeDef.IsComInterop \nIsComInterop \nILTypeDef.IsKnownToBeAttribute \nIsKnownToBeAttribute \nILTypeDef.IsStruct \nIsStruct \nILTypeDef.IsAbstract \nIsAbstract \nILTypeDef.MethodImpls \nMethodImpls \nILTypeDef.Methods \nMethods \nILTypeDef.Name \nName \nILTypeDef.Fields \nFields \nILTypeDef.IsEnum \nIsEnum \nILTypeDef.Layout \nLayout \nILTypeDef.Attributes \nAttributes \nILTypeDef.HasSecurity \nHasSecurity \nILTypeDef.Events \nEvents \nILTypeDef.Implements \nImplements \nILTypeDef.Access \nAccess \nILTypeDef.GenericParams \nGenericParams \nILTypeDef.SecurityDecls \nSecurityDecls \nILTypeDef.IsInterface \nIsInterface \nILTypeDef.IsSpecialName \nIsSpecialName \nILTypeDef.IsClass \nIsClass \nILTypeDef.CustomAttrs \nCustomAttrs \nILTypeDef.Encoding \nEncoding \nILTypeDef.Extends \nExtends \nILTypeDef.IsDelegate \nIsDelegate \nILTypeDef.IsStructOrEnum \nIsStructOrEnum \nILTypeDef.NestedTypes \nNestedTypes \nILTypeDef.IsSerializable \nIsSerializable \nILTypeDef.IsSealed \nIsSealed"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#\u0060\u0060.ctor\u0060\u0060","title":"ILTypeDef.\u0060\u0060.ctor\u0060\u0060","content":"ILTypeDef.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n\n Functional creation of a value, immediate\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#With","title":"ILTypeDef.With","content":"ILTypeDef.With \nWith \n\n Functional update\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Properties","title":"ILTypeDef.Properties","content":"ILTypeDef.Properties \nProperties \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsComInterop","title":"ILTypeDef.IsComInterop","content":"ILTypeDef.IsComInterop \nIsComInterop \n\n Class or interface generated for COM interop.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsKnownToBeAttribute","title":"ILTypeDef.IsKnownToBeAttribute","content":"ILTypeDef.IsKnownToBeAttribute \nIsKnownToBeAttribute \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsStruct","title":"ILTypeDef.IsStruct","content":"ILTypeDef.IsStruct \nIsStruct \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsAbstract","title":"ILTypeDef.IsAbstract","content":"ILTypeDef.IsAbstract \nIsAbstract \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#MethodImpls","title":"ILTypeDef.MethodImpls","content":"ILTypeDef.MethodImpls \nMethodImpls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Methods","title":"ILTypeDef.Methods","content":"ILTypeDef.Methods \nMethods \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Name","title":"ILTypeDef.Name","content":"ILTypeDef.Name \nName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Fields","title":"ILTypeDef.Fields","content":"ILTypeDef.Fields \nFields \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsEnum","title":"ILTypeDef.IsEnum","content":"ILTypeDef.IsEnum \nIsEnum \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Layout","title":"ILTypeDef.Layout","content":"ILTypeDef.Layout \nLayout \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Attributes","title":"ILTypeDef.Attributes","content":"ILTypeDef.Attributes \nAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#HasSecurity","title":"ILTypeDef.HasSecurity","content":"ILTypeDef.HasSecurity \nHasSecurity \n\n Some classes are marked \u0022HasSecurity\u0022 even if there are no permissions attached,\n e.g. if they use SuppressUnmanagedCodeSecurityAttribute\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Events","title":"ILTypeDef.Events","content":"ILTypeDef.Events \nEvents \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Implements","title":"ILTypeDef.Implements","content":"ILTypeDef.Implements \nImplements \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Access","title":"ILTypeDef.Access","content":"ILTypeDef.Access \nAccess \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#GenericParams","title":"ILTypeDef.GenericParams","content":"ILTypeDef.GenericParams \nGenericParams \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#SecurityDecls","title":"ILTypeDef.SecurityDecls","content":"ILTypeDef.SecurityDecls \nSecurityDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsInterface","title":"ILTypeDef.IsInterface","content":"ILTypeDef.IsInterface \nIsInterface \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSpecialName","title":"ILTypeDef.IsSpecialName","content":"ILTypeDef.IsSpecialName \nIsSpecialName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsClass","title":"ILTypeDef.IsClass","content":"ILTypeDef.IsClass \nIsClass \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#CustomAttrs","title":"ILTypeDef.CustomAttrs","content":"ILTypeDef.CustomAttrs \nCustomAttrs \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Encoding","title":"ILTypeDef.Encoding","content":"ILTypeDef.Encoding \nEncoding \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#Extends","title":"ILTypeDef.Extends","content":"ILTypeDef.Extends \nExtends \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsDelegate","title":"ILTypeDef.IsDelegate","content":"ILTypeDef.IsDelegate \nIsDelegate \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsStructOrEnum","title":"ILTypeDef.IsStructOrEnum","content":"ILTypeDef.IsStructOrEnum \nIsStructOrEnum \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#NestedTypes","title":"ILTypeDef.NestedTypes","content":"ILTypeDef.NestedTypes \nNestedTypes \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSerializable","title":"ILTypeDef.IsSerializable","content":"ILTypeDef.IsSerializable \nIsSerializable \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSealed","title":"ILTypeDef.IsSealed","content":"ILTypeDef.IsSealed \nIsSealed \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html","title":"ILTypeDefAccess","content":"ILTypeDefAccess \n\n Type Access.\n \nILTypeDefAccess.Public \nPublic \nILTypeDefAccess.Private \nPrivate \nILTypeDefAccess.Nested \nNested"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Public","title":"ILTypeDefAccess.Public","content":"ILTypeDefAccess.Public \nPublic \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Private","title":"ILTypeDefAccess.Private","content":"ILTypeDefAccess.Private \nPrivate \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Nested","title":"ILTypeDefAccess.Nested","content":"ILTypeDefAccess.Nested \nNested \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefkind.html","title":"ILTypeDefKind","content":"ILTypeDefKind \n\n A categorization of type definitions into \u0022kinds\u0022\n \nILTypeDefKind.Class \nClass \nILTypeDefKind.ValueType \nValueType \nILTypeDefKind.Interface \nInterface \nILTypeDefKind.Enum \nEnum \nILTypeDefKind.Delegate \nDelegate"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Class","title":"ILTypeDefKind.Class","content":"ILTypeDefKind.Class \nClass \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#ValueType","title":"ILTypeDefKind.ValueType","content":"ILTypeDefKind.ValueType \nValueType \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Interface","title":"ILTypeDefKind.Interface","content":"ILTypeDefKind.Interface \nInterface \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Enum","title":"ILTypeDefKind.Enum","content":"ILTypeDefKind.Enum \nEnum \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Delegate","title":"ILTypeDefKind.Delegate","content":"ILTypeDefKind.Delegate \nDelegate \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html","title":"ILTypeDefLayout","content":"ILTypeDefLayout \n\n Type Layout information.\n \nILTypeDefLayout.Auto \nAuto \nILTypeDefLayout.Sequential \nSequential \nILTypeDefLayout.Explicit \nExplicit"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Auto","title":"ILTypeDefLayout.Auto","content":"ILTypeDefLayout.Auto \nAuto \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Sequential","title":"ILTypeDefLayout.Sequential","content":"ILTypeDefLayout.Sequential \nSequential \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Explicit","title":"ILTypeDefLayout.Explicit","content":"ILTypeDefLayout.Explicit \nExplicit \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypedefs.html","title":"ILTypeDefs","content":"ILTypeDefs \n\n Tables of named type definitions.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypeinit.html","title":"ILTypeInit","content":"ILTypeInit \n\n Indicate the initialization semantics of a type.\n \nILTypeInit.BeforeField \nBeforeField \nILTypeInit.OnAny \nOnAny"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypeinit.html#BeforeField","title":"ILTypeInit.BeforeField","content":"ILTypeInit.BeforeField \nBeforeField \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypeinit.html#OnAny","title":"ILTypeInit.OnAny","content":"ILTypeInit.OnAny \nOnAny \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html","title":"ILTypeRef","content":"ILTypeRef \n\n Type refs, i.e. references to types in some .NET assembly\n \nILTypeRef.Scope \nScope \nILTypeRef.FullName \nFullName \nILTypeRef.QualifiedName \nQualifiedName \nILTypeRef.BasicQualifiedName \nBasicQualifiedName \nILTypeRef.Enclosing \nEnclosing \nILTypeRef.Name \nName \nILTypeRef.Create \nCreate"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html#Scope","title":"ILTypeRef.Scope","content":"ILTypeRef.Scope \nScope \n\n Where is the type, i.e. is it in this module, in another module in this assembly or in another assembly?\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html#FullName","title":"ILTypeRef.FullName","content":"ILTypeRef.FullName \nFullName \n\n The name of the type in the assembly using the \u0027.\u0027 notation for nested types.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html#QualifiedName","title":"ILTypeRef.QualifiedName","content":"ILTypeRef.QualifiedName \nQualifiedName \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html#BasicQualifiedName","title":"ILTypeRef.BasicQualifiedName","content":"ILTypeRef.BasicQualifiedName \nBasicQualifiedName \n\n The name of the type in the assembly using the \u0027\u002B\u0027 notation for nested types.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html#Enclosing","title":"ILTypeRef.Enclosing","content":"ILTypeRef.Enclosing \nEnclosing \n\n The list of enclosing type names for a nested type. If non-nil then the first of these also contains the namespace.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html#Name","title":"ILTypeRef.Name","content":"ILTypeRef.Name \nName \n\n The name of the type. This also contains the namespace if Enclosing is empty.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltyperef.html#Create","title":"ILTypeRef.Create","content":"ILTypeRef.Create \nCreate \n\n Create a ILTypeRef.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html","title":"ILTypeSpec","content":"ILTypeSpec \n\n Type specs and types.\n \nILTypeSpec.Scope \nScope \nILTypeSpec.FullName \nFullName \nILTypeSpec.Enclosing \nEnclosing \nILTypeSpec.TypeRef \nTypeRef \nILTypeSpec.GenericArgs \nGenericArgs \nILTypeSpec.Name \nName \nILTypeSpec.Create \nCreate"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html#Scope","title":"ILTypeSpec.Scope","content":"ILTypeSpec.Scope \nScope \n\n Where is the type, i.e. is it in this module, in another module in this assembly or in another assembly?\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html#FullName","title":"ILTypeSpec.FullName","content":"ILTypeSpec.FullName \nFullName \n\n The name of the type in the assembly using the \u0027.\u0027 notation for nested types.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html#Enclosing","title":"ILTypeSpec.Enclosing","content":"ILTypeSpec.Enclosing \nEnclosing \n\n The list of enclosing type names for a nested type. If non-nil then the first of these also contains the namespace.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html#TypeRef","title":"ILTypeSpec.TypeRef","content":"ILTypeSpec.TypeRef \nTypeRef \n\n Which type is being referred to?\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html#GenericArgs","title":"ILTypeSpec.GenericArgs","content":"ILTypeSpec.GenericArgs \nGenericArgs \n\n The type instantiation if the type is generic, otherwise empty\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html#Name","title":"ILTypeSpec.Name","content":"ILTypeSpec.Name \nName \n\n The name of the type. This also contains the namespace if Enclosing is empty.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypespec.html#Create","title":"ILTypeSpec.Create","content":"ILTypeSpec.Create \nCreate \n\n Create an ILTypeSpec.\n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypes.html","title":"ILTypes","content":"ILTypes \n \nILTypes.Tail \nTail \nILTypes.Length \nLength \nILTypes.IsEmpty \nIsEmpty \nILTypes.Head \nHead \nILTypes.Item \nItem \nILTypes.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypes.html#Tail","title":"ILTypes.Tail","content":"ILTypes.Tail \nTail \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypes.html#Length","title":"ILTypes.Length","content":"ILTypes.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypes.html#IsEmpty","title":"ILTypes.IsEmpty","content":"ILTypes.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypes.html#Head","title":"ILTypes.Head","content":"ILTypes.Head \nHead \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypes.html#Item","title":"ILTypes.Item","content":"ILTypes.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-iltypes.html#Empty","title":"ILTypes.Empty","content":"ILTypes.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilversioninfo.html","title":"ILVersionInfo","content":"ILVersionInfo \n \nILVersionInfo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nILVersionInfo.Major \nMajor \nILVersionInfo.Minor \nMinor \nILVersionInfo.Build \nBuild \nILVersionInfo.Revision \nRevision"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#\u0060\u0060.ctor\u0060\u0060","title":"ILVersionInfo.\u0060\u0060.ctor\u0060\u0060","content":"ILVersionInfo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Major","title":"ILVersionInfo.Major","content":"ILVersionInfo.Major \nMajor \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Minor","title":"ILVersionInfo.Minor","content":"ILVersionInfo.Minor \nMinor \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Build","title":"ILVersionInfo.Build","content":"ILVersionInfo.Build \nBuild \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Revision","title":"ILVersionInfo.Revision","content":"ILVersionInfo.Revision \nRevision \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-methodbody.html","title":"MethodBody","content":"MethodBody \n \nMethodBody.IL \nIL \nMethodBody.PInvoke \nPInvoke \nMethodBody.Abstract \nAbstract \nMethodBody.Native \nNative \nMethodBody.NotAvailable \nNotAvailable"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-methodbody.html#IL","title":"MethodBody.IL","content":"MethodBody.IL \nIL \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-methodbody.html#PInvoke","title":"MethodBody.PInvoke","content":"MethodBody.PInvoke \nPInvoke \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-methodbody.html#Abstract","title":"MethodBody.Abstract","content":"MethodBody.Abstract \nAbstract \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-methodbody.html#Native","title":"MethodBody.Native","content":"MethodBody.Native \nNative \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-methodbody.html#NotAvailable","title":"MethodBody.NotAvailable","content":"MethodBody.NotAvailable \nNotAvailable \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html","title":"PublicKey","content":"PublicKey \n \nPublicKey.KeyToken \nKeyToken \nPublicKey.IsKey \nIsKey \nPublicKey.Key \nKey \nPublicKey.IsKeyToken \nIsKeyToken \nPublicKey.KeyAsToken \nKeyAsToken \nPublicKey.PublicKey \nPublicKey \nPublicKey.PublicKeyToken \nPublicKeyToken"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html#KeyToken","title":"PublicKey.KeyToken","content":"PublicKey.KeyToken \nKeyToken \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html#IsKey","title":"PublicKey.IsKey","content":"PublicKey.IsKey \nIsKey \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html#Key","title":"PublicKey.Key","content":"PublicKey.Key \nKey \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html#IsKeyToken","title":"PublicKey.IsKeyToken","content":"PublicKey.IsKeyToken \nIsKeyToken \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html#KeyAsToken","title":"PublicKey.KeyAsToken","content":"PublicKey.KeyAsToken \nKeyAsToken \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html#PublicKey","title":"PublicKey.PublicKey","content":"PublicKey.PublicKey \nPublicKey \n"},{"uri":"/fantomas/reference/fsharp-compiler-abstractil-il-publickey.html#PublicKeyToken","title":"PublicKey.PublicKeyToken","content":"PublicKey.PublicKeyToken \nPublicKeyToken \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html","title":"FSharpDiagnosticOptions","content":"FSharpDiagnosticOptions \n \nFSharpDiagnosticOptions.Default \nDefault \nFSharpDiagnosticOptions.WarnLevel \nWarnLevel \nFSharpDiagnosticOptions.GlobalWarnAsError \nGlobalWarnAsError \nFSharpDiagnosticOptions.WarnOff \nWarnOff \nFSharpDiagnosticOptions.WarnOn \nWarnOn \nFSharpDiagnosticOptions.WarnAsError \nWarnAsError \nFSharpDiagnosticOptions.WarnAsWarn \nWarnAsWarn"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#Default","title":"FSharpDiagnosticOptions.Default","content":"FSharpDiagnosticOptions.Default \nDefault \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnLevel","title":"FSharpDiagnosticOptions.WarnLevel","content":"FSharpDiagnosticOptions.WarnLevel \nWarnLevel \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#GlobalWarnAsError","title":"FSharpDiagnosticOptions.GlobalWarnAsError","content":"FSharpDiagnosticOptions.GlobalWarnAsError \nGlobalWarnAsError \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnOff","title":"FSharpDiagnosticOptions.WarnOff","content":"FSharpDiagnosticOptions.WarnOff \nWarnOff \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnOn","title":"FSharpDiagnosticOptions.WarnOn","content":"FSharpDiagnosticOptions.WarnOn \nWarnOn \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnAsError","title":"FSharpDiagnosticOptions.WarnAsError","content":"FSharpDiagnosticOptions.WarnAsError \nWarnAsError \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnAsWarn","title":"FSharpDiagnosticOptions.WarnAsWarn","content":"FSharpDiagnosticOptions.WarnAsWarn \nWarnAsWarn \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html","title":"FSharpDiagnosticSeverity","content":"FSharpDiagnosticSeverity \n \nFSharpDiagnosticSeverity.Hidden \nHidden \nFSharpDiagnosticSeverity.Info \nInfo \nFSharpDiagnosticSeverity.Warning \nWarning \nFSharpDiagnosticSeverity.Error \nError"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Hidden","title":"FSharpDiagnosticSeverity.Hidden","content":"FSharpDiagnosticSeverity.Hidden \nHidden \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Info","title":"FSharpDiagnosticSeverity.Info","content":"FSharpDiagnosticSeverity.Info \nInfo \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Warning","title":"FSharpDiagnosticSeverity.Warning","content":"FSharpDiagnosticSeverity.Warning \nWarning \n"},{"uri":"/fantomas/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Error","title":"FSharpDiagnosticSeverity.Error","content":"FSharpDiagnosticSeverity.Error \nError \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-filesystemautoopens.html","title":"FileSystemAutoOpens","content":"FileSystemAutoOpens \n \nFileSystemAutoOpens.FileSystem \nFileSystem"},{"uri":"/fantomas/reference/fsharp-compiler-io-filesystemautoopens.html#FileSystem","title":"FileSystemAutoOpens.FileSystem","content":"FileSystemAutoOpens.FileSystem \nFileSystem \n\n The global hook into the file system\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html","title":"StreamExtensions","content":"StreamExtensions \n \nStreamExtensions.GetWriter \nGetWriter \nStreamExtensions.WriteAllLines \nWriteAllLines \nStreamExtensions.Write \nWrite \nStreamExtensions.GetReader \nGetReader \nStreamExtensions.ReadBytes \nReadBytes \nStreamExtensions.ReadAllBytes \nReadAllBytes \nStreamExtensions.ReadAllText \nReadAllText \nStreamExtensions.ReadLines \nReadLines \nStreamExtensions.ReadAllLines \nReadAllLines \nStreamExtensions.WriteAllText \nWriteAllText \nStreamExtensions.AsByteMemory \nAsByteMemory"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#GetWriter","title":"StreamExtensions.GetWriter","content":"StreamExtensions.GetWriter \nGetWriter \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#WriteAllLines","title":"StreamExtensions.WriteAllLines","content":"StreamExtensions.WriteAllLines \nWriteAllLines \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#Write","title":"StreamExtensions.Write","content":"StreamExtensions.Write \nWrite \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#GetReader","title":"StreamExtensions.GetReader","content":"StreamExtensions.GetReader \nGetReader \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#ReadBytes","title":"StreamExtensions.ReadBytes","content":"StreamExtensions.ReadBytes \nReadBytes \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#ReadAllBytes","title":"StreamExtensions.ReadAllBytes","content":"StreamExtensions.ReadAllBytes \nReadAllBytes \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#ReadAllText","title":"StreamExtensions.ReadAllText","content":"StreamExtensions.ReadAllText \nReadAllText \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#ReadLines","title":"StreamExtensions.ReadLines","content":"StreamExtensions.ReadLines \nReadLines \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#ReadAllLines","title":"StreamExtensions.ReadAllLines","content":"StreamExtensions.ReadAllLines \nReadAllLines \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#WriteAllText","title":"StreamExtensions.WriteAllText","content":"StreamExtensions.WriteAllText \nWriteAllText \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-streamextensions.html#AsByteMemory","title":"StreamExtensions.AsByteMemory","content":"StreamExtensions.AsByteMemory \nAsByteMemory \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html","title":"ByteMemory","content":"ByteMemory \n\n A view over bytes.\n May be backed by managed or unmanaged memory, or memory mapped file.\n \nByteMemory.AsReadOnly \nAsReadOnly \nByteMemory.AsReadOnlyStream \nAsReadOnlyStream \nByteMemory.AsStream \nAsStream \nByteMemory.Copy \nCopy \nByteMemory.CopyTo \nCopyTo \nByteMemory.ReadAllBytes \nReadAllBytes \nByteMemory.ReadBytes \nReadBytes \nByteMemory.ReadInt32 \nReadInt32 \nByteMemory.ReadUInt16 \nReadUInt16 \nByteMemory.ReadUtf8String \nReadUtf8String \nByteMemory.Slice \nSlice \nByteMemory.ToArray \nToArray \nByteMemory.Length \nLength \nByteMemory.Item \nItem \nByteMemory.FromArray \nFromArray \nByteMemory.FromArray \nFromArray \nByteMemory.FromMemoryMappedFile \nFromMemoryMappedFile \nByteMemory.FromUnsafePointer \nFromUnsafePointer \nByteMemory.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#AsReadOnly","title":"ByteMemory.AsReadOnly","content":"ByteMemory.AsReadOnly \nAsReadOnly \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#AsReadOnlyStream","title":"ByteMemory.AsReadOnlyStream","content":"ByteMemory.AsReadOnlyStream \nAsReadOnlyStream \n\n Get a stream representation of the backing memory.\n Disposing this will not free up any of the backing memory.\n Stream cannot be written to.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#AsStream","title":"ByteMemory.AsStream","content":"ByteMemory.AsStream \nAsStream \n\n Get a stream representation of the backing memory.\n Disposing this will not free up any of the backing memory.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#Copy","title":"ByteMemory.Copy","content":"ByteMemory.Copy \nCopy \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#CopyTo","title":"ByteMemory.CopyTo","content":"ByteMemory.CopyTo \nCopyTo \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#ReadAllBytes","title":"ByteMemory.ReadAllBytes","content":"ByteMemory.ReadAllBytes \nReadAllBytes \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#ReadBytes","title":"ByteMemory.ReadBytes","content":"ByteMemory.ReadBytes \nReadBytes \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#ReadInt32","title":"ByteMemory.ReadInt32","content":"ByteMemory.ReadInt32 \nReadInt32 \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#ReadUInt16","title":"ByteMemory.ReadUInt16","content":"ByteMemory.ReadUInt16 \nReadUInt16 \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#ReadUtf8String","title":"ByteMemory.ReadUtf8String","content":"ByteMemory.ReadUtf8String \nReadUtf8String \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#Slice","title":"ByteMemory.Slice","content":"ByteMemory.Slice \nSlice \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#ToArray","title":"ByteMemory.ToArray","content":"ByteMemory.ToArray \nToArray \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#Length","title":"ByteMemory.Length","content":"ByteMemory.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#Item","title":"ByteMemory.Item","content":"ByteMemory.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#FromArray","title":"ByteMemory.FromArray","content":"ByteMemory.FromArray \nFromArray \n\n Creates a ByteMemory object that is backed by a byte array.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#FromArray","title":"ByteMemory.FromArray","content":"ByteMemory.FromArray \nFromArray \n\n Creates a ByteMemory object that is backed by a byte array with the specified offset and length.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#FromMemoryMappedFile","title":"ByteMemory.FromMemoryMappedFile","content":"ByteMemory.FromMemoryMappedFile \nFromMemoryMappedFile \n\n Create a ByteMemory object that has a backing memory mapped file.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#FromUnsafePointer","title":"ByteMemory.FromUnsafePointer","content":"ByteMemory.FromUnsafePointer \nFromUnsafePointer \n\n Creates a ByteMemory object that is backed by a raw pointer.\n Use with care.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-bytememory.html#Empty","title":"ByteMemory.Empty","content":"ByteMemory.Empty \nEmpty \n\n Empty byte memory.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultassemblyloader.html","title":"DefaultAssemblyLoader","content":"DefaultAssemblyLoader \n\n Default implementation for IAssemblyLoader\n \nDefaultAssemblyLoader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultassemblyloader.html#\u0060\u0060.ctor\u0060\u0060","title":"DefaultAssemblyLoader.\u0060\u0060.ctor\u0060\u0060","content":"DefaultAssemblyLoader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html","title":"DefaultFileSystem","content":"DefaultFileSystem \n\n Represents a default (memory-mapped) implementation of the file system\n \nDefaultFileSystem.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDefaultFileSystem.CopyShim \nCopyShim \nDefaultFileSystem.DirectoryCreateShim \nDirectoryCreateShim \nDefaultFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \nDefaultFileSystem.DirectoryExistsShim \nDirectoryExistsShim \nDefaultFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \nDefaultFileSystem.EnumerateFilesShim \nEnumerateFilesShim \nDefaultFileSystem.FileDeleteShim \nFileDeleteShim \nDefaultFileSystem.FileExistsShim \nFileExistsShim \nDefaultFileSystem.GetCreationTimeShim \nGetCreationTimeShim \nDefaultFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \nDefaultFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \nDefaultFileSystem.GetFullPathShim \nGetFullPathShim \nDefaultFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \nDefaultFileSystem.GetTempPathShim \nGetTempPathShim \nDefaultFileSystem.IsInvalidPathShim \nIsInvalidPathShim \nDefaultFileSystem.IsPathRootedShim \nIsPathRootedShim \nDefaultFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \nDefaultFileSystem.NormalizePathShim \nNormalizePathShim \nDefaultFileSystem.OpenFileForReadShim \nOpenFileForReadShim \nDefaultFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \nDefaultFileSystem.AssemblyLoader \nAssemblyLoader"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#\u0060\u0060.ctor\u0060\u0060","title":"DefaultFileSystem.\u0060\u0060.ctor\u0060\u0060","content":"DefaultFileSystem.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n\n Create a default implementation of the file system\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#CopyShim","title":"DefaultFileSystem.CopyShim","content":"DefaultFileSystem.CopyShim \nCopyShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryCreateShim","title":"DefaultFileSystem.DirectoryCreateShim","content":"DefaultFileSystem.DirectoryCreateShim \nDirectoryCreateShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryDeleteShim","title":"DefaultFileSystem.DirectoryDeleteShim","content":"DefaultFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryExistsShim","title":"DefaultFileSystem.DirectoryExistsShim","content":"DefaultFileSystem.DirectoryExistsShim \nDirectoryExistsShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#EnumerateDirectoriesShim","title":"DefaultFileSystem.EnumerateDirectoriesShim","content":"DefaultFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#EnumerateFilesShim","title":"DefaultFileSystem.EnumerateFilesShim","content":"DefaultFileSystem.EnumerateFilesShim \nEnumerateFilesShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#FileDeleteShim","title":"DefaultFileSystem.FileDeleteShim","content":"DefaultFileSystem.FileDeleteShim \nFileDeleteShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#FileExistsShim","title":"DefaultFileSystem.FileExistsShim","content":"DefaultFileSystem.FileExistsShim \nFileExistsShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#GetCreationTimeShim","title":"DefaultFileSystem.GetCreationTimeShim","content":"DefaultFileSystem.GetCreationTimeShim \nGetCreationTimeShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#GetDirectoryNameShim","title":"DefaultFileSystem.GetDirectoryNameShim","content":"DefaultFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#GetFullFilePathInDirectoryShim","title":"DefaultFileSystem.GetFullFilePathInDirectoryShim","content":"DefaultFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#GetFullPathShim","title":"DefaultFileSystem.GetFullPathShim","content":"DefaultFileSystem.GetFullPathShim \nGetFullPathShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#GetLastWriteTimeShim","title":"DefaultFileSystem.GetLastWriteTimeShim","content":"DefaultFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#GetTempPathShim","title":"DefaultFileSystem.GetTempPathShim","content":"DefaultFileSystem.GetTempPathShim \nGetTempPathShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#IsInvalidPathShim","title":"DefaultFileSystem.IsInvalidPathShim","content":"DefaultFileSystem.IsInvalidPathShim \nIsInvalidPathShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#IsPathRootedShim","title":"DefaultFileSystem.IsPathRootedShim","content":"DefaultFileSystem.IsPathRootedShim \nIsPathRootedShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#IsStableFileHeuristic","title":"DefaultFileSystem.IsStableFileHeuristic","content":"DefaultFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#NormalizePathShim","title":"DefaultFileSystem.NormalizePathShim","content":"DefaultFileSystem.NormalizePathShim \nNormalizePathShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#OpenFileForReadShim","title":"DefaultFileSystem.OpenFileForReadShim","content":"DefaultFileSystem.OpenFileForReadShim \nOpenFileForReadShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#OpenFileForWriteShim","title":"DefaultFileSystem.OpenFileForWriteShim","content":"DefaultFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-defaultfilesystem.html#AssemblyLoader","title":"DefaultFileSystem.AssemblyLoader","content":"DefaultFileSystem.AssemblyLoader \nAssemblyLoader \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-iassemblyloader.html","title":"IAssemblyLoader","content":"IAssemblyLoader \n\n Type which we use to load assemblies.\n \nIAssemblyLoader.AssemblyLoad \nAssemblyLoad \nIAssemblyLoader.AssemblyLoadFrom \nAssemblyLoadFrom"},{"uri":"/fantomas/reference/fsharp-compiler-io-iassemblyloader.html#AssemblyLoad","title":"IAssemblyLoader.AssemblyLoad","content":"IAssemblyLoader.AssemblyLoad \nAssemblyLoad \n\n Used to load a dependency for F# Interactive and in an unused corner-case of type provider loading\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-iassemblyloader.html#AssemblyLoadFrom","title":"IAssemblyLoader.AssemblyLoadFrom","content":"IAssemblyLoader.AssemblyLoadFrom \nAssemblyLoadFrom \n\n Used to load type providers and located assemblies in F# Interactive\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html","title":"IFileSystem","content":"IFileSystem \n\n Represents a shim for the file system\n \nIFileSystem.CopyShim \nCopyShim \nIFileSystem.DirectoryCreateShim \nDirectoryCreateShim \nIFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \nIFileSystem.DirectoryExistsShim \nDirectoryExistsShim \nIFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \nIFileSystem.EnumerateFilesShim \nEnumerateFilesShim \nIFileSystem.FileDeleteShim \nFileDeleteShim \nIFileSystem.FileExistsShim \nFileExistsShim \nIFileSystem.GetCreationTimeShim \nGetCreationTimeShim \nIFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \nIFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \nIFileSystem.GetFullPathShim \nGetFullPathShim \nIFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \nIFileSystem.GetTempPathShim \nGetTempPathShim \nIFileSystem.IsInvalidPathShim \nIsInvalidPathShim \nIFileSystem.IsPathRootedShim \nIsPathRootedShim \nIFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \nIFileSystem.NormalizePathShim \nNormalizePathShim \nIFileSystem.OpenFileForReadShim \nOpenFileForReadShim \nIFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \nIFileSystem.AssemblyLoader \nAssemblyLoader"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#CopyShim","title":"IFileSystem.CopyShim","content":"IFileSystem.CopyShim \nCopyShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#DirectoryCreateShim","title":"IFileSystem.DirectoryCreateShim","content":"IFileSystem.DirectoryCreateShim \nDirectoryCreateShim \n\n A shim over Directory.Exists, but returns a string, the FullName of the resulting\n DirectoryInfo.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#DirectoryDeleteShim","title":"IFileSystem.DirectoryDeleteShim","content":"IFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \n\n A shim over Directory.Delete\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#DirectoryExistsShim","title":"IFileSystem.DirectoryExistsShim","content":"IFileSystem.DirectoryExistsShim \nDirectoryExistsShim \n\n A shim over Directory.Exists\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#EnumerateDirectoriesShim","title":"IFileSystem.EnumerateDirectoriesShim","content":"IFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \n\n A shim over Directory.EnumerateDirectories\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#EnumerateFilesShim","title":"IFileSystem.EnumerateFilesShim","content":"IFileSystem.EnumerateFilesShim \nEnumerateFilesShim \n\n A shim over Directory.EnumerateFiles\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#FileDeleteShim","title":"IFileSystem.FileDeleteShim","content":"IFileSystem.FileDeleteShim \nFileDeleteShim \n\n A shim over File.Delete\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#FileExistsShim","title":"IFileSystem.FileExistsShim","content":"IFileSystem.FileExistsShim \nFileExistsShim \n\n A shim over File.Exists\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#GetCreationTimeShim","title":"IFileSystem.GetCreationTimeShim","content":"IFileSystem.GetCreationTimeShim \nGetCreationTimeShim \n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#GetDirectoryNameShim","title":"IFileSystem.GetDirectoryNameShim","content":"IFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \n\n A shim for getting directory name from path\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#GetFullFilePathInDirectoryShim","title":"IFileSystem.GetFullFilePathInDirectoryShim","content":"IFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \n\n Take in a directory, filename, and return canonicalized path to the file name in directory.\n If file name path is rooted, ignores directory and returns file name path.\n Otherwise, combines directory with file name and gets full path via GetFullPathShim(string).\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#GetFullPathShim","title":"IFileSystem.GetFullPathShim","content":"IFileSystem.GetFullPathShim \nGetFullPathShim \n\n Take in a file name with an absolute path, and return the same file name\n but canonicalized with respect to extra path separators (e.g. C:\\\\\\\\foo.txt)\n and \u0027..\u0027 portions\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#GetLastWriteTimeShim","title":"IFileSystem.GetLastWriteTimeShim","content":"IFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \n\n Utc time of the last modification\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#GetTempPathShim","title":"IFileSystem.GetTempPathShim","content":"IFileSystem.GetTempPathShim \nGetTempPathShim \n\n A shim over Path.GetTempPath\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#IsInvalidPathShim","title":"IFileSystem.IsInvalidPathShim","content":"IFileSystem.IsInvalidPathShim \nIsInvalidPathShim \n\n A shim over Path.IsInvalidPath\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#IsPathRootedShim","title":"IFileSystem.IsPathRootedShim","content":"IFileSystem.IsPathRootedShim \nIsPathRootedShim \n\n A shim over Path.IsPathRooted\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#IsStableFileHeuristic","title":"IFileSystem.IsStableFileHeuristic","content":"IFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \n\n Used to determine if a file will not be subject to deletion during the lifetime of a typical client process.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#NormalizePathShim","title":"IFileSystem.NormalizePathShim","content":"IFileSystem.NormalizePathShim \nNormalizePathShim \n\n Removes relative parts from any full paths\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#OpenFileForReadShim","title":"IFileSystem.OpenFileForReadShim","content":"IFileSystem.OpenFileForReadShim \nOpenFileForReadShim \n\n Open the file for read, returns ByteMemory, uses either FileStream (for smaller files) or MemoryMappedFile (for potentially big files, such as dlls).\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#OpenFileForWriteShim","title":"IFileSystem.OpenFileForWriteShim","content":"IFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \n\n Open the file for writing. Returns a Stream.\n"},{"uri":"/fantomas/reference/fsharp-compiler-io-ifilesystem.html#AssemblyLoader","title":"IFileSystem.AssemblyLoader","content":"IFileSystem.AssemblyLoader \nAssemblyLoader \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html","title":"PrettyNaming","content":"PrettyNaming \n\n Some general F# utilities for mangling / unmangling / manipulating names.\n Anything to do with special names of identifiers and other lexical rules\n \nPrettyNaming.IsOperatorDisplayName \nIsOperatorDisplayName \nPrettyNaming.IsIdentifierName \nIsIdentifierName \nPrettyNaming.IsActivePatternName \nIsActivePatternName \nPrettyNaming.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \nPrettyNaming.AddBackticksToIdentifierIfNeeded \nAddBackticksToIdentifierIfNeeded \nPrettyNaming.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \nPrettyNaming.IsMangledOpName \nIsMangledOpName \nPrettyNaming.CompileOpName \nCompileOpName \nPrettyNaming.DecompileOpName \nDecompileOpName \nPrettyNaming.IsIdentifierFirstCharacter \nIsIdentifierFirstCharacter \nPrettyNaming.IsIdentifierPartCharacter \nIsIdentifierPartCharacter \nPrettyNaming.IsLongIdentifierPartCharacter \nIsLongIdentifierPartCharacter \nPrettyNaming.IsPrefixOperator \nIsPrefixOperator \nPrettyNaming.IsPunctuation \nIsPunctuation \nPrettyNaming.IsTernaryOperator \nIsTernaryOperator \nPrettyNaming.IsMangledInfixOperator \nIsMangledInfixOperator \nPrettyNaming.IsCompilerGeneratedName \nIsCompilerGeneratedName \nPrettyNaming.TryChopPropertyName \nTryChopPropertyName \nPrettyNaming.FsiDynamicModulePrefix \nFsiDynamicModulePrefix \nPrettyNaming.GetLongNameFromString \nGetLongNameFromString \nPrettyNaming.FormatAndOtherOverloadsString \nFormatAndOtherOverloadsString \nPrettyNaming.FSharpSignatureDataResourceName2 \nFSharpSignatureDataResourceName2"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsOperatorDisplayName","title":"PrettyNaming.IsOperatorDisplayName","content":"PrettyNaming.IsOperatorDisplayName \nIsOperatorDisplayName \n\n Returns \u0060true\u0060 if given string is an operator display name, e.g.\n    ( |\u003E\u003E )\n    |\u003E\u003E\n    ..\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierName","title":"PrettyNaming.IsIdentifierName","content":"PrettyNaming.IsIdentifierName \nIsIdentifierName \n\n Is the name a valid F# identifier\n     A            --\u003E true\n     A\u0027           --\u003E true\n     _A           --\u003E true\n     A0           --\u003E true\n     |A|B|        --\u003E false\n     op_Addition  --\u003E true\n     \u002B            --\u003E false\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsActivePatternName","title":"PrettyNaming.IsActivePatternName","content":"PrettyNaming.IsActivePatternName \nIsActivePatternName \n\n Determines if the specified name is a valid name for an active pattern.\n     |A|_|        --\u003E true\n     |A|B|        --\u003E true\n     |A|          --\u003E true\n     |            --\u003E false\n     ||           --\u003E false\n     op_Addition  --\u003E false\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#DoesIdentifierNeedBackticks","title":"PrettyNaming.DoesIdentifierNeedBackticks","content":"PrettyNaming.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \n\n Returns \u0060true\u0060 if given string requires double backticks to be a valid identifier, e.g.\n     \u002B     true, e.g. \u0060\u0060\u002B\u0060\u0060    (this is not op_Addition)\n     |\u003E\u003E   true, e.g. \u0060\u0060|\u003E\u003E\u0060\u0060  (this is not op_Addition)\n     A-B   true, e.g. \u0060\u0060A-B\u0060\u0060\n     AB    false, e.g. AB\n     |A|_| false   // this is an active pattern name, needs parens not backticks\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#AddBackticksToIdentifierIfNeeded","title":"PrettyNaming.AddBackticksToIdentifierIfNeeded","content":"PrettyNaming.AddBackticksToIdentifierIfNeeded \nAddBackticksToIdentifierIfNeeded \n\n Adds double backticks if necessary to make a valid identifier, e.g.\n     op_Addition  --\u003E  op_Addition\n     \u002B            --\u003E  \u0060\u0060\u002B\u0060\u0060    (this is not op_Addition)\n     |\u003E\u003E          --\u003E  \u0060\u0060|\u003E\u003E\u0060\u0060  (this is not an op_)\n     A-B          --\u003E  \u0060\u0060A-B\u0060\u0060\n     AB           --\u003E  AB\n     |A|_|        --\u003E  |A|_|    this is an active pattern name, needs parens not backticks\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#NormalizeIdentifierBackticks","title":"PrettyNaming.NormalizeIdentifierBackticks","content":"PrettyNaming.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \n\n Removes double backticks if not necessary to make a valid identifier, e.g.\n     \u0060\u0060A\u0060\u0060        --\u003E A\n     \u0060\u0060A-B\u0060\u0060      --\u003E \u0060\u0060A-B\u0060\u0060\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsMangledOpName","title":"PrettyNaming.IsMangledOpName","content":"PrettyNaming.IsMangledOpName \nIsMangledOpName \n\n Is the name a mangled operator name (approximate)\n    op_Addition - yes\n    op_Quack - yes\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#CompileOpName","title":"PrettyNaming.CompileOpName","content":"PrettyNaming.CompileOpName \nCompileOpName \n\n Compiles an operator into a mangled operator name. For example,\n    \u002B  --\u003E op_Addition\n    !%  --\u003E op_DereferencePercent\n Only used on actual operator names\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#DecompileOpName","title":"PrettyNaming.DecompileOpName","content":"PrettyNaming.DecompileOpName \nDecompileOpName \n\n Decompiles a potentially-mangled operator name back into a display name. For example:\n     Foo                   --\u003E Foo\n     \u002B                     --\u003E \u002B\n     op_Addition           --\u003E \u002B\n     op_DereferencePercent --\u003E !%\n     A-B                   --\u003E A-B\n     |A|_|                 --\u003E |A|_|\n Used on names of all kinds\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierFirstCharacter","title":"PrettyNaming.IsIdentifierFirstCharacter","content":"PrettyNaming.IsIdentifierFirstCharacter \nIsIdentifierFirstCharacter \n\n The characters that are allowed to be the first character of an identifier.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierPartCharacter","title":"PrettyNaming.IsIdentifierPartCharacter","content":"PrettyNaming.IsIdentifierPartCharacter \nIsIdentifierPartCharacter \n\n The characters that are allowed to be in an identifier.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsLongIdentifierPartCharacter","title":"PrettyNaming.IsLongIdentifierPartCharacter","content":"PrettyNaming.IsLongIdentifierPartCharacter \nIsLongIdentifierPartCharacter \n\n Is this character a part of a long identifier?\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsPrefixOperator","title":"PrettyNaming.IsPrefixOperator","content":"PrettyNaming.IsPrefixOperator \nIsPrefixOperator \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsPunctuation","title":"PrettyNaming.IsPunctuation","content":"PrettyNaming.IsPunctuation \nIsPunctuation \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsTernaryOperator","title":"PrettyNaming.IsTernaryOperator","content":"PrettyNaming.IsTernaryOperator \nIsTernaryOperator \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsMangledInfixOperator","title":"PrettyNaming.IsMangledInfixOperator","content":"PrettyNaming.IsMangledInfixOperator \nIsMangledInfixOperator \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#IsCompilerGeneratedName","title":"PrettyNaming.IsCompilerGeneratedName","content":"PrettyNaming.IsCompilerGeneratedName \nIsCompilerGeneratedName \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#TryChopPropertyName","title":"PrettyNaming.TryChopPropertyName","content":"PrettyNaming.TryChopPropertyName \nTryChopPropertyName \n\n Try to chop \u0022get_\u0022 or \u0022set_\u0022 from a string\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#FsiDynamicModulePrefix","title":"PrettyNaming.FsiDynamicModulePrefix","content":"PrettyNaming.FsiDynamicModulePrefix \nFsiDynamicModulePrefix \n\n The prefix of the names used for the fake namespace path added to all dynamic code entries in FSI.EXE\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#GetLongNameFromString","title":"PrettyNaming.GetLongNameFromString","content":"PrettyNaming.GetLongNameFromString \nGetLongNameFromString \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#FormatAndOtherOverloadsString","title":"PrettyNaming.FormatAndOtherOverloadsString","content":"PrettyNaming.FormatAndOtherOverloadsString \nFormatAndOtherOverloadsString \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-prettynaming.html#FSharpSignatureDataResourceName2","title":"PrettyNaming.FSharpSignatureDataResourceName2","content":"PrettyNaming.FSharpSignatureDataResourceName2 \nFSharpSignatureDataResourceName2 \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongidenthelpers.html","title":"SynLongIdentHelpers","content":"SynLongIdentHelpers \n \nSynLongIdentHelpers.LongIdentWithDots \nLongIdentWithDots \nSynLongIdentHelpers.(|LongIdentWithDots|) \n(|LongIdentWithDots|)"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongidenthelpers.html#LongIdentWithDots","title":"SynLongIdentHelpers.LongIdentWithDots","content":"SynLongIdentHelpers.LongIdentWithDots \nLongIdentWithDots \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongidenthelpers.html#(|LongIdentWithDots|)","title":"SynLongIdentHelpers.(|LongIdentWithDots|)","content":"SynLongIdentHelpers.(|LongIdentWithDots|) \n(|LongIdentWithDots|) \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-blockseparator.html","title":"BlockSeparator","content":"BlockSeparator \n\n Represents the location of the separator block \u002B optional position\n of the semicolon (used for tooling support)\n \nBlockSeparator.Item1 \nItem1 \nBlockSeparator.Item2 \nItem2"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-blockseparator.html#Item1","title":"BlockSeparator.Item1","content":"BlockSeparator.Item1 \nItem1 \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-blockseparator.html#Item2","title":"BlockSeparator.Item2","content":"BlockSeparator.Item2 \nItem2 \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatbinding.html","title":"DebugPointAtBinding","content":"DebugPointAtBinding \n\n Represents whether a debug point should be present for a \u0027let\u0027 binding,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtBinding.Combine \nCombine \nDebugPointAtBinding.Yes \nYes \nDebugPointAtBinding.NoneAtDo \nNoneAtDo \nDebugPointAtBinding.NoneAtLet \nNoneAtLet \nDebugPointAtBinding.NoneAtSticky \nNoneAtSticky \nDebugPointAtBinding.NoneAtInvisible \nNoneAtInvisible"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatbinding.html#Combine","title":"DebugPointAtBinding.Combine","content":"DebugPointAtBinding.Combine \nCombine \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatbinding.html#Yes","title":"DebugPointAtBinding.Yes","content":"DebugPointAtBinding.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtDo","title":"DebugPointAtBinding.NoneAtDo","content":"DebugPointAtBinding.NoneAtDo \nNoneAtDo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtLet","title":"DebugPointAtBinding.NoneAtLet","content":"DebugPointAtBinding.NoneAtLet \nNoneAtLet \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtSticky","title":"DebugPointAtBinding.NoneAtSticky","content":"DebugPointAtBinding.NoneAtSticky \nNoneAtSticky \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtInvisible","title":"DebugPointAtBinding.NoneAtInvisible","content":"DebugPointAtBinding.NoneAtInvisible \nNoneAtInvisible \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatfinally.html","title":"DebugPointAtFinally","content":"DebugPointAtFinally \n\n Represents whether a debug point should be present for the \u0027finally\u0027 in a \u0027try .. finally\u0027,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtFinally.Yes \nYes \nDebugPointAtFinally.No \nNo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatfinally.html#Yes","title":"DebugPointAtFinally.Yes","content":"DebugPointAtFinally.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatfinally.html#No","title":"DebugPointAtFinally.No","content":"DebugPointAtFinally.No \nNo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatfor.html","title":"DebugPointAtFor","content":"DebugPointAtFor \n\n Represents whether a debug point should be present for the \u0027for\u0027 in a \u0027for...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtFor.Yes \nYes \nDebugPointAtFor.No \nNo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatfor.html#Yes","title":"DebugPointAtFor.Yes","content":"DebugPointAtFor.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatfor.html#No","title":"DebugPointAtFor.No","content":"DebugPointAtFor.No \nNo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatinorto.html","title":"DebugPointAtInOrTo","content":"DebugPointAtInOrTo \n\n Represents whether a debug point should be present for the \u0027in\u0027 or \u0027to\u0027 of a \u0027for...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtInOrTo.Yes \nYes \nDebugPointAtInOrTo.No \nNo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatinorto.html#Yes","title":"DebugPointAtInOrTo.Yes","content":"DebugPointAtInOrTo.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatinorto.html#No","title":"DebugPointAtInOrTo.No","content":"DebugPointAtInOrTo.No \nNo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatleafexpr.html","title":"DebugPointAtLeafExpr","content":"DebugPointAtLeafExpr \n\n Represents a debug point at a leaf expression (e.g. an application or constant).\n \nDebugPointAtLeafExpr.Yes \nYes"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatleafexpr.html#Yes","title":"DebugPointAtLeafExpr.Yes","content":"DebugPointAtLeafExpr.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatsequential.html","title":"DebugPointAtSequential","content":"DebugPointAtSequential \n\n Represents whether a debug point should be suppressed for either the\n first or second part of a sequential execution, that is whether the\n construct corresponds to a debug point in the original source.\n \nDebugPointAtSequential.SuppressNeither \nSuppressNeither \nDebugPointAtSequential.SuppressStmt \nSuppressStmt \nDebugPointAtSequential.SuppressBoth \nSuppressBoth \nDebugPointAtSequential.SuppressExpr \nSuppressExpr"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressNeither","title":"DebugPointAtSequential.SuppressNeither","content":"DebugPointAtSequential.SuppressNeither \nSuppressNeither \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressStmt","title":"DebugPointAtSequential.SuppressStmt","content":"DebugPointAtSequential.SuppressStmt \nSuppressStmt \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressBoth","title":"DebugPointAtSequential.SuppressBoth","content":"DebugPointAtSequential.SuppressBoth \nSuppressBoth \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressExpr","title":"DebugPointAtSequential.SuppressExpr","content":"DebugPointAtSequential.SuppressExpr \nSuppressExpr \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointattarget.html","title":"DebugPointAtTarget","content":"DebugPointAtTarget \n\n Represents whether a debug point should be present for the target\n of a decision tree, that is whether the construct corresponds to a debug\n point in the original source.\n \nDebugPointAtTarget.Yes \nYes \nDebugPointAtTarget.No \nNo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointattarget.html#Yes","title":"DebugPointAtTarget.Yes","content":"DebugPointAtTarget.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointattarget.html#No","title":"DebugPointAtTarget.No","content":"DebugPointAtTarget.No \nNo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointattry.html","title":"DebugPointAtTry","content":"DebugPointAtTry \n\n Represents whether a debug point should be present for a \u0027try\u0027, that is whether\n the construct corresponds to a debug point in the original source.\n \nDebugPointAtTry.Yes \nYes \nDebugPointAtTry.No \nNo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointattry.html#Yes","title":"DebugPointAtTry.Yes","content":"DebugPointAtTry.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointattry.html#No","title":"DebugPointAtTry.No","content":"DebugPointAtTry.No \nNo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatwhile.html","title":"DebugPointAtWhile","content":"DebugPointAtWhile \n\n Represents whether a debug point should be present for the \u0027while\u0027 in a \u0027while...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtWhile.Yes \nYes \nDebugPointAtWhile.No \nNo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatwhile.html#Yes","title":"DebugPointAtWhile.Yes","content":"DebugPointAtWhile.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatwhile.html#No","title":"DebugPointAtWhile.No","content":"DebugPointAtWhile.No \nNo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatwith.html","title":"DebugPointAtWith","content":"DebugPointAtWith \n\n Represents whether a debug point should be present for the \u0027with\u0027 in a \u0027try .. with\u0027,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtWith.Yes \nYes \nDebugPointAtWith.No \nNo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatwith.html#Yes","title":"DebugPointAtWith.Yes","content":"DebugPointAtWith.Yes \nYes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-debugpointatwith.html#No","title":"DebugPointAtWith.No","content":"DebugPointAtWith.No \nNo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-expratomicflag.html","title":"ExprAtomicFlag","content":"ExprAtomicFlag \n\n Indicates if an expression is an atomic expression.\n\n An atomic expression has no whitespace unless enclosed in parentheses, e.g.\n 1, \u00223\u0022, ident, ident.[expr] and (expr). If an atomic expression has type T,\n then the largest expression ending at the same range as the atomic expression\n also has type T.\n \nExprAtomicFlag.Atomic \nAtomic \nExprAtomicFlag.NonAtomic \nNonAtomic"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-expratomicflag.html#Atomic","title":"ExprAtomicFlag.Atomic","content":"ExprAtomicFlag.Atomic \nAtomic \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-expratomicflag.html#NonAtomic","title":"ExprAtomicFlag.NonAtomic","content":"ExprAtomicFlag.NonAtomic \nNonAtomic \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-ident.html","title":"Ident","content":"Ident \n\n Represents an identifier in F# code\n \nIdent.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIdent.idRange \nidRange \nIdent.idText \nidText"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-ident.html#\u0060\u0060.ctor\u0060\u0060","title":"Ident.\u0060\u0060.ctor\u0060\u0060","content":"Ident.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-ident.html#idRange","title":"Ident.idRange","content":"Ident.idRange \nidRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-ident.html#idText","title":"Ident.idText","content":"Ident.idText \nidText \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-longident.html","title":"LongIdent","content":"LongIdent \n\n Represents a long identifier e.g. \u0027A.B.C\u0027\n \nLongIdent.Tail \nTail \nLongIdent.Length \nLength \nLongIdent.IsEmpty \nIsEmpty \nLongIdent.Head \nHead \nLongIdent.Item \nItem \nLongIdent.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-longident.html#Tail","title":"LongIdent.Tail","content":"LongIdent.Tail \nTail \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-longident.html#Length","title":"LongIdent.Length","content":"LongIdent.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-longident.html#IsEmpty","title":"LongIdent.IsEmpty","content":"LongIdent.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-longident.html#Head","title":"LongIdent.Head","content":"LongIdent.Head \nHead \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-longident.html#Item","title":"LongIdent.Item","content":"LongIdent.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-longident.html#Empty","title":"LongIdent.Empty","content":"LongIdent.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedhashdirective.html","title":"ParsedHashDirective","content":"ParsedHashDirective \n\n Represents a parsed hash directive\n \nParsedHashDirective.ParsedHashDirective \nParsedHashDirective"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedhashdirective.html#ParsedHashDirective","title":"ParsedHashDirective.ParsedHashDirective","content":"ParsedHashDirective.ParsedHashDirective \nParsedHashDirective \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html","title":"ParsedHashDirectiveArgument","content":"ParsedHashDirectiveArgument \n\n Represents a parsed hash directive argument\n \nParsedHashDirectiveArgument.Range \nRange \nParsedHashDirectiveArgument.String \nString \nParsedHashDirectiveArgument.SourceIdentifier \nSourceIdentifier"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#Range","title":"ParsedHashDirectiveArgument.Range","content":"ParsedHashDirectiveArgument.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#String","title":"ParsedHashDirectiveArgument.String","content":"ParsedHashDirectiveArgument.String \nString \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#SourceIdentifier","title":"ParsedHashDirectiveArgument.SourceIdentifier","content":"ParsedHashDirectiveArgument.SourceIdentifier \nSourceIdentifier \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfile.html","title":"ParsedImplFile","content":"ParsedImplFile \n\n Represents a parsed implementation file made up of fragments\n \nParsedImplFile.ParsedImplFile \nParsedImplFile"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfile.html#ParsedImplFile","title":"ParsedImplFile.ParsedImplFile","content":"ParsedImplFile.ParsedImplFile \nParsedImplFile \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfilefragment.html","title":"ParsedImplFileFragment","content":"ParsedImplFileFragment \n\n Represents the syntax tree for the contents of a parsed implementation file\n \nParsedImplFileFragment.AnonModule \nAnonModule \nParsedImplFileFragment.NamedModule \nNamedModule \nParsedImplFileFragment.NamespaceFragment \nNamespaceFragment"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#AnonModule","title":"ParsedImplFileFragment.AnonModule","content":"ParsedImplFileFragment.AnonModule \nAnonModule \n\n An implementation file which is an anonymous module definition, e.g. a script\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#NamedModule","title":"ParsedImplFileFragment.NamedModule","content":"ParsedImplFileFragment.NamedModule \nNamedModule \n\n An implementation file is a named module definition, \u0027module N\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#NamespaceFragment","title":"ParsedImplFileFragment.NamespaceFragment","content":"ParsedImplFileFragment.NamespaceFragment \nNamespaceFragment \n\n An implementation file fragment which declares a namespace fragment\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfileinput.html","title":"ParsedImplFileInput","content":"ParsedImplFileInput \n\n Represents the full syntax tree, file name and other parsing information for an implementation file\n \nParsedImplFileInput.ParsedImplFileInput \nParsedImplFileInput"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedimplfileinput.html#ParsedImplFileInput","title":"ParsedImplFileInput.ParsedImplFileInput","content":"ParsedImplFileInput.ParsedImplFileInput \nParsedImplFileInput \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedinput.html","title":"ParsedInput","content":"ParsedInput \n\n Represents the syntax tree for a parsed implementation or signature file\n \nParsedInput.Range \nRange \nParsedInput.FileName \nFileName \nParsedInput.ImplFile \nImplFile \nParsedInput.SigFile \nSigFile"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedinput.html#Range","title":"ParsedInput.Range","content":"ParsedInput.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedinput.html#FileName","title":"ParsedInput.FileName","content":"ParsedInput.FileName \nFileName \n\n Gets the file name for the parsed input\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedinput.html#ImplFile","title":"ParsedInput.ImplFile","content":"ParsedInput.ImplFile \nImplFile \n\n A parsed implementation file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedinput.html#SigFile","title":"ParsedInput.SigFile","content":"ParsedInput.SigFile \nSigFile \n\n A parsed signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedscriptinteraction.html","title":"ParsedScriptInteraction","content":"ParsedScriptInteraction \n\n Represents a parsed syntax tree for an F# Interactive interaction\n \nParsedScriptInteraction.Definitions \nDefinitions \nParsedScriptInteraction.HashDirective \nHashDirective"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedscriptinteraction.html#Definitions","title":"ParsedScriptInteraction.Definitions","content":"ParsedScriptInteraction.Definitions \nDefinitions \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedscriptinteraction.html#HashDirective","title":"ParsedScriptInteraction.HashDirective","content":"ParsedScriptInteraction.HashDirective \nHashDirective \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfile.html","title":"ParsedSigFile","content":"ParsedSigFile \n\n Represents a parsed signature file made up of fragments\n \nParsedSigFile.ParsedSigFile \nParsedSigFile"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfile.html#ParsedSigFile","title":"ParsedSigFile.ParsedSigFile","content":"ParsedSigFile.ParsedSigFile \nParsedSigFile \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfilefragment.html","title":"ParsedSigFileFragment","content":"ParsedSigFileFragment \n\n Represents the syntax tree for the contents of a parsed signature file\n \nParsedSigFileFragment.AnonModule \nAnonModule \nParsedSigFileFragment.NamedModule \nNamedModule \nParsedSigFileFragment.NamespaceFragment \nNamespaceFragment"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#AnonModule","title":"ParsedSigFileFragment.AnonModule","content":"ParsedSigFileFragment.AnonModule \nAnonModule \n\n A signature file which is an anonymous module, e.g. the signature file for the final file in an application\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#NamedModule","title":"ParsedSigFileFragment.NamedModule","content":"ParsedSigFileFragment.NamedModule \nNamedModule \n\n A signature file which is a module, \u0027module N\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#NamespaceFragment","title":"ParsedSigFileFragment.NamespaceFragment","content":"ParsedSigFileFragment.NamespaceFragment \nNamespaceFragment \n\n A signature file namespace fragment\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfileinput.html","title":"ParsedSigFileInput","content":"ParsedSigFileInput \n\n Represents the full syntax tree, file name and other parsing information for a signature file\n \nParsedSigFileInput.ParsedSigFileInput \nParsedSigFileInput"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parsedsigfileinput.html#ParsedSigFileInput","title":"ParsedSigFileInput.ParsedSigFileInput","content":"ParsedSigFileInput.ParsedSigFileInput \nParsedSigFileInput \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parserdetail.html","title":"ParserDetail","content":"ParserDetail \n\n Indicates if the construct arises from error recovery\n \nParserDetail.Ok \nOk \nParserDetail.ErrorRecovery \nErrorRecovery"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parserdetail.html#Ok","title":"ParserDetail.Ok","content":"ParserDetail.Ok \nOk \n\n The construct arises normally\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-parserdetail.html#ErrorRecovery","title":"ParserDetail.ErrorRecovery","content":"ParserDetail.ErrorRecovery \nErrorRecovery \n\n The construct arises from error recovery\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-qualifiednameoffile.html","title":"QualifiedNameOfFile","content":"QualifiedNameOfFile \n\n Represents a qualifying name for anonymous module specifications and implementations,\n \nQualifiedNameOfFile.Text \nText \nQualifiedNameOfFile.Range \nRange \nQualifiedNameOfFile.Id \nId \nQualifiedNameOfFile.QualifiedNameOfFile \nQualifiedNameOfFile"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Text","title":"QualifiedNameOfFile.Text","content":"QualifiedNameOfFile.Text \nText \n\n The name of the file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Range","title":"QualifiedNameOfFile.Range","content":"QualifiedNameOfFile.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Id","title":"QualifiedNameOfFile.Id","content":"QualifiedNameOfFile.Id \nId \n\n The identifier for the name of the file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-qualifiednameoffile.html#QualifiedNameOfFile","title":"QualifiedNameOfFile.QualifiedNameOfFile","content":"QualifiedNameOfFile.QualifiedNameOfFile \nQualifiedNameOfFile \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-recordfieldname.html","title":"RecordFieldName","content":"RecordFieldName \n\n Represents a record field name plus a flag indicating if given record field name is syntactically\n correct and can be used in name resolution.\n \nRecordFieldName.Item1 \nItem1 \nRecordFieldName.Item2 \nItem2"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-recordfieldname.html#Item1","title":"RecordFieldName.Item1","content":"RecordFieldName.Item1 \nItem1 \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-recordfieldname.html#Item2","title":"RecordFieldName.Item2","content":"RecordFieldName.Item2 \nItem2 \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-scopedpragma.html","title":"ScopedPragma","content":"ScopedPragma \n\n Represents a scoped pragma\n \nScopedPragma.WarningOff \nWarningOff"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-scopedpragma.html#WarningOff","title":"ScopedPragma.WarningOff","content":"ScopedPragma.WarningOff \nWarningOff \n\n A pragma to turn a warning off\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-seqexpronly.html","title":"SeqExprOnly","content":"SeqExprOnly \n\n Indicates if a for loop is \u0027for x in e1 -\u003E e2\u0027, only valid in sequence expressions\n \nSeqExprOnly.SeqExprOnly \nSeqExprOnly"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-seqexpronly.html#SeqExprOnly","title":"SeqExprOnly.SeqExprOnly","content":"SeqExprOnly.SeqExprOnly \nSeqExprOnly \n\n Indicates if a for loop is \u0027for x in e1 -\u003E e2\u0027, only valid in sequence expressions\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synaccess.html","title":"SynAccess","content":"SynAccess \n\n Represents an accessibility modifier in F# syntax\n \nSynAccess.Range \nRange \nSynAccess.Public \nPublic \nSynAccess.Internal \nInternal \nSynAccess.Private \nPrivate"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synaccess.html#Range","title":"SynAccess.Range","content":"SynAccess.Range \nRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synaccess.html#Public","title":"SynAccess.Public","content":"SynAccess.Public \nPublic \n\n A construct marked or assumed \u0027public\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synaccess.html#Internal","title":"SynAccess.Internal","content":"SynAccess.Internal \nInternal \n\n A construct marked or assumed \u0027internal\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synaccess.html#Private","title":"SynAccess.Private","content":"SynAccess.Private \nPrivate \n\n A construct marked or assumed \u0027private\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synarginfo.html","title":"SynArgInfo","content":"SynArgInfo \n\n Represents the argument names and other metadata for a parameter for a member or function\n \nSynArgInfo.Ident \nIdent \nSynArgInfo.Attributes \nAttributes \nSynArgInfo.SynArgInfo \nSynArgInfo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synarginfo.html#Ident","title":"SynArgInfo.Ident","content":"SynArgInfo.Ident \nIdent \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synarginfo.html#Attributes","title":"SynArgInfo.Attributes","content":"SynArgInfo.Attributes \nAttributes \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synarginfo.html#SynArgInfo","title":"SynArgInfo.SynArgInfo","content":"SynArgInfo.SynArgInfo \nSynArgInfo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synargpats.html","title":"SynArgPats","content":"SynArgPats \n\n Represents a syntax tree for arguments patterns\n \nSynArgPats.Patterns \nPatterns \nSynArgPats.Pats \nPats \nSynArgPats.NamePatPairs \nNamePatPairs"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synargpats.html#Patterns","title":"SynArgPats.Patterns","content":"SynArgPats.Patterns \nPatterns \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synargpats.html#Pats","title":"SynArgPats.Pats","content":"SynArgPats.Pats \nPats \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synargpats.html#NamePatPairs","title":"SynArgPats.NamePatPairs","content":"SynArgPats.NamePatPairs \nNamePatPairs \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattribute.html","title":"SynAttribute","content":"SynAttribute \n\n Represents an attribute\n \nSynAttribute.TypeName \nTypeName \nSynAttribute.ArgExpr \nArgExpr \nSynAttribute.Target \nTarget \nSynAttribute.AppliesToGetterAndSetter \nAppliesToGetterAndSetter \nSynAttribute.Range \nRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattribute.html#TypeName","title":"SynAttribute.TypeName","content":"SynAttribute.TypeName \nTypeName \n\n The name of the type for the attribute\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattribute.html#ArgExpr","title":"SynAttribute.ArgExpr","content":"SynAttribute.ArgExpr \nArgExpr \n\n The argument of the attribute, perhaps a tuple\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattribute.html#Target","title":"SynAttribute.Target","content":"SynAttribute.Target \nTarget \n\n Target specifier, e.g. \u0022assembly\u0022, \u0022module\u0022, etc.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattribute.html#AppliesToGetterAndSetter","title":"SynAttribute.AppliesToGetterAndSetter","content":"SynAttribute.AppliesToGetterAndSetter \nAppliesToGetterAndSetter \n\n Is this attribute being applied to a property getter or setter?\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattribute.html#Range","title":"SynAttribute.Range","content":"SynAttribute.Range \nRange \n\n The syntax range of the attribute\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributelist.html","title":"SynAttributeList","content":"SynAttributeList \n\n List of attributes enclosed in [\u003C ... \u003E].\n \nSynAttributeList.Attributes \nAttributes \nSynAttributeList.Range \nRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributelist.html#Attributes","title":"SynAttributeList.Attributes","content":"SynAttributeList.Attributes \nAttributes \n\n The list of attributes\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributelist.html#Range","title":"SynAttributeList.Range","content":"SynAttributeList.Range \nRange \n\n The syntax range of the list of attributes\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributes.html","title":"SynAttributes","content":"SynAttributes \n \nSynAttributes.Tail \nTail \nSynAttributes.Length \nLength \nSynAttributes.IsEmpty \nIsEmpty \nSynAttributes.Head \nHead \nSynAttributes.Item \nItem \nSynAttributes.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributes.html#Tail","title":"SynAttributes.Tail","content":"SynAttributes.Tail \nTail \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributes.html#Length","title":"SynAttributes.Length","content":"SynAttributes.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributes.html#IsEmpty","title":"SynAttributes.IsEmpty","content":"SynAttributes.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributes.html#Head","title":"SynAttributes.Head","content":"SynAttributes.Head \nHead \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributes.html#Item","title":"SynAttributes.Item","content":"SynAttributes.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synattributes.html#Empty","title":"SynAttributes.Empty","content":"SynAttributes.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbinding.html","title":"SynBinding","content":"SynBinding \n\n Represents a binding for a \u0027let\u0027 or \u0027member\u0027 declaration\n \nSynBinding.RangeOfBindingWithRhs \nRangeOfBindingWithRhs \nSynBinding.RangeOfBindingWithoutRhs \nRangeOfBindingWithoutRhs \nSynBinding.RangeOfHeadPattern \nRangeOfHeadPattern \nSynBinding.SynBinding \nSynBinding"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbinding.html#RangeOfBindingWithRhs","title":"SynBinding.RangeOfBindingWithRhs","content":"SynBinding.RangeOfBindingWithRhs \nRangeOfBindingWithRhs \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbinding.html#RangeOfBindingWithoutRhs","title":"SynBinding.RangeOfBindingWithoutRhs","content":"SynBinding.RangeOfBindingWithoutRhs \nRangeOfBindingWithoutRhs \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbinding.html#RangeOfHeadPattern","title":"SynBinding.RangeOfHeadPattern","content":"SynBinding.RangeOfHeadPattern \nRangeOfHeadPattern \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbinding.html#SynBinding","title":"SynBinding.SynBinding","content":"SynBinding.SynBinding \nSynBinding \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbindingkind.html","title":"SynBindingKind","content":"SynBindingKind \n\n The kind associated with a binding - \u0022let\u0022, \u0022do\u0022 or a standalone expression\n \nSynBindingKind.StandaloneExpression \nStandaloneExpression \nSynBindingKind.Normal \nNormal \nSynBindingKind.Do \nDo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbindingkind.html#StandaloneExpression","title":"SynBindingKind.StandaloneExpression","content":"SynBindingKind.StandaloneExpression \nStandaloneExpression \n\n A standalone expression in a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbindingkind.html#Normal","title":"SynBindingKind.Normal","content":"SynBindingKind.Normal \nNormal \n\n A normal \u0027let\u0027 binding in a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbindingkind.html#Do","title":"SynBindingKind.Do","content":"SynBindingKind.Do \nDo \n\n A \u0027do\u0027 binding in a module. Must have type \u0027unit\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbindingreturninfo.html","title":"SynBindingReturnInfo","content":"SynBindingReturnInfo \n\n Represents the return information in a binding for a \u0027let\u0027 or \u0027member\u0027 declaration\n \nSynBindingReturnInfo.SynBindingReturnInfo \nSynBindingReturnInfo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbindingreturninfo.html#SynBindingReturnInfo","title":"SynBindingReturnInfo.SynBindingReturnInfo","content":"SynBindingReturnInfo.SynBindingReturnInfo \nSynBindingReturnInfo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbytestringkind.html","title":"SynByteStringKind","content":"SynByteStringKind \n\n Indicate if the byte string had a special format\n \nSynByteStringKind.Regular \nRegular \nSynByteStringKind.Verbatim \nVerbatim"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbytestringkind.html#Regular","title":"SynByteStringKind.Regular","content":"SynByteStringKind.Regular \nRegular \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synbytestringkind.html#Verbatim","title":"SynByteStringKind.Verbatim","content":"SynByteStringKind.Verbatim \nVerbatim \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syncomponentinfo.html","title":"SynComponentInfo","content":"SynComponentInfo \n\n Represents the syntax tree associated with the name of a type definition or module\n in signature or implementation.\n\n This includes the name, attributes, type parameters, constraints, documentation and accessibility\n for a type definition or module. For modules, entries such as the type parameters are\n always empty.\n \nSynComponentInfo.Range \nRange \nSynComponentInfo.SynComponentInfo \nSynComponentInfo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syncomponentinfo.html#Range","title":"SynComponentInfo.Range","content":"SynComponentInfo.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syncomponentinfo.html#SynComponentInfo","title":"SynComponentInfo.SynComponentInfo","content":"SynComponentInfo.SynComponentInfo \nSynComponentInfo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html","title":"SynConst","content":"SynConst \n\n The unchecked abstract syntax tree of constants in F# types and expressions.\n \nSynConst.Range \nRange \nSynConst.Unit \nUnit \nSynConst.Bool \nBool \nSynConst.SByte \nSByte \nSynConst.Byte \nByte \nSynConst.Int16 \nInt16 \nSynConst.UInt16 \nUInt16 \nSynConst.Int32 \nInt32 \nSynConst.UInt32 \nUInt32 \nSynConst.Int64 \nInt64 \nSynConst.UInt64 \nUInt64 \nSynConst.IntPtr \nIntPtr \nSynConst.UIntPtr \nUIntPtr \nSynConst.Single \nSingle \nSynConst.Double \nDouble \nSynConst.Char \nChar \nSynConst.Decimal \nDecimal \nSynConst.UserNum \nUserNum \nSynConst.String \nString \nSynConst.Bytes \nBytes \nSynConst.UInt16s \nUInt16s \nSynConst.Measure \nMeasure \nSynConst.SourceIdentifier \nSourceIdentifier"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Range","title":"SynConst.Range","content":"SynConst.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Unit","title":"SynConst.Unit","content":"SynConst.Unit \nUnit \n\n F# syntax: ()\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Bool","title":"SynConst.Bool","content":"SynConst.Bool \nBool \n\n F# syntax: true, false\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#SByte","title":"SynConst.SByte","content":"SynConst.SByte \nSByte \n\n F# syntax: 13y, 0xFFy, 0o077y, 0b0111101y\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Byte","title":"SynConst.Byte","content":"SynConst.Byte \nByte \n\n F# syntax: 13uy, 0x40uy, 0oFFuy, 0b0111101uy\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Int16","title":"SynConst.Int16","content":"SynConst.Int16 \nInt16 \n\n F# syntax: 13s, 0x4000s, 0o0777s, 0b0111101s\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#UInt16","title":"SynConst.UInt16","content":"SynConst.UInt16 \nUInt16 \n\n F# syntax: 13us, 0x4000us, 0o0777us, 0b0111101us\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Int32","title":"SynConst.Int32","content":"SynConst.Int32 \nInt32 \n\n F# syntax: 13, 0x4000, 0o0777\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#UInt32","title":"SynConst.UInt32","content":"SynConst.UInt32 \nUInt32 \n\n F# syntax: 13u, 0x4000u, 0o0777u\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Int64","title":"SynConst.Int64","content":"SynConst.Int64 \nInt64 \n\n F# syntax: 13L\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#UInt64","title":"SynConst.UInt64","content":"SynConst.UInt64 \nUInt64 \n\n F# syntax: 13UL\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#IntPtr","title":"SynConst.IntPtr","content":"SynConst.IntPtr \nIntPtr \n\n F# syntax: 13n\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#UIntPtr","title":"SynConst.UIntPtr","content":"SynConst.UIntPtr \nUIntPtr \n\n F# syntax: 13un\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Single","title":"SynConst.Single","content":"SynConst.Single \nSingle \n\n F# syntax: 1.30f, 1.40e10f etc.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Double","title":"SynConst.Double","content":"SynConst.Double \nDouble \n\n F# syntax: 1.30, 1.40e10 etc.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Char","title":"SynConst.Char","content":"SynConst.Char \nChar \n\n F# syntax: \u0027a\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Decimal","title":"SynConst.Decimal","content":"SynConst.Decimal \nDecimal \n\n F# syntax: 23.4M\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#UserNum","title":"SynConst.UserNum","content":"SynConst.UserNum \nUserNum \n\n UserNum(value, suffix)\n\n F# syntax: 1Q, 1Z, 1R, 1N, 1G\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#String","title":"SynConst.String","content":"SynConst.String \nString \n\n F# syntax: verbatim or regular string, e.g. \u0022abc\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Bytes","title":"SynConst.Bytes","content":"SynConst.Bytes \nBytes \n\n F# syntax: verbatim or regular byte string, e.g. \u0022abc\u0022B.\n\n Also used internally in the typechecker once an array of unit16 constants\n is detected, to allow more efficient processing of large arrays of uint16 constants.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#UInt16s","title":"SynConst.UInt16s","content":"SynConst.UInt16s \nUInt16s \n\n Used internally in the typechecker once an array of unit16 constants\n is detected, to allow more efficient processing of large arrays of uint16 constants.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#Measure","title":"SynConst.Measure","content":"SynConst.Measure \nMeasure \n\n Old comment: \u0022we never iterate, so the const here is not another SynConst.Measure\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synconst.html#SourceIdentifier","title":"SynConst.SourceIdentifier","content":"SynConst.SourceIdentifier \nSourceIdentifier \n\n Source Line, File, and Path Identifiers\n Containing both the original value as the evaluated value.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synenumcase.html","title":"SynEnumCase","content":"SynEnumCase \n\n Represents the syntax tree for one case in an enum definition.\n \nSynEnumCase.Range \nRange \nSynEnumCase.SynEnumCase \nSynEnumCase"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synenumcase.html#Range","title":"SynEnumCase.Range","content":"SynEnumCase.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synenumcase.html#SynEnumCase","title":"SynEnumCase.SynEnumCase","content":"SynEnumCase.SynEnumCase \nSynEnumCase \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptiondefn.html","title":"SynExceptionDefn","content":"SynExceptionDefn \n\n Represents the right hand side of an exception declaration \u0027exception E = ... \u0027 plus\n any member definitions for the exception\n \nSynExceptionDefn.Range \nRange \nSynExceptionDefn.SynExceptionDefn \nSynExceptionDefn"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptiondefn.html#Range","title":"SynExceptionDefn.Range","content":"SynExceptionDefn.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptiondefn.html#SynExceptionDefn","title":"SynExceptionDefn.SynExceptionDefn","content":"SynExceptionDefn.SynExceptionDefn \nSynExceptionDefn \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html","title":"SynExceptionDefnRepr","content":"SynExceptionDefnRepr \n\n Represents the right hand side of an exception declaration \u0027exception E = ... \u0027\n \nSynExceptionDefnRepr.Range \nRange \nSynExceptionDefnRepr.SynExceptionDefnRepr \nSynExceptionDefnRepr"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html#Range","title":"SynExceptionDefnRepr.Range","content":"SynExceptionDefnRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html#SynExceptionDefnRepr","title":"SynExceptionDefnRepr.SynExceptionDefnRepr","content":"SynExceptionDefnRepr.SynExceptionDefnRepr \nSynExceptionDefnRepr \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptionsig.html","title":"SynExceptionSig","content":"SynExceptionSig \n\n Represents the right hand side of an exception definition in a signature file\n \nSynExceptionSig.SynExceptionSig \nSynExceptionSig"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexceptionsig.html#SynExceptionSig","title":"SynExceptionSig.SynExceptionSig","content":"SynExceptionSig.SynExceptionSig \nSynExceptionSig \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html","title":"SynExpr","content":"SynExpr \n\n Represents a syntax tree for F# expressions\n \nSynExpr.RangeOfFirstPortion \nRangeOfFirstPortion \nSynExpr.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \nSynExpr.Range \nRange \nSynExpr.IsArbExprAndThusAlreadyReportedError \nIsArbExprAndThusAlreadyReportedError \nSynExpr.Paren \nParen \nSynExpr.Quote \nQuote \nSynExpr.Const \nConst \nSynExpr.Typed \nTyped \nSynExpr.Tuple \nTuple \nSynExpr.AnonRecd \nAnonRecd \nSynExpr.ArrayOrList \nArrayOrList \nSynExpr.Record \nRecord \nSynExpr.New \nNew \nSynExpr.ObjExpr \nObjExpr \nSynExpr.While \nWhile \nSynExpr.For \nFor \nSynExpr.ForEach \nForEach \nSynExpr.ArrayOrListComputed \nArrayOrListComputed \nSynExpr.IndexRange \nIndexRange \nSynExpr.IndexFromEnd \nIndexFromEnd \nSynExpr.ComputationExpr \nComputationExpr \nSynExpr.Lambda \nLambda \nSynExpr.MatchLambda \nMatchLambda \nSynExpr.Match \nMatch \nSynExpr.Do \nDo \nSynExpr.Assert \nAssert \nSynExpr.App \nApp \nSynExpr.TypeApp \nTypeApp \nSynExpr.LetOrUse \nLetOrUse \nSynExpr.TryWith \nTryWith \nSynExpr.TryFinally \nTryFinally \nSynExpr.Lazy \nLazy \nSynExpr.Sequential \nSequential \nSynExpr.IfThenElse \nIfThenElse \nSynExpr.Ident \nIdent \nSynExpr.LongIdent \nLongIdent \nSynExpr.LongIdentSet \nLongIdentSet \nSynExpr.DotGet \nDotGet \nSynExpr.DotSet \nDotSet \nSynExpr.Set \nSet \nSynExpr.DotIndexedGet \nDotIndexedGet \nSynExpr.DotIndexedSet \nDotIndexedSet \nSynExpr.NamedIndexedPropertySet \nNamedIndexedPropertySet \nSynExpr.DotNamedIndexedPropertySet \nDotNamedIndexedPropertySet \nSynExpr.TypeTest \nTypeTest \nSynExpr.Upcast \nUpcast \nSynExpr.Downcast \nDowncast \nSynExpr.InferredUpcast \nInferredUpcast \nSynExpr.InferredDowncast \nInferredDowncast \nSynExpr.Null \nNull \nSynExpr.AddressOf \nAddressOf \nSynExpr.TraitCall \nTraitCall \nSynExpr.JoinIn \nJoinIn \nSynExpr.ImplicitZero \nImplicitZero \nSynExpr.SequentialOrImplicitYield \nSequentialOrImplicitYield \nSynExpr.YieldOrReturn \nYieldOrReturn \nSynExpr.YieldOrReturnFrom \nYieldOrReturnFrom \nSynExpr.LetOrUseBang \nLetOrUseBang \nSynExpr.MatchBang \nMatchBang \nSynExpr.DoBang \nDoBang \nSynExpr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \nSynExpr.LibraryOnlyStaticOptimization \nLibraryOnlyStaticOptimization \nSynExpr.LibraryOnlyUnionCaseFieldGet \nLibraryOnlyUnionCaseFieldGet \nSynExpr.LibraryOnlyUnionCaseFieldSet \nLibraryOnlyUnionCaseFieldSet \nSynExpr.ArbitraryAfterError \nArbitraryAfterError \nSynExpr.FromParseError \nFromParseError \nSynExpr.DiscardAfterMissingQualificationAfterDot \nDiscardAfterMissingQualificationAfterDot \nSynExpr.Fixed \nFixed \nSynExpr.InterpolatedString \nInterpolatedString \nSynExpr.DebugPoint \nDebugPoint \nSynExpr.Dynamic \nDynamic"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#RangeOfFirstPortion","title":"SynExpr.RangeOfFirstPortion","content":"SynExpr.RangeOfFirstPortion \nRangeOfFirstPortion \n\n Attempt to get the range of the first token or initial portion only - this\n is ad-hoc, just a cheap way to improve a certain \u0027query custom operation\u0027 error range\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#RangeWithoutAnyExtraDot","title":"SynExpr.RangeWithoutAnyExtraDot","content":"SynExpr.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Range","title":"SynExpr.Range","content":"SynExpr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#IsArbExprAndThusAlreadyReportedError","title":"SynExpr.IsArbExprAndThusAlreadyReportedError","content":"SynExpr.IsArbExprAndThusAlreadyReportedError \nIsArbExprAndThusAlreadyReportedError \n\n Indicates if this expression arises from error recovery\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Paren","title":"SynExpr.Paren","content":"SynExpr.Paren \nParen \n\n F# syntax: (expr)\n\n Parenthesized expressions. Kept in AST to distinguish A.M((x, y))\n from A.M(x, y), among other things.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Quote","title":"SynExpr.Quote","content":"SynExpr.Quote \nQuote \n\n F# syntax: \u003C@ expr @\u003E, \u003C@@ expr @@\u003E\n\n Quote(operator, isRaw, quotedSynExpr, isFromQueryExpression, m)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Const","title":"SynExpr.Const","content":"SynExpr.Const \nConst \n\n F# syntax: 1, 1.3, () etc.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Typed","title":"SynExpr.Typed","content":"SynExpr.Typed \nTyped \n\n F# syntax: expr: type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Tuple","title":"SynExpr.Tuple","content":"SynExpr.Tuple \nTuple \n\n F# syntax: e1, ..., eN\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#AnonRecd","title":"SynExpr.AnonRecd","content":"SynExpr.AnonRecd \nAnonRecd \n\n F# syntax: {| id1=e1; ...; idN=eN |}\n F# syntax: struct {| id1=e1; ...; idN=eN |}\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#ArrayOrList","title":"SynExpr.ArrayOrList","content":"SynExpr.ArrayOrList \nArrayOrList \n\n F# syntax: [ e1; ...; en ], [| e1; ...; en |]\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Record","title":"SynExpr.Record","content":"SynExpr.Record \nRecord \n\n F# syntax: { f1=e1; ...; fn=en }\n inherit includes location of separator (for tooling)\n copyOpt contains range of the following WITH part (for tooling)\n every field includes range of separator after the field (for tooling)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#New","title":"SynExpr.New","content":"SynExpr.New \nNew \n\n F# syntax: new C(...)\n The flag is true if known to be \u0027family\u0027 (\u0027protected\u0027) scope\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#ObjExpr","title":"SynExpr.ObjExpr","content":"SynExpr.ObjExpr \nObjExpr \n\n F# syntax: { new ... with ... }\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#While","title":"SynExpr.While","content":"SynExpr.While \nWhile \n\n F# syntax: \u0027while ... do ...\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#For","title":"SynExpr.For","content":"SynExpr.For \nFor \n\n F# syntax: \u0027for i = ... to ... do ...\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#ForEach","title":"SynExpr.ForEach","content":"SynExpr.ForEach \nForEach \n\n F# syntax: \u0027for ... in ... do ...\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#ArrayOrListComputed","title":"SynExpr.ArrayOrListComputed","content":"SynExpr.ArrayOrListComputed \nArrayOrListComputed \n\n F# syntax: [ expr ], [| expr |]\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#IndexRange","title":"SynExpr.IndexRange","content":"SynExpr.IndexRange \nIndexRange \n\n F# syntax: expr..\n F# syntax: ..expr\n F# syntax: expr..expr\n F# syntax: *\n A two-element range indexer argument a..b, a.., ..b. Also used to represent\n a range in a list, array or sequence expression.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#IndexFromEnd","title":"SynExpr.IndexFromEnd","content":"SynExpr.IndexFromEnd \nIndexFromEnd \n\n F# syntax: ^expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#ComputationExpr","title":"SynExpr.ComputationExpr","content":"SynExpr.ComputationExpr \nComputationExpr \n\n F# syntax: { expr }\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Lambda","title":"SynExpr.Lambda","content":"SynExpr.Lambda \nLambda \n\n First bool indicates if lambda originates from a method. Patterns here are always \u0022simple\u0022\n Second bool indicates if this is a \u0022later\u0022 part of an iterated sequence of lambdas\n parsedData keeps original parsed patterns and expression,\n prior to transforming to \u0022simple\u0022 patterns and iterated lambdas\n\n F# syntax: fun pat -\u003E expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#MatchLambda","title":"SynExpr.MatchLambda","content":"SynExpr.MatchLambda \nMatchLambda \n\n F# syntax: function pat1 -\u003E expr | ... | patN -\u003E exprN\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Match","title":"SynExpr.Match","content":"SynExpr.Match \nMatch \n\n F# syntax: match expr with pat1 -\u003E expr | ... | patN -\u003E exprN\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Do","title":"SynExpr.Do","content":"SynExpr.Do \nDo \n\n F# syntax: do expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Assert","title":"SynExpr.Assert","content":"SynExpr.Assert \nAssert \n\n F# syntax: assert expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#App","title":"SynExpr.App","content":"SynExpr.App \nApp \n\n F# syntax: f x\n\n flag: indicates if the application is syntactically atomic, e.g. f.[1] is atomic, but \u0027f x\u0027 is not\n isInfix is true for the first app of an infix operator, e.g. 1\u002B2\n becomes App(App(\u002B, 1), 2), where the inner node is marked isInfix\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#TypeApp","title":"SynExpr.TypeApp","content":"SynExpr.TypeApp \nTypeApp \n\n F# syntax: expr\u003Ctype1, ..., typeN\u003E\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LetOrUse","title":"SynExpr.LetOrUse","content":"SynExpr.LetOrUse \nLetOrUse \n\n F# syntax: let pat = expr in expr\n F# syntax: let f pat1 .. patN = expr in expr\n F# syntax: let rec f pat1 .. patN = expr in expr\n F# syntax: use pat = expr in expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#TryWith","title":"SynExpr.TryWith","content":"SynExpr.TryWith \nTryWith \n\n F# syntax: try expr with pat -\u003E expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#TryFinally","title":"SynExpr.TryFinally","content":"SynExpr.TryFinally \nTryFinally \n\n F# syntax: try expr finally expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Lazy","title":"SynExpr.Lazy","content":"SynExpr.Lazy \nLazy \n\n F# syntax: lazy expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Sequential","title":"SynExpr.Sequential","content":"SynExpr.Sequential \nSequential \n\n F# syntax: expr; expr\n\n  isTrueSeq: false indicates \u0022let v = a in b; v\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#IfThenElse","title":"SynExpr.IfThenElse","content":"SynExpr.IfThenElse \nIfThenElse \n\n F# syntax: if expr then expr\n F# syntax: if expr then expr else expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Ident","title":"SynExpr.Ident","content":"SynExpr.Ident \nIdent \n\n F# syntax: ident\n Optimized representation for SynExpr.LongIdent (false, [id], id.idRange)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LongIdent","title":"SynExpr.LongIdent","content":"SynExpr.LongIdent \nLongIdent \n\n F# syntax: ident.ident...ident\n\n isOptional: true if preceded by a \u0027?\u0027 for an optional named parameter\n altNameRefCell: Normally \u0027None\u0027 except for some compiler-generated\n variables in desugaring pattern matching. See SynSimplePat.Id\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LongIdentSet","title":"SynExpr.LongIdentSet","content":"SynExpr.LongIdentSet \nLongIdentSet \n\n F# syntax: ident.ident...ident \u003C- expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DotGet","title":"SynExpr.DotGet","content":"SynExpr.DotGet \nDotGet \n\n F# syntax: expr.ident.ident\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DotSet","title":"SynExpr.DotSet","content":"SynExpr.DotSet \nDotSet \n\n F# syntax: expr.ident...ident \u003C- expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Set","title":"SynExpr.Set","content":"SynExpr.Set \nSet \n\n F# syntax: expr \u003C- expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DotIndexedGet","title":"SynExpr.DotIndexedGet","content":"SynExpr.DotIndexedGet \nDotIndexedGet \n\n F# syntax: expr.[expr, ..., expr]\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DotIndexedSet","title":"SynExpr.DotIndexedSet","content":"SynExpr.DotIndexedSet \nDotIndexedSet \n\n F# syntax: expr.[expr, ..., expr] \u003C- expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#NamedIndexedPropertySet","title":"SynExpr.NamedIndexedPropertySet","content":"SynExpr.NamedIndexedPropertySet \nNamedIndexedPropertySet \n\n F# syntax: Type.Items(e1) \u003C- e2, rarely used named-property-setter notation, e.g. Foo.Bar.Chars(3) \u003C- \u0027a\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DotNamedIndexedPropertySet","title":"SynExpr.DotNamedIndexedPropertySet","content":"SynExpr.DotNamedIndexedPropertySet \nDotNamedIndexedPropertySet \n\n F# syntax: expr.Items (e1) \u003C- e2, rarely used named-property-setter notation, e.g. (stringExpr).Chars(3) \u003C- \u0027a\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#TypeTest","title":"SynExpr.TypeTest","content":"SynExpr.TypeTest \nTypeTest \n\n F# syntax: expr :? type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Upcast","title":"SynExpr.Upcast","content":"SynExpr.Upcast \nUpcast \n\n F# syntax: expr :\u003E type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Downcast","title":"SynExpr.Downcast","content":"SynExpr.Downcast \nDowncast \n\n F# syntax: expr :?\u003E type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#InferredUpcast","title":"SynExpr.InferredUpcast","content":"SynExpr.InferredUpcast \nInferredUpcast \n\n F# syntax: upcast expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#InferredDowncast","title":"SynExpr.InferredDowncast","content":"SynExpr.InferredDowncast \nInferredDowncast \n\n F# syntax: downcast expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Null","title":"SynExpr.Null","content":"SynExpr.Null \nNull \n\n F# syntax: null\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#AddressOf","title":"SynExpr.AddressOf","content":"SynExpr.AddressOf \nAddressOf \n\n F# syntax: \u0026expr, \u0026\u0026expr\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#TraitCall","title":"SynExpr.TraitCall","content":"SynExpr.TraitCall \nTraitCall \n\n F# syntax: ((typar1 or ... or typarN): (member-dig) expr)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#JoinIn","title":"SynExpr.JoinIn","content":"SynExpr.JoinIn \nJoinIn \n\n F# syntax: ... in ...\n Computation expressions only, based on JOIN_IN token from lex filter\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#ImplicitZero","title":"SynExpr.ImplicitZero","content":"SynExpr.ImplicitZero \nImplicitZero \n\n Used in parser error recovery and internally during type checking for translating computation expressions.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#SequentialOrImplicitYield","title":"SynExpr.SequentialOrImplicitYield","content":"SynExpr.SequentialOrImplicitYield \nSequentialOrImplicitYield \n\n Used internally during type checking for translating computation expressions.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#YieldOrReturn","title":"SynExpr.YieldOrReturn","content":"SynExpr.YieldOrReturn \nYieldOrReturn \n\n F# syntax: yield expr\n F# syntax: return expr\n Computation expressions only\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#YieldOrReturnFrom","title":"SynExpr.YieldOrReturnFrom","content":"SynExpr.YieldOrReturnFrom \nYieldOrReturnFrom \n\n F# syntax: yield! expr\n F# syntax: return! expr\n Computation expressions only\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LetOrUseBang","title":"SynExpr.LetOrUseBang","content":"SynExpr.LetOrUseBang \nLetOrUseBang \n\n F# syntax: let! pat = expr in expr\n F# syntax: use! pat = expr in expr\n F# syntax: let! pat = expr and! ... and! ... and! pat = expr in expr\n Computation expressions only\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#MatchBang","title":"SynExpr.MatchBang","content":"SynExpr.MatchBang \nMatchBang \n\n F# syntax: match! expr with pat1 -\u003E expr | ... | patN -\u003E exprN\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DoBang","title":"SynExpr.DoBang","content":"SynExpr.DoBang \nDoBang \n\n F# syntax: do! expr\n Computation expressions only\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyILAssembly","title":"SynExpr.LibraryOnlyILAssembly","content":"SynExpr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \n\n Only used in FSharp.Core\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyStaticOptimization","title":"SynExpr.LibraryOnlyStaticOptimization","content":"SynExpr.LibraryOnlyStaticOptimization \nLibraryOnlyStaticOptimization \n\n Only used in FSharp.Core\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyUnionCaseFieldGet","title":"SynExpr.LibraryOnlyUnionCaseFieldGet","content":"SynExpr.LibraryOnlyUnionCaseFieldGet \nLibraryOnlyUnionCaseFieldGet \n\n Only used in FSharp.Core\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyUnionCaseFieldSet","title":"SynExpr.LibraryOnlyUnionCaseFieldSet","content":"SynExpr.LibraryOnlyUnionCaseFieldSet \nLibraryOnlyUnionCaseFieldSet \n\n Only used in FSharp.Core\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#ArbitraryAfterError","title":"SynExpr.ArbitraryAfterError","content":"SynExpr.ArbitraryAfterError \nArbitraryAfterError \n\n Inserted for error recovery\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#FromParseError","title":"SynExpr.FromParseError","content":"SynExpr.FromParseError \nFromParseError \n\n Inserted for error recovery\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DiscardAfterMissingQualificationAfterDot","title":"SynExpr.DiscardAfterMissingQualificationAfterDot","content":"SynExpr.DiscardAfterMissingQualificationAfterDot \nDiscardAfterMissingQualificationAfterDot \n\n Inserted for error recovery when there is \u0022expr.\u0022 and missing tokens or error recovery after the dot\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Fixed","title":"SynExpr.Fixed","content":"SynExpr.Fixed \nFixed \n\n \u0027use x = fixed expr\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#InterpolatedString","title":"SynExpr.InterpolatedString","content":"SynExpr.InterpolatedString \nInterpolatedString \n\n F# syntax: interpolated string, e.g. \u0022abc{x}\u0022 or \u0022abc{x,3}\u0022 or \u0022abc{x:N4}\u0022\n Note the string ranges include the quotes, verbatim markers, dollar sign and braces\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#DebugPoint","title":"SynExpr.DebugPoint","content":"SynExpr.DebugPoint \nDebugPoint \n\n Debug points arising from computation expressions\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexpr.html#Dynamic","title":"SynExpr.Dynamic","content":"SynExpr.Dynamic \nDynamic \n\n F# syntax: f?x\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexprandbang.html","title":"SynExprAndBang","content":"SynExprAndBang \n \nSynExprAndBang.SynExprAndBang \nSynExprAndBang"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexprandbang.html#SynExprAndBang","title":"SynExprAndBang.SynExprAndBang","content":"SynExprAndBang.SynExprAndBang \nSynExprAndBang \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexprrecordfield.html","title":"SynExprRecordField","content":"SynExprRecordField \n \nSynExprRecordField.SynExprRecordField \nSynExprRecordField"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synexprrecordfield.html#SynExprRecordField","title":"SynExprRecordField.SynExprRecordField","content":"SynExprRecordField.SynExprRecordField \nSynExprRecordField \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synfield.html","title":"SynField","content":"SynField \n\n Represents the syntax tree for a field declaration in a record or class\n \nSynField.SynField \nSynField"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synfield.html#SynField","title":"SynField.SynField","content":"SynField.SynField \nSynField \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synident.html","title":"SynIdent","content":"SynIdent \n\n Represents an identifier with potentially additional trivia information.\n \nSynIdent.SynIdent \nSynIdent"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synident.html#SynIdent","title":"SynIdent.SynIdent","content":"SynIdent.SynIdent \nSynIdent \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syninterfaceimpl.html","title":"SynInterfaceImpl","content":"SynInterfaceImpl \n\n Represents a set of bindings that implement an interface\n \nSynInterfaceImpl.SynInterfaceImpl \nSynInterfaceImpl"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syninterfaceimpl.html#SynInterfaceImpl","title":"SynInterfaceImpl.SynInterfaceImpl","content":"SynInterfaceImpl.SynInterfaceImpl \nSynInterfaceImpl \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html","title":"SynInterpolatedStringPart","content":"SynInterpolatedStringPart \n \nSynInterpolatedStringPart.String \nString \nSynInterpolatedStringPart.FillExpr \nFillExpr"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#String","title":"SynInterpolatedStringPart.String","content":"SynInterpolatedStringPart.String \nString \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#FillExpr","title":"SynInterpolatedStringPart.FillExpr","content":"SynInterpolatedStringPart.FillExpr \nFillExpr \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html","title":"SynLongIdent","content":"SynLongIdent \n\n Represents a long identifier with possible \u0027.\u0027 at end.\n\n Typically dotRanges.Length = lid.Length-1, but they may be same if (incomplete) code ends in a dot, e.g. \u0022Foo.Bar.\u0022\n The dots mostly matter for parsing, and are typically ignored by the typechecker, but\n if dotRanges.Length = lid.Length, then the parser must have reported an error, so the typechecker is allowed\n more freedom about typechecking these expressions.\n LongIdent can be empty list - it is used to denote that name of some AST element is absent (i.e. empty type name in inherit)\n \nSynLongIdent.LongIdent \nLongIdent \nSynLongIdent.ThereIsAnExtraDotAtTheEnd \nThereIsAnExtraDotAtTheEnd \nSynLongIdent.Trivia \nTrivia \nSynLongIdent.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \nSynLongIdent.IdentsWithTrivia \nIdentsWithTrivia \nSynLongIdent.Range \nRange \nSynLongIdent.Dots \nDots \nSynLongIdent.SynLongIdent \nSynLongIdent"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#LongIdent","title":"SynLongIdent.LongIdent","content":"SynLongIdent.LongIdent \nLongIdent \n\n Get the long ident for this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#ThereIsAnExtraDotAtTheEnd","title":"SynLongIdent.ThereIsAnExtraDotAtTheEnd","content":"SynLongIdent.ThereIsAnExtraDotAtTheEnd \nThereIsAnExtraDotAtTheEnd \n\n Indicates if the construct ends in \u0027.\u0027 due to error recovery\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#Trivia","title":"SynLongIdent.Trivia","content":"SynLongIdent.Trivia \nTrivia \n\n Get the trivia of the idents\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#RangeWithoutAnyExtraDot","title":"SynLongIdent.RangeWithoutAnyExtraDot","content":"SynLongIdent.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \n\n Gets the syntax range for part of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#IdentsWithTrivia","title":"SynLongIdent.IdentsWithTrivia","content":"SynLongIdent.IdentsWithTrivia \nIdentsWithTrivia \n\n Get the idents with potential trivia attached\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#Range","title":"SynLongIdent.Range","content":"SynLongIdent.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#Dots","title":"SynLongIdent.Dots","content":"SynLongIdent.Dots \nDots \n\n Get the dot ranges\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synlongident.html#SynLongIdent","title":"SynLongIdent.SynLongIdent","content":"SynLongIdent.SynLongIdent \nSynLongIdent \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmatchclause.html","title":"SynMatchClause","content":"SynMatchClause \n\n Represents a clause in a \u0027match\u0027 expression\n \nSynMatchClause.RangeOfGuardAndRhs \nRangeOfGuardAndRhs \nSynMatchClause.Range \nRange \nSynMatchClause.SynMatchClause \nSynMatchClause"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmatchclause.html#RangeOfGuardAndRhs","title":"SynMatchClause.RangeOfGuardAndRhs","content":"SynMatchClause.RangeOfGuardAndRhs \nRangeOfGuardAndRhs \n\n Gets the syntax range of part of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmatchclause.html#Range","title":"SynMatchClause.Range","content":"SynMatchClause.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmatchclause.html#SynMatchClause","title":"SynMatchClause.SynMatchClause","content":"SynMatchClause.SynMatchClause \nSynMatchClause \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html","title":"SynMeasure","content":"SynMeasure \n\n Represents an unchecked syntax tree of F# unit of measure annotations.\n \nSynMeasure.Named \nNamed \nSynMeasure.Product \nProduct \nSynMeasure.Seq \nSeq \nSynMeasure.Divide \nDivide \nSynMeasure.Power \nPower \nSynMeasure.One \nOne \nSynMeasure.Anon \nAnon \nSynMeasure.Var \nVar \nSynMeasure.Paren \nParen"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Named","title":"SynMeasure.Named","content":"SynMeasure.Named \nNamed \n\n A named unit of measure\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Product","title":"SynMeasure.Product","content":"SynMeasure.Product \nProduct \n\n A product of two units of measure, e.g. \u0027kg * m\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Seq","title":"SynMeasure.Seq","content":"SynMeasure.Seq \nSeq \n\n A sequence of several units of measure, e.g. \u0027kg m m\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Divide","title":"SynMeasure.Divide","content":"SynMeasure.Divide \nDivide \n\n A division of two units of measure, e.g. \u0027kg / m\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Power","title":"SynMeasure.Power","content":"SynMeasure.Power \nPower \n\n A power of a unit of measure, e.g. \u0027kg ^ 2\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#One","title":"SynMeasure.One","content":"SynMeasure.One \nOne \n\n The \u00271\u0027 unit of measure\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Anon","title":"SynMeasure.Anon","content":"SynMeasure.Anon \nAnon \n\n An anonymous (inferred) unit of measure\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Var","title":"SynMeasure.Var","content":"SynMeasure.Var \nVar \n\n A variable unit of measure\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmeasure.html#Paren","title":"SynMeasure.Paren","content":"SynMeasure.Paren \nParen \n\n A parenthesized measure\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html","title":"SynMemberDefn","content":"SynMemberDefn \n\n Represents a definition element within a type definition, e.g. \u0027member ... \u0027\n \nSynMemberDefn.Range \nRange \nSynMemberDefn.Open \nOpen \nSynMemberDefn.Member \nMember \nSynMemberDefn.GetSetMember \nGetSetMember \nSynMemberDefn.ImplicitCtor \nImplicitCtor \nSynMemberDefn.ImplicitInherit \nImplicitInherit \nSynMemberDefn.LetBindings \nLetBindings \nSynMemberDefn.AbstractSlot \nAbstractSlot \nSynMemberDefn.Interface \nInterface \nSynMemberDefn.Inherit \nInherit \nSynMemberDefn.ValField \nValField \nSynMemberDefn.NestedType \nNestedType \nSynMemberDefn.AutoProperty \nAutoProperty"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#Range","title":"SynMemberDefn.Range","content":"SynMemberDefn.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#Open","title":"SynMemberDefn.Open","content":"SynMemberDefn.Open \nOpen \n\n An \u0027open\u0027 definition within a type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#Member","title":"SynMemberDefn.Member","content":"SynMemberDefn.Member \nMember \n\n A \u0027member\u0027 definition within a type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#GetSetMember","title":"SynMemberDefn.GetSetMember","content":"SynMemberDefn.GetSetMember \nGetSetMember \n\n A \u0027member\u0027 definition with get/set accessors within a type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#ImplicitCtor","title":"SynMemberDefn.ImplicitCtor","content":"SynMemberDefn.ImplicitCtor \nImplicitCtor \n\n An implicit constructor definition\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#ImplicitInherit","title":"SynMemberDefn.ImplicitInherit","content":"SynMemberDefn.ImplicitInherit \nImplicitInherit \n\n An implicit inherit definition, \u0027inherit \u003Ctyp\u003E(args...) as base\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#LetBindings","title":"SynMemberDefn.LetBindings","content":"SynMemberDefn.LetBindings \nLetBindings \n\n A \u0027let\u0027 definition within a class\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#AbstractSlot","title":"SynMemberDefn.AbstractSlot","content":"SynMemberDefn.AbstractSlot \nAbstractSlot \n\n An abstract slot definition within a class or interface\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#Interface","title":"SynMemberDefn.Interface","content":"SynMemberDefn.Interface \nInterface \n\n An interface implementation definition within a class\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#Inherit","title":"SynMemberDefn.Inherit","content":"SynMemberDefn.Inherit \nInherit \n\n An \u0027inherit\u0027 definition within a class\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#ValField","title":"SynMemberDefn.ValField","content":"SynMemberDefn.ValField \nValField \n\n A \u0027val\u0027 definition within a class\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#NestedType","title":"SynMemberDefn.NestedType","content":"SynMemberDefn.NestedType \nNestedType \n\n A nested type definition, a feature that is not implemented\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefn.html#AutoProperty","title":"SynMemberDefn.AutoProperty","content":"SynMemberDefn.AutoProperty \nAutoProperty \n\n An auto-property definition, F# syntax: \u0027member val X = expr\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefns.html","title":"SynMemberDefns","content":"SynMemberDefns \n \nSynMemberDefns.Tail \nTail \nSynMemberDefns.Length \nLength \nSynMemberDefns.IsEmpty \nIsEmpty \nSynMemberDefns.Head \nHead \nSynMemberDefns.Item \nItem \nSynMemberDefns.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefns.html#Tail","title":"SynMemberDefns.Tail","content":"SynMemberDefns.Tail \nTail \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefns.html#Length","title":"SynMemberDefns.Length","content":"SynMemberDefns.Length \nLength \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefns.html#IsEmpty","title":"SynMemberDefns.IsEmpty","content":"SynMemberDefns.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefns.html#Head","title":"SynMemberDefns.Head","content":"SynMemberDefns.Head \nHead \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefns.html#Item","title":"SynMemberDefns.Item","content":"SynMemberDefns.Item \nItem \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberdefns.html#Empty","title":"SynMemberDefns.Empty","content":"SynMemberDefns.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html","title":"SynMemberFlags","content":"SynMemberFlags \n\n Represents the flags for a \u0027member\u0027 declaration\n \nSynMemberFlags.IsInstance \nIsInstance \nSynMemberFlags.IsDispatchSlot \nIsDispatchSlot \nSynMemberFlags.IsOverrideOrExplicitImpl \nIsOverrideOrExplicitImpl \nSynMemberFlags.IsFinal \nIsFinal \nSynMemberFlags.GetterOrSetterIsCompilerGenerated \nGetterOrSetterIsCompilerGenerated \nSynMemberFlags.MemberKind \nMemberKind \nSynMemberFlags.Trivia \nTrivia"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html#IsInstance","title":"SynMemberFlags.IsInstance","content":"SynMemberFlags.IsInstance \nIsInstance \n\n The member is an instance member (non-static)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html#IsDispatchSlot","title":"SynMemberFlags.IsDispatchSlot","content":"SynMemberFlags.IsDispatchSlot \nIsDispatchSlot \n\n The member is a dispatch slot\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html#IsOverrideOrExplicitImpl","title":"SynMemberFlags.IsOverrideOrExplicitImpl","content":"SynMemberFlags.IsOverrideOrExplicitImpl \nIsOverrideOrExplicitImpl \n\n The member is an \u0027override\u0027 or explicit interface implementation\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html#IsFinal","title":"SynMemberFlags.IsFinal","content":"SynMemberFlags.IsFinal \nIsFinal \n\n The member is \u0027final\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html#GetterOrSetterIsCompilerGenerated","title":"SynMemberFlags.GetterOrSetterIsCompilerGenerated","content":"SynMemberFlags.GetterOrSetterIsCompilerGenerated \nGetterOrSetterIsCompilerGenerated \n\n The member was generated by the compiler\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html#MemberKind","title":"SynMemberFlags.MemberKind","content":"SynMemberFlags.MemberKind \nMemberKind \n\n The kind of the member\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberflags.html#Trivia","title":"SynMemberFlags.Trivia","content":"SynMemberFlags.Trivia \nTrivia \n\n Additional information\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberkind.html","title":"SynMemberKind","content":"SynMemberKind \n\n Note the member kind is actually computed partially by a syntax tree transformation in tc.fs\n \nSynMemberKind.ClassConstructor \nClassConstructor \nSynMemberKind.Constructor \nConstructor \nSynMemberKind.Member \nMember \nSynMemberKind.PropertyGet \nPropertyGet \nSynMemberKind.PropertySet \nPropertySet \nSynMemberKind.PropertyGetSet \nPropertyGetSet"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberkind.html#ClassConstructor","title":"SynMemberKind.ClassConstructor","content":"SynMemberKind.ClassConstructor \nClassConstructor \n\n The member is a class initializer\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberkind.html#Constructor","title":"SynMemberKind.Constructor","content":"SynMemberKind.Constructor \nConstructor \n\n The member is a object model constructor\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberkind.html#Member","title":"SynMemberKind.Member","content":"SynMemberKind.Member \nMember \n\n The member kind is not yet determined\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberkind.html#PropertyGet","title":"SynMemberKind.PropertyGet","content":"SynMemberKind.PropertyGet \nPropertyGet \n\n The member kind is property getter\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberkind.html#PropertySet","title":"SynMemberKind.PropertySet","content":"SynMemberKind.PropertySet \nPropertySet \n\n The member kind is property setter\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmemberkind.html#PropertyGetSet","title":"SynMemberKind.PropertyGetSet","content":"SynMemberKind.PropertyGetSet \nPropertyGetSet \n\n An artificial member kind used prior to the point where a\n get/set property is split into two distinct members.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmembersig.html","title":"SynMemberSig","content":"SynMemberSig \n\n Represents the syntax tree for a member signature (used in signature files, abstract member declarations\n and member constraints)\n \nSynMemberSig.Range \nRange \nSynMemberSig.Member \nMember \nSynMemberSig.Interface \nInterface \nSynMemberSig.Inherit \nInherit \nSynMemberSig.ValField \nValField \nSynMemberSig.NestedType \nNestedType"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmembersig.html#Range","title":"SynMemberSig.Range","content":"SynMemberSig.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmembersig.html#Member","title":"SynMemberSig.Member","content":"SynMemberSig.Member \nMember \n\n A member definition in a type in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmembersig.html#Interface","title":"SynMemberSig.Interface","content":"SynMemberSig.Interface \nInterface \n\n An interface definition in a type in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmembersig.html#Inherit","title":"SynMemberSig.Inherit","content":"SynMemberSig.Inherit \nInherit \n\n An \u0027inherit\u0027 definition in a type in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmembersig.html#ValField","title":"SynMemberSig.ValField","content":"SynMemberSig.ValField \nValField \n\n A \u0027val\u0027 definition in a type in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmembersig.html#NestedType","title":"SynMemberSig.NestedType","content":"SynMemberSig.NestedType \nNestedType \n\n A nested type definition in a signature file (an unimplemented feature)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html","title":"SynModuleDecl","content":"SynModuleDecl \n\n Represents a definition within a module\n \nSynModuleDecl.Range \nRange \nSynModuleDecl.ModuleAbbrev \nModuleAbbrev \nSynModuleDecl.NestedModule \nNestedModule \nSynModuleDecl.Let \nLet \nSynModuleDecl.Expr \nExpr \nSynModuleDecl.Types \nTypes \nSynModuleDecl.Exception \nException \nSynModuleDecl.Open \nOpen \nSynModuleDecl.Attributes \nAttributes \nSynModuleDecl.HashDirective \nHashDirective \nSynModuleDecl.NamespaceFragment \nNamespaceFragment"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#Range","title":"SynModuleDecl.Range","content":"SynModuleDecl.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#ModuleAbbrev","title":"SynModuleDecl.ModuleAbbrev","content":"SynModuleDecl.ModuleAbbrev \nModuleAbbrev \n\n A module abbreviation definition \u0027module X = A.B.C\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#NestedModule","title":"SynModuleDecl.NestedModule","content":"SynModuleDecl.NestedModule \nNestedModule \n\n A nested module definition \u0027module X = ...\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#Let","title":"SynModuleDecl.Let","content":"SynModuleDecl.Let \nLet \n\n A \u0027let\u0027 definition within a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#Expr","title":"SynModuleDecl.Expr","content":"SynModuleDecl.Expr \nExpr \n\n An \u0027expr\u0027 within a module.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#Types","title":"SynModuleDecl.Types","content":"SynModuleDecl.Types \nTypes \n\n One or more \u0027type\u0027 definitions within a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#Exception","title":"SynModuleDecl.Exception","content":"SynModuleDecl.Exception \nException \n\n An \u0027exception\u0027 definition within a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#Open","title":"SynModuleDecl.Open","content":"SynModuleDecl.Open \nOpen \n\n An \u0027open\u0027 definition within a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#Attributes","title":"SynModuleDecl.Attributes","content":"SynModuleDecl.Attributes \nAttributes \n\n An attribute definition within a module, for assembly and .NET module attributes\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#HashDirective","title":"SynModuleDecl.HashDirective","content":"SynModuleDecl.HashDirective \nHashDirective \n\n A hash directive within a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduledecl.html#NamespaceFragment","title":"SynModuleDecl.NamespaceFragment","content":"SynModuleDecl.NamespaceFragment \nNamespaceFragment \n\n A namespace fragment within a module\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespace.html","title":"SynModuleOrNamespace","content":"SynModuleOrNamespace \n\n Represents the definition of a module or namespace\n \nSynModuleOrNamespace.Range \nRange \nSynModuleOrNamespace.SynModuleOrNamespace \nSynModuleOrNamespace"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespace.html#Range","title":"SynModuleOrNamespace.Range","content":"SynModuleOrNamespace.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespace.html#SynModuleOrNamespace","title":"SynModuleOrNamespace.SynModuleOrNamespace","content":"SynModuleOrNamespace.SynModuleOrNamespace \nSynModuleOrNamespace \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html","title":"SynModuleOrNamespaceKind","content":"SynModuleOrNamespaceKind \n\n Represents the kind of a module or namespace definition\n \nSynModuleOrNamespaceKind.IsModule \nIsModule \nSynModuleOrNamespaceKind.NamedModule \nNamedModule \nSynModuleOrNamespaceKind.AnonModule \nAnonModule \nSynModuleOrNamespaceKind.DeclaredNamespace \nDeclaredNamespace \nSynModuleOrNamespaceKind.GlobalNamespace \nGlobalNamespace"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#IsModule","title":"SynModuleOrNamespaceKind.IsModule","content":"SynModuleOrNamespaceKind.IsModule \nIsModule \n\n Indicates if this is a module definition\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#NamedModule","title":"SynModuleOrNamespaceKind.NamedModule","content":"SynModuleOrNamespaceKind.NamedModule \nNamedModule \n\n A module is explicitly named \u0027module N\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#AnonModule","title":"SynModuleOrNamespaceKind.AnonModule","content":"SynModuleOrNamespaceKind.AnonModule \nAnonModule \n\n A module is anonymously named, e.g. a script\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#DeclaredNamespace","title":"SynModuleOrNamespaceKind.DeclaredNamespace","content":"SynModuleOrNamespaceKind.DeclaredNamespace \nDeclaredNamespace \n\n A namespace is explicitly declared\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#GlobalNamespace","title":"SynModuleOrNamespaceKind.GlobalNamespace","content":"SynModuleOrNamespaceKind.GlobalNamespace \nGlobalNamespace \n\n A namespace is declared \u0027global\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html","title":"SynModuleOrNamespaceSig","content":"SynModuleOrNamespaceSig \n\n Represents the definition of a module or namespace in a signature file\n \nSynModuleOrNamespaceSig.Range \nRange \nSynModuleOrNamespaceSig.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html#Range","title":"SynModuleOrNamespaceSig.Range","content":"SynModuleOrNamespaceSig.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html#SynModuleOrNamespaceSig","title":"SynModuleOrNamespaceSig.SynModuleOrNamespaceSig","content":"SynModuleOrNamespaceSig.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html","title":"SynModuleSigDecl","content":"SynModuleSigDecl \n\n Represents a definition within a module or namespace in a signature file\n \nSynModuleSigDecl.Range \nRange \nSynModuleSigDecl.ModuleAbbrev \nModuleAbbrev \nSynModuleSigDecl.NestedModule \nNestedModule \nSynModuleSigDecl.Val \nVal \nSynModuleSigDecl.Types \nTypes \nSynModuleSigDecl.Exception \nException \nSynModuleSigDecl.Open \nOpen \nSynModuleSigDecl.HashDirective \nHashDirective \nSynModuleSigDecl.NamespaceFragment \nNamespaceFragment"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Range","title":"SynModuleSigDecl.Range","content":"SynModuleSigDecl.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#ModuleAbbrev","title":"SynModuleSigDecl.ModuleAbbrev","content":"SynModuleSigDecl.ModuleAbbrev \nModuleAbbrev \n\n A module abbreviation definition within a module or namespace in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#NestedModule","title":"SynModuleSigDecl.NestedModule","content":"SynModuleSigDecl.NestedModule \nNestedModule \n\n A nested module definition within a module or namespace in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Val","title":"SynModuleSigDecl.Val","content":"SynModuleSigDecl.Val \nVal \n\n A \u0027val\u0027 definition within a module or namespace in a signature file, corresponding\n to a \u0027let\u0027 definition in the implementation\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Types","title":"SynModuleSigDecl.Types","content":"SynModuleSigDecl.Types \nTypes \n\n A set of one or more type definitions within a module or namespace in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Exception","title":"SynModuleSigDecl.Exception","content":"SynModuleSigDecl.Exception \nException \n\n An exception definition within a module or namespace in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Open","title":"SynModuleSigDecl.Open","content":"SynModuleSigDecl.Open \nOpen \n\n An \u0027open\u0027 definition within a module or namespace in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#HashDirective","title":"SynModuleSigDecl.HashDirective","content":"SynModuleSigDecl.HashDirective \nHashDirective \n\n A hash directive within a module or namespace in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synmodulesigdecl.html#NamespaceFragment","title":"SynModuleSigDecl.NamespaceFragment","content":"SynModuleSigDecl.NamespaceFragment \nNamespaceFragment \n\n A namespace fragment within a namespace in a signature file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synopendecltarget.html","title":"SynOpenDeclTarget","content":"SynOpenDeclTarget \n\n Represents the target of the open declaration\n \nSynOpenDeclTarget.Range \nRange \nSynOpenDeclTarget.ModuleOrNamespace \nModuleOrNamespace \nSynOpenDeclTarget.Type \nType"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synopendecltarget.html#Range","title":"SynOpenDeclTarget.Range","content":"SynOpenDeclTarget.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synopendecltarget.html#ModuleOrNamespace","title":"SynOpenDeclTarget.ModuleOrNamespace","content":"SynOpenDeclTarget.ModuleOrNamespace \nModuleOrNamespace \n\n A \u0027open\u0027 declaration\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synopendecltarget.html#Type","title":"SynOpenDeclTarget.Type","content":"SynOpenDeclTarget.Type \nType \n\n A \u0027open type\u0027 declaration\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html","title":"SynPat","content":"SynPat \n\n Represents a syntax tree for an F# pattern\n \nSynPat.Range \nRange \nSynPat.Const \nConst \nSynPat.Wild \nWild \nSynPat.Named \nNamed \nSynPat.Typed \nTyped \nSynPat.Attrib \nAttrib \nSynPat.Or \nOr \nSynPat.Ands \nAnds \nSynPat.As \nAs \nSynPat.LongIdent \nLongIdent \nSynPat.Tuple \nTuple \nSynPat.Paren \nParen \nSynPat.ArrayOrList \nArrayOrList \nSynPat.Record \nRecord \nSynPat.Null \nNull \nSynPat.OptionalVal \nOptionalVal \nSynPat.IsInst \nIsInst \nSynPat.QuoteExpr \nQuoteExpr \nSynPat.DeprecatedCharRange \nDeprecatedCharRange \nSynPat.InstanceMember \nInstanceMember \nSynPat.FromParseError \nFromParseError"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Range","title":"SynPat.Range","content":"SynPat.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Const","title":"SynPat.Const","content":"SynPat.Const \nConst \n\n A constant in a pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Wild","title":"SynPat.Wild","content":"SynPat.Wild \nWild \n\n A wildcard \u0027_\u0027 in a pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Named","title":"SynPat.Named","content":"SynPat.Named \nNamed \n\n A name pattern \u0027ident\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Typed","title":"SynPat.Typed","content":"SynPat.Typed \nTyped \n\n A typed pattern \u0027pat : type\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Attrib","title":"SynPat.Attrib","content":"SynPat.Attrib \nAttrib \n\n An attributed pattern, used in argument or declaration position\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Or","title":"SynPat.Or","content":"SynPat.Or \nOr \n\n A disjunctive pattern \u0027pat1 | pat2\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Ands","title":"SynPat.Ands","content":"SynPat.Ands \nAnds \n\n A conjunctive pattern \u0027pat1 \u0026 pat2\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#As","title":"SynPat.As","content":"SynPat.As \nAs \n\n A conjunctive pattern \u0027pat1 as pat2\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#LongIdent","title":"SynPat.LongIdent","content":"SynPat.LongIdent \nLongIdent \n\n A long identifier pattern possibly with argument patterns\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Tuple","title":"SynPat.Tuple","content":"SynPat.Tuple \nTuple \n\n A tuple pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Paren","title":"SynPat.Paren","content":"SynPat.Paren \nParen \n\n A parenthesized pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#ArrayOrList","title":"SynPat.ArrayOrList","content":"SynPat.ArrayOrList \nArrayOrList \n\n An array or a list as a pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Record","title":"SynPat.Record","content":"SynPat.Record \nRecord \n\n A record pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#Null","title":"SynPat.Null","content":"SynPat.Null \nNull \n\n The \u0027null\u0027 pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#OptionalVal","title":"SynPat.OptionalVal","content":"SynPat.OptionalVal \nOptionalVal \n\n \u0027?id\u0027 -- for optional argument names\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#IsInst","title":"SynPat.IsInst","content":"SynPat.IsInst \nIsInst \n\n A type test pattern \u0027:? type \u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#QuoteExpr","title":"SynPat.QuoteExpr","content":"SynPat.QuoteExpr \nQuoteExpr \n\n \u0026lt;@ expr @\u0026gt;, used for active pattern arguments\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#DeprecatedCharRange","title":"SynPat.DeprecatedCharRange","content":"SynPat.DeprecatedCharRange \nDeprecatedCharRange \n\n Deprecated character range: ranges\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#InstanceMember","title":"SynPat.InstanceMember","content":"SynPat.InstanceMember \nInstanceMember \n\n Used internally in the type checker\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synpat.html#FromParseError","title":"SynPat.FromParseError","content":"SynPat.FromParseError \nFromParseError \n\n A pattern arising from a parse error\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synrationalconst.html","title":"SynRationalConst","content":"SynRationalConst \n\n Represents an unchecked syntax tree of F# unit of measure exponents.\n \nSynRationalConst.Integer \nInteger \nSynRationalConst.Rational \nRational \nSynRationalConst.Negate \nNegate"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synrationalconst.html#Integer","title":"SynRationalConst.Integer","content":"SynRationalConst.Integer \nInteger \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synrationalconst.html#Rational","title":"SynRationalConst.Rational","content":"SynRationalConst.Rational \nRational \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synrationalconst.html#Negate","title":"SynRationalConst.Negate","content":"SynRationalConst.Negate \nNegate \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synreturninfo.html","title":"SynReturnInfo","content":"SynReturnInfo \n\n Represents the syntactic elements associated with the \u0022return\u0022 of a function or method.\n \nSynReturnInfo.SynReturnInfo \nSynReturnInfo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synreturninfo.html#SynReturnInfo","title":"SynReturnInfo.SynReturnInfo","content":"SynReturnInfo.SynReturnInfo \nSynReturnInfo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepat.html","title":"SynSimplePat","content":"SynSimplePat \n\n Represents a syntax tree for simple F# patterns\n \nSynSimplePat.Range \nRange \nSynSimplePat.Id \nId \nSynSimplePat.Typed \nTyped \nSynSimplePat.Attrib \nAttrib"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepat.html#Range","title":"SynSimplePat.Range","content":"SynSimplePat.Range \nRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepat.html#Id","title":"SynSimplePat.Id","content":"SynSimplePat.Id \nId \n\n Indicates a simple pattern variable.\n\n altNameRefCell:\n   Normally \u0027None\u0027 except for some compiler-generated variables in desugaring pattern matching.\n   Pattern processing sets this reference for hidden variable introduced\n   by desugaring pattern matching in arguments. The info indicates an\n   alternative (compiler generated) identifier to be used because the\n   name of the identifier is already bound.\n\n isCompilerGenerated: true if a compiler generated name\n isThisVal: true if \u0027this\u0027 variable in member\n isOptional: true if a \u0027?\u0027 is in front of the name\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepat.html#Typed","title":"SynSimplePat.Typed","content":"SynSimplePat.Typed \nTyped \n\n A type annotated simple pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepat.html#Attrib","title":"SynSimplePat.Attrib","content":"SynSimplePat.Attrib \nAttrib \n\n An attributed simple pattern\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html","title":"SynSimplePatAlternativeIdInfo","content":"SynSimplePatAlternativeIdInfo \n\n Represents the alternative identifier for a simple pattern\n \nSynSimplePatAlternativeIdInfo.Undecided \nUndecided \nSynSimplePatAlternativeIdInfo.Decided \nDecided"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#Undecided","title":"SynSimplePatAlternativeIdInfo.Undecided","content":"SynSimplePatAlternativeIdInfo.Undecided \nUndecided \n\n We have not decided to use an alternative name in the pattern and related expression\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#Decided","title":"SynSimplePatAlternativeIdInfo.Decided","content":"SynSimplePatAlternativeIdInfo.Decided \nDecided \n\n We have decided to use an alternative name in the pattern and related expression\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepats.html","title":"SynSimplePats","content":"SynSimplePats \n\n Represents a simple set of variable bindings a, (a, b) or (a: Type, b: Type) at a lambda,\n function definition or other binding point, after the elimination of pattern matching\n from the construct, e.g. after changing a \u0022function pat1 -\u003E rule1 | ...\u0022 to a\n \u0022fun v -\u003E match v with ...\u0022\n \nSynSimplePats.Range \nRange \nSynSimplePats.SimplePats \nSimplePats \nSynSimplePats.Typed \nTyped"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepats.html#Range","title":"SynSimplePats.Range","content":"SynSimplePats.Range \nRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepats.html#SimplePats","title":"SynSimplePats.SimplePats","content":"SynSimplePats.SimplePats \nSimplePats \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synsimplepats.html#Typed","title":"SynSimplePats.Typed","content":"SynSimplePats.Typed \nTyped \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html","title":"SynStaticOptimizationConstraint","content":"SynStaticOptimizationConstraint \n\n Represents a syntax tree for a static optimization constraint in the F# core library\n \nSynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon \nWhenTyparTyconEqualsTycon \nSynStaticOptimizationConstraint.WhenTyparIsStruct \nWhenTyparIsStruct"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#WhenTyparTyconEqualsTycon","title":"SynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon","content":"SynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon \nWhenTyparTyconEqualsTycon \n\n A static optimization conditional that activates for a particular type instantiation\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#WhenTyparIsStruct","title":"SynStaticOptimizationConstraint.WhenTyparIsStruct","content":"SynStaticOptimizationConstraint.WhenTyparIsStruct \nWhenTyparIsStruct \n\n A static optimization conditional that activates for a struct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synstringkind.html","title":"SynStringKind","content":"SynStringKind \n\n Indicate if the string had a special format\n \nSynStringKind.Regular \nRegular \nSynStringKind.Verbatim \nVerbatim \nSynStringKind.TripleQuote \nTripleQuote"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synstringkind.html#Regular","title":"SynStringKind.Regular","content":"SynStringKind.Regular \nRegular \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synstringkind.html#Verbatim","title":"SynStringKind.Verbatim","content":"SynStringKind.Verbatim \nVerbatim \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synstringkind.html#TripleQuote","title":"SynStringKind.TripleQuote","content":"SynStringKind.TripleQuote \nTripleQuote \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntupletypesegment.html","title":"SynTupleTypeSegment","content":"SynTupleTypeSegment \n \nSynTupleTypeSegment.Range \nRange \nSynTupleTypeSegment.Type \nType \nSynTupleTypeSegment.Star \nStar \nSynTupleTypeSegment.Slash \nSlash"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntupletypesegment.html#Range","title":"SynTupleTypeSegment.Range","content":"SynTupleTypeSegment.Range \nRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntupletypesegment.html#Type","title":"SynTupleTypeSegment.Type","content":"SynTupleTypeSegment.Type \nType \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntupletypesegment.html#Star","title":"SynTupleTypeSegment.Star","content":"SynTupleTypeSegment.Star \nStar \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntupletypesegment.html#Slash","title":"SynTupleTypeSegment.Slash","content":"SynTupleTypeSegment.Slash \nSlash \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypar.html","title":"SynTypar","content":"SynTypar \n\n Represents a syntactic type parameter\n \nSynTypar.Range \nRange \nSynTypar.SynTypar \nSynTypar"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypar.html#Range","title":"SynTypar.Range","content":"SynTypar.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypar.html#SynTypar","title":"SynTypar.SynTypar","content":"SynTypar.SynTypar \nSynTypar \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecl.html","title":"SynTyparDecl","content":"SynTyparDecl \n\n Represents the explicit declaration of a type parameter\n \nSynTyparDecl.SynTyparDecl \nSynTyparDecl"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecl.html#SynTyparDecl","title":"SynTyparDecl.SynTyparDecl","content":"SynTyparDecl.SynTyparDecl \nSynTyparDecl \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecls.html","title":"SynTyparDecls","content":"SynTyparDecls \n\n List of type parameter declarations with optional type constraints,\n enclosed in \u0060\u003C ... \u003E\u0060 (postfix) or \u0060( ... )\u0060 (prefix), or a single prefix parameter.\n \nSynTyparDecls.TyparDecls \nTyparDecls \nSynTyparDecls.Range \nRange \nSynTyparDecls.Constraints \nConstraints \nSynTyparDecls.PostfixList \nPostfixList \nSynTyparDecls.PrefixList \nPrefixList \nSynTyparDecls.SinglePrefix \nSinglePrefix"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecls.html#TyparDecls","title":"SynTyparDecls.TyparDecls","content":"SynTyparDecls.TyparDecls \nTyparDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecls.html#Range","title":"SynTyparDecls.Range","content":"SynTyparDecls.Range \nRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecls.html#Constraints","title":"SynTyparDecls.Constraints","content":"SynTyparDecls.Constraints \nConstraints \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecls.html#PostfixList","title":"SynTyparDecls.PostfixList","content":"SynTyparDecls.PostfixList \nPostfixList \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecls.html#PrefixList","title":"SynTyparDecls.PrefixList","content":"SynTyparDecls.PrefixList \nPrefixList \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypardecls.html#SinglePrefix","title":"SynTyparDecls.SinglePrefix","content":"SynTyparDecls.SinglePrefix \nSinglePrefix \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html","title":"SynType","content":"SynType \n\n Represents a syntax tree for F# types\n \nSynType.Range \nRange \nSynType.LongIdent \nLongIdent \nSynType.App \nApp \nSynType.LongIdentApp \nLongIdentApp \nSynType.Tuple \nTuple \nSynType.AnonRecd \nAnonRecd \nSynType.Array \nArray \nSynType.Fun \nFun \nSynType.Var \nVar \nSynType.Anon \nAnon \nSynType.WithGlobalConstraints \nWithGlobalConstraints \nSynType.HashConstraint \nHashConstraint \nSynType.MeasureDivide \nMeasureDivide \nSynType.MeasurePower \nMeasurePower \nSynType.StaticConstant \nStaticConstant \nSynType.StaticConstantExpr \nStaticConstantExpr \nSynType.StaticConstantNamed \nStaticConstantNamed \nSynType.Paren \nParen"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#Range","title":"SynType.Range","content":"SynType.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#LongIdent","title":"SynType.LongIdent","content":"SynType.LongIdent \nLongIdent \n\n F# syntax: A.B.C\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#App","title":"SynType.App","content":"SynType.App \nApp \n\n F# syntax: type\u003Ctype, ..., type\u003E or type type or (type, ..., type) type\n   isPostfix: indicates a postfix type application e.g. \u0022int list\u0022 or \u0022(int, string) dict\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#LongIdentApp","title":"SynType.LongIdentApp","content":"SynType.LongIdentApp \nLongIdentApp \n\n F# syntax: type.A.B.C\u003Ctype, ..., type\u003E\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#Tuple","title":"SynType.Tuple","content":"SynType.Tuple \nTuple \n\n F# syntax: type * ... * type\n F# syntax: struct (type * ... * type)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#AnonRecd","title":"SynType.AnonRecd","content":"SynType.AnonRecd \nAnonRecd \n\n F# syntax: {| id: type; ...; id: type |}\n F# syntax: struct {| id: type; ...; id: type |}\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#Array","title":"SynType.Array","content":"SynType.Array \nArray \n\n F# syntax: type[]\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#Fun","title":"SynType.Fun","content":"SynType.Fun \nFun \n\n F# syntax: type -\u003E type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#Var","title":"SynType.Var","content":"SynType.Var \nVar \n\n F# syntax: \u0027Var\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#Anon","title":"SynType.Anon","content":"SynType.Anon \nAnon \n\n F# syntax: _\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#WithGlobalConstraints","title":"SynType.WithGlobalConstraints","content":"SynType.WithGlobalConstraints \nWithGlobalConstraints \n\n F# syntax: typ with constraints\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#HashConstraint","title":"SynType.HashConstraint","content":"SynType.HashConstraint \nHashConstraint \n\n F# syntax: #type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#MeasureDivide","title":"SynType.MeasureDivide","content":"SynType.MeasureDivide \nMeasureDivide \n\n F# syntax: for units of measure e.g. m / s\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#MeasurePower","title":"SynType.MeasurePower","content":"SynType.MeasurePower \nMeasurePower \n\n F# syntax: for units of measure e.g. m^3, kg^1/2\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#StaticConstant","title":"SynType.StaticConstant","content":"SynType.StaticConstant \nStaticConstant \n\n F# syntax: 1, \u0022abc\u0022 etc, used in parameters to type providers\n For the dimensionless units i.e. 1, and static parameters to provided types\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#StaticConstantExpr","title":"SynType.StaticConstantExpr","content":"SynType.StaticConstantExpr \nStaticConstantExpr \n\n F# syntax: const expr, used in static parameters to type providers\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#StaticConstantNamed","title":"SynType.StaticConstantNamed","content":"SynType.StaticConstantNamed \nStaticConstantNamed \n\n F# syntax: ident=1 etc., used in static parameters to type providers\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntype.html#Paren","title":"SynType.Paren","content":"SynType.Paren \nParen \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html","title":"SynTypeConstraint","content":"SynTypeConstraint \n\n The unchecked abstract syntax tree of F# type constraints\n \nSynTypeConstraint.Range \nRange \nSynTypeConstraint.WhereTyparIsValueType \nWhereTyparIsValueType \nSynTypeConstraint.WhereTyparIsReferenceType \nWhereTyparIsReferenceType \nSynTypeConstraint.WhereTyparIsUnmanaged \nWhereTyparIsUnmanaged \nSynTypeConstraint.WhereTyparSupportsNull \nWhereTyparSupportsNull \nSynTypeConstraint.WhereTyparIsComparable \nWhereTyparIsComparable \nSynTypeConstraint.WhereTyparIsEquatable \nWhereTyparIsEquatable \nSynTypeConstraint.WhereTyparDefaultsToType \nWhereTyparDefaultsToType \nSynTypeConstraint.WhereTyparSubtypeOfType \nWhereTyparSubtypeOfType \nSynTypeConstraint.WhereTyparSupportsMember \nWhereTyparSupportsMember \nSynTypeConstraint.WhereTyparIsEnum \nWhereTyparIsEnum \nSynTypeConstraint.WhereTyparIsDelegate \nWhereTyparIsDelegate"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#Range","title":"SynTypeConstraint.Range","content":"SynTypeConstraint.Range \nRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsValueType","title":"SynTypeConstraint.WhereTyparIsValueType","content":"SynTypeConstraint.WhereTyparIsValueType \nWhereTyparIsValueType \n\n F# syntax: is \u0027typar: struct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsReferenceType","title":"SynTypeConstraint.WhereTyparIsReferenceType","content":"SynTypeConstraint.WhereTyparIsReferenceType \nWhereTyparIsReferenceType \n\n F# syntax: is \u0027typar: not struct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsUnmanaged","title":"SynTypeConstraint.WhereTyparIsUnmanaged","content":"SynTypeConstraint.WhereTyparIsUnmanaged \nWhereTyparIsUnmanaged \n\n F# syntax is \u0027typar: unmanaged\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSupportsNull","title":"SynTypeConstraint.WhereTyparSupportsNull","content":"SynTypeConstraint.WhereTyparSupportsNull \nWhereTyparSupportsNull \n\n F# syntax is \u0027typar: null\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsComparable","title":"SynTypeConstraint.WhereTyparIsComparable","content":"SynTypeConstraint.WhereTyparIsComparable \nWhereTyparIsComparable \n\n F# syntax is \u0027typar: comparison\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsEquatable","title":"SynTypeConstraint.WhereTyparIsEquatable","content":"SynTypeConstraint.WhereTyparIsEquatable \nWhereTyparIsEquatable \n\n F# syntax is \u0027typar: equality\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparDefaultsToType","title":"SynTypeConstraint.WhereTyparDefaultsToType","content":"SynTypeConstraint.WhereTyparDefaultsToType \nWhereTyparDefaultsToType \n\n F# syntax is default ^T: type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSubtypeOfType","title":"SynTypeConstraint.WhereTyparSubtypeOfType","content":"SynTypeConstraint.WhereTyparSubtypeOfType \nWhereTyparSubtypeOfType \n\n F# syntax is \u0027typar :\u003E type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSupportsMember","title":"SynTypeConstraint.WhereTyparSupportsMember","content":"SynTypeConstraint.WhereTyparSupportsMember \nWhereTyparSupportsMember \n\n F# syntax is ^T: (static member MemberName: ^T * int -\u003E ^T)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsEnum","title":"SynTypeConstraint.WhereTyparIsEnum","content":"SynTypeConstraint.WhereTyparIsEnum \nWhereTyparIsEnum \n\n F# syntax is \u0027typar: enum\u003C\u0027UnderlyingType\u003E\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsDelegate","title":"SynTypeConstraint.WhereTyparIsDelegate","content":"SynTypeConstraint.WhereTyparIsDelegate \nWhereTyparIsDelegate \n\n F# syntax is \u0027typar: delegate\u003C\u0027Args, unit\u003E\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefn.html","title":"SynTypeDefn","content":"SynTypeDefn \n\n Represents a type or exception declaration \u0027type C = ... \u0027 plus\n any additional member definitions for the type\n \nSynTypeDefn.Range \nRange \nSynTypeDefn.SynTypeDefn \nSynTypeDefn"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefn.html#Range","title":"SynTypeDefn.Range","content":"SynTypeDefn.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefn.html#SynTypeDefn","title":"SynTypeDefn.SynTypeDefn","content":"SynTypeDefn.SynTypeDefn \nSynTypeDefn \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html","title":"SynTypeDefnKind","content":"SynTypeDefnKind \n\n Represents the kind of a type definition whether explicit or inferred\n \nSynTypeDefnKind.Unspecified \nUnspecified \nSynTypeDefnKind.Class \nClass \nSynTypeDefnKind.Interface \nInterface \nSynTypeDefnKind.Struct \nStruct \nSynTypeDefnKind.Record \nRecord \nSynTypeDefnKind.Union \nUnion \nSynTypeDefnKind.Abbrev \nAbbrev \nSynTypeDefnKind.Opaque \nOpaque \nSynTypeDefnKind.Augmentation \nAugmentation \nSynTypeDefnKind.IL \nIL \nSynTypeDefnKind.Delegate \nDelegate"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Unspecified","title":"SynTypeDefnKind.Unspecified","content":"SynTypeDefnKind.Unspecified \nUnspecified \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Class","title":"SynTypeDefnKind.Class","content":"SynTypeDefnKind.Class \nClass \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Interface","title":"SynTypeDefnKind.Interface","content":"SynTypeDefnKind.Interface \nInterface \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Struct","title":"SynTypeDefnKind.Struct","content":"SynTypeDefnKind.Struct \nStruct \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Record","title":"SynTypeDefnKind.Record","content":"SynTypeDefnKind.Record \nRecord \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Union","title":"SynTypeDefnKind.Union","content":"SynTypeDefnKind.Union \nUnion \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Abbrev","title":"SynTypeDefnKind.Abbrev","content":"SynTypeDefnKind.Abbrev \nAbbrev \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Opaque","title":"SynTypeDefnKind.Opaque","content":"SynTypeDefnKind.Opaque \nOpaque \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Augmentation","title":"SynTypeDefnKind.Augmentation","content":"SynTypeDefnKind.Augmentation \nAugmentation \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#IL","title":"SynTypeDefnKind.IL","content":"SynTypeDefnKind.IL \nIL \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnkind.html#Delegate","title":"SynTypeDefnKind.Delegate","content":"SynTypeDefnKind.Delegate \nDelegate \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnrepr.html","title":"SynTypeDefnRepr","content":"SynTypeDefnRepr \n\n Represents the right hand side of a type or exception declaration \u0027type C = ... \u0027 plus\n any additional member definitions for the type\n \nSynTypeDefnRepr.Range \nRange \nSynTypeDefnRepr.ObjectModel \nObjectModel \nSynTypeDefnRepr.Simple \nSimple \nSynTypeDefnRepr.Exception \nException"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Range","title":"SynTypeDefnRepr.Range","content":"SynTypeDefnRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnrepr.html#ObjectModel","title":"SynTypeDefnRepr.ObjectModel","content":"SynTypeDefnRepr.ObjectModel \nObjectModel \n\n An object model type definition (class or interface)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Simple","title":"SynTypeDefnRepr.Simple","content":"SynTypeDefnRepr.Simple \nSimple \n\n A simple type definition (record, union, abbreviation)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Exception","title":"SynTypeDefnRepr.Exception","content":"SynTypeDefnRepr.Exception \nException \n\n An exception definition\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsig.html","title":"SynTypeDefnSig","content":"SynTypeDefnSig \n\n Represents the syntax tree for a type definition in a signature\n \nSynTypeDefnSig.Range \nRange \nSynTypeDefnSig.SynTypeDefnSig \nSynTypeDefnSig"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsig.html#Range","title":"SynTypeDefnSig.Range","content":"SynTypeDefnSig.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsig.html#SynTypeDefnSig","title":"SynTypeDefnSig.SynTypeDefnSig","content":"SynTypeDefnSig.SynTypeDefnSig \nSynTypeDefnSig \n\n The information for a type definition in a signature\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html","title":"SynTypeDefnSigRepr","content":"SynTypeDefnSigRepr \n\n Represents the syntax tree for the right-hand-side of a type definition in a signature.\n Note: in practice, using a discriminated union to make a distinction between\n \u0022simple\u0022 types and \u0022object oriented\u0022 types is not particularly useful.\n \nSynTypeDefnSigRepr.Range \nRange \nSynTypeDefnSigRepr.ObjectModel \nObjectModel \nSynTypeDefnSigRepr.Simple \nSimple \nSynTypeDefnSigRepr.Exception \nException"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Range","title":"SynTypeDefnSigRepr.Range","content":"SynTypeDefnSigRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#ObjectModel","title":"SynTypeDefnSigRepr.ObjectModel","content":"SynTypeDefnSigRepr.ObjectModel \nObjectModel \n\n Indicates the right right-hand-side is a class, struct, interface or other object-model type\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Simple","title":"SynTypeDefnSigRepr.Simple","content":"SynTypeDefnSigRepr.Simple \nSimple \n\n Indicates the right right-hand-side is a record, union or other simple type.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Exception","title":"SynTypeDefnSigRepr.Exception","content":"SynTypeDefnSigRepr.Exception \nException \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html","title":"SynTypeDefnSimpleRepr","content":"SynTypeDefnSimpleRepr \n\n Represents the syntax tree for the core of a simple type definition, in either signature\n or implementation.\n \nSynTypeDefnSimpleRepr.Range \nRange \nSynTypeDefnSimpleRepr.Union \nUnion \nSynTypeDefnSimpleRepr.Enum \nEnum \nSynTypeDefnSimpleRepr.Record \nRecord \nSynTypeDefnSimpleRepr.General \nGeneral \nSynTypeDefnSimpleRepr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \nSynTypeDefnSimpleRepr.TypeAbbrev \nTypeAbbrev \nSynTypeDefnSimpleRepr.None \nNone \nSynTypeDefnSimpleRepr.Exception \nException"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Range","title":"SynTypeDefnSimpleRepr.Range","content":"SynTypeDefnSimpleRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Union","title":"SynTypeDefnSimpleRepr.Union","content":"SynTypeDefnSimpleRepr.Union \nUnion \n\n A union type definition, type X = A | B\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Enum","title":"SynTypeDefnSimpleRepr.Enum","content":"SynTypeDefnSimpleRepr.Enum \nEnum \n\n An enum type definition, type X = A = 1 | B = 2\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Record","title":"SynTypeDefnSimpleRepr.Record","content":"SynTypeDefnSimpleRepr.Record \nRecord \n\n A record type definition, type X = { A: int; B: int }\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#General","title":"SynTypeDefnSimpleRepr.General","content":"SynTypeDefnSimpleRepr.General \nGeneral \n\n An object oriented type definition. This is not a parse-tree form, but represents the core\n type representation which the type checker splits out from the \u0022ObjectModel\u0022 cases of type definitions.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#LibraryOnlyILAssembly","title":"SynTypeDefnSimpleRepr.LibraryOnlyILAssembly","content":"SynTypeDefnSimpleRepr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \n\n A type defined by using an IL assembly representation. Only used in FSharp.Core.\n\n F# syntax: \u0022type X = (# \u0022...\u0022#)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#TypeAbbrev","title":"SynTypeDefnSimpleRepr.TypeAbbrev","content":"SynTypeDefnSimpleRepr.TypeAbbrev \nTypeAbbrev \n\n A type abbreviation, \u0022type X = A.B.C\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#None","title":"SynTypeDefnSimpleRepr.None","content":"SynTypeDefnSimpleRepr.None \nNone \n\n An abstract definition, \u0022type X\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Exception","title":"SynTypeDefnSimpleRepr.Exception","content":"SynTypeDefnSimpleRepr.Exception \nException \n\n An exception definition, \u0022exception E = ...\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synunioncase.html","title":"SynUnionCase","content":"SynUnionCase \n\n Represents the syntax tree for one case in a union definition.\n \nSynUnionCase.Range \nRange \nSynUnionCase.SynUnionCase \nSynUnionCase"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synunioncase.html#Range","title":"SynUnionCase.Range","content":"SynUnionCase.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synunioncase.html#SynUnionCase","title":"SynUnionCase.SynUnionCase","content":"SynUnionCase.SynUnionCase \nSynUnionCase \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synunioncasekind.html","title":"SynUnionCaseKind","content":"SynUnionCaseKind \n\n Represents the syntax tree for the right-hand-side of union definition, excluding members,\n in either a signature or implementation.\n \nSynUnionCaseKind.Fields \nFields \nSynUnionCaseKind.FullType \nFullType"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synunioncasekind.html#Fields","title":"SynUnionCaseKind.Fields","content":"SynUnionCaseKind.Fields \nFields \n\n Normal style declaration\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synunioncasekind.html#FullType","title":"SynUnionCaseKind.FullType","content":"SynUnionCaseKind.FullType \nFullType \n\n Full type spec given by \u0027UnionCase: ty1 * tyN -\u003E rty\u0027. Only used in FSharp.Core, otherwise a warning.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvaldata.html","title":"SynValData","content":"SynValData \n\n Represents extra information about the declaration of a value\n \nSynValData.SynValInfo \nSynValInfo \nSynValData.SynValData \nSynValData"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvaldata.html#SynValInfo","title":"SynValData.SynValInfo","content":"SynValData.SynValInfo \nSynValInfo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvaldata.html#SynValData","title":"SynValData.SynValData","content":"SynValData.SynValData \nSynValData \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalinfo.html","title":"SynValInfo","content":"SynValInfo \n\n The argument names and other metadata for a member or function\n \nSynValInfo.ArgNames \nArgNames \nSynValInfo.CurriedArgInfos \nCurriedArgInfos \nSynValInfo.SynValInfo \nSynValInfo"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalinfo.html#ArgNames","title":"SynValInfo.ArgNames","content":"SynValInfo.ArgNames \nArgNames \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalinfo.html#CurriedArgInfos","title":"SynValInfo.CurriedArgInfos","content":"SynValInfo.CurriedArgInfos \nCurriedArgInfos \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalinfo.html#SynValInfo","title":"SynValInfo.SynValInfo","content":"SynValInfo.SynValInfo \nSynValInfo \n\n SynValInfo(curriedArgInfos, returnInfo)\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalsig.html","title":"SynValSig","content":"SynValSig \n\n Represents the syntax tree for a \u0027val\u0027 definition in an abstract slot or a signature file\n \nSynValSig.SynInfo \nSynInfo \nSynValSig.RangeOfId \nRangeOfId \nSynValSig.SynType \nSynType \nSynValSig.SynValSig \nSynValSig"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalsig.html#SynInfo","title":"SynValSig.SynInfo","content":"SynValSig.SynInfo \nSynInfo \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalsig.html#RangeOfId","title":"SynValSig.RangeOfId","content":"SynValSig.RangeOfId \nRangeOfId \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalsig.html#SynType","title":"SynValSig.SynType","content":"SynValSig.SynType \nSynType \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvalsig.html#SynValSig","title":"SynValSig.SynValSig","content":"SynValSig.SynValSig \nSynValSig \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvaltypardecls.html","title":"SynValTyparDecls","content":"SynValTyparDecls \n\n Represents the names and other metadata for the type parameters for a member or function\n \nSynValTyparDecls.SynValTyparDecls \nSynValTyparDecls"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-synvaltypardecls.html#SynValTyparDecls","title":"SynValTyparDecls.SynValTyparDecls","content":"SynValTyparDecls.SynValTyparDecls \nSynValTyparDecls \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-typarstaticreq.html","title":"TyparStaticReq","content":"TyparStaticReq \n\n Represents whether a type parameter has a static requirement or not (^T or \u0027T)\n \nTyparStaticReq.None \nNone \nTyparStaticReq.HeadType \nHeadType"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-typarstaticreq.html#None","title":"TyparStaticReq.None","content":"TyparStaticReq.None \nNone \n\n The construct is a normal type inference variable\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntax-typarstaticreq.html#HeadType","title":"TyparStaticReq.HeadType","content":"TyparStaticReq.HeadType \nHeadType \n\n The construct is a statically inferred type inference variable \u0027^T\u0027\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html","title":"CommentTrivia","content":"CommentTrivia \n \nCommentTrivia.LineComment \nLineComment \nCommentTrivia.BlockComment \nBlockComment"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html#LineComment","title":"CommentTrivia.LineComment","content":"CommentTrivia.LineComment \nLineComment \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-commenttrivia.html#BlockComment","title":"CommentTrivia.BlockComment","content":"CommentTrivia.BlockComment \nBlockComment \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html","title":"ConditionalDirectiveTrivia","content":"ConditionalDirectiveTrivia \n \nConditionalDirectiveTrivia.If \nIf \nConditionalDirectiveTrivia.Else \nElse \nConditionalDirectiveTrivia.EndIf \nEndIf"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#If","title":"ConditionalDirectiveTrivia.If","content":"ConditionalDirectiveTrivia.If \nIf \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#Else","title":"ConditionalDirectiveTrivia.Else","content":"ConditionalDirectiveTrivia.Else \nElse \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-conditionaldirectivetrivia.html#EndIf","title":"ConditionalDirectiveTrivia.EndIf","content":"ConditionalDirectiveTrivia.EndIf \nEndIf \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-identtrivia.html","title":"IdentTrivia","content":"IdentTrivia \n \nIdentTrivia.OriginalNotation \nOriginalNotation \nIdentTrivia.OriginalNotationWithParen \nOriginalNotationWithParen \nIdentTrivia.HasParenthesis \nHasParenthesis"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#OriginalNotation","title":"IdentTrivia.OriginalNotation","content":"IdentTrivia.OriginalNotation \nOriginalNotation \n\n The ident originally had a different notation.\n Example: a \u002B b\n The operator ident will be compiled into \u0022op_Addition\u0022, while the original notation was \u0022\u002B\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#OriginalNotationWithParen","title":"IdentTrivia.OriginalNotationWithParen","content":"IdentTrivia.OriginalNotationWithParen \nOriginalNotationWithParen \n\n The ident originally had a different notation and parenthesis\n Example: let (\u003E=\u003E) a b = ...\n The operator ident will be compiled into \u0022op_GreaterEqualsGreater\u0022, while the original notation was \u0022\u003E=\u003E\u0022 and had parenthesis\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-identtrivia.html#HasParenthesis","title":"IdentTrivia.HasParenthesis","content":"IdentTrivia.HasParenthesis \nHasParenthesis \n\n The ident had parenthesis\n Example: let (|Odd|Even|) = ...\n The active pattern ident will be \u0022|Odd|Even|\u0022, while originally there were parenthesis.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html","title":"IfDirectiveExpression","content":"IfDirectiveExpression \n \nIfDirectiveExpression.And \nAnd \nIfDirectiveExpression.Or \nOr \nIfDirectiveExpression.Not \nNot \nIfDirectiveExpression.Ident \nIdent"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#And","title":"IfDirectiveExpression.And","content":"IfDirectiveExpression.And \nAnd \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#Or","title":"IfDirectiveExpression.Or","content":"IfDirectiveExpression.Or \nOr \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#Not","title":"IfDirectiveExpression.Not","content":"IfDirectiveExpression.Not \nNot \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-ifdirectiveexpression.html#Ident","title":"IfDirectiveExpression.Ident","content":"IfDirectiveExpression.Ident \nIdent \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-parsedimplfileinputtrivia.html","title":"ParsedImplFileInputTrivia","content":"ParsedImplFileInputTrivia \n\n Represents additional information for ParsedImplFileInput\n \nParsedImplFileInputTrivia.ConditionalDirectives \nConditionalDirectives \nParsedImplFileInputTrivia.CodeComments \nCodeComments"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-parsedimplfileinputtrivia.html#ConditionalDirectives","title":"ParsedImplFileInputTrivia.ConditionalDirectives","content":"ParsedImplFileInputTrivia.ConditionalDirectives \nConditionalDirectives \n\n Preprocessor directives of type #if, #else or #endif\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-parsedimplfileinputtrivia.html#CodeComments","title":"ParsedImplFileInputTrivia.CodeComments","content":"ParsedImplFileInputTrivia.CodeComments \nCodeComments \n\n Represent code comments found in the source file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-parsedsigfileinputtrivia.html","title":"ParsedSigFileInputTrivia","content":"ParsedSigFileInputTrivia \n\n Represents additional information for ParsedSigFileInputTrivia\n \nParsedSigFileInputTrivia.ConditionalDirectives \nConditionalDirectives \nParsedSigFileInputTrivia.CodeComments \nCodeComments"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-parsedsigfileinputtrivia.html#ConditionalDirectives","title":"ParsedSigFileInputTrivia.ConditionalDirectives","content":"ParsedSigFileInputTrivia.ConditionalDirectives \nConditionalDirectives \n\n Preprocessor directives of type #if, #else or #endif\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-parsedsigfileinputtrivia.html#CodeComments","title":"ParsedSigFileInputTrivia.CodeComments","content":"ParsedSigFileInputTrivia.CodeComments \nCodeComments \n\n Represent code comments found in the source file\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html","title":"SynBindingTrivia","content":"SynBindingTrivia \n\n Represents additional information for SynBinding\n \nSynBindingTrivia.Zero \nZero \nSynBindingTrivia.LetKeyword \nLetKeyword \nSynBindingTrivia.EqualsRange \nEqualsRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html#Zero","title":"SynBindingTrivia.Zero","content":"SynBindingTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html#LetKeyword","title":"SynBindingTrivia.LetKeyword","content":"SynBindingTrivia.LetKeyword \nLetKeyword \n\n The syntax range of the \u0060let\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synbindingtrivia.html#EqualsRange","title":"SynBindingTrivia.EqualsRange","content":"SynBindingTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synenumcasetrivia.html","title":"SynEnumCaseTrivia","content":"SynEnumCaseTrivia \n\n Represents additional information for\n \nSynEnumCaseTrivia.BarRange \nBarRange \nSynEnumCaseTrivia.EqualsRange \nEqualsRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synenumcasetrivia.html#BarRange","title":"SynEnumCaseTrivia.BarRange","content":"SynEnumCaseTrivia.BarRange \nBarRange \n\n The syntax range of the \u0060|\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synenumcasetrivia.html#EqualsRange","title":"SynEnumCaseTrivia.EqualsRange","content":"SynEnumCaseTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprandbangtrivia.html","title":"SynExprAndBangTrivia","content":"SynExprAndBangTrivia \n\n Represents additional information for SynExprAndBang\n \nSynExprAndBangTrivia.EqualsRange \nEqualsRange \nSynExprAndBangTrivia.InKeyword \nInKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprandbangtrivia.html#EqualsRange","title":"SynExprAndBangTrivia.EqualsRange","content":"SynExprAndBangTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprandbangtrivia.html#InKeyword","title":"SynExprAndBangTrivia.InKeyword","content":"SynExprAndBangTrivia.InKeyword \nInKeyword \n\n The syntax range of the \u0060in\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html","title":"SynExprIfThenElseTrivia","content":"SynExprIfThenElseTrivia \n\n Represents additional information for SynExpr.IfThenElse\n \nSynExprIfThenElseTrivia.IfKeyword \nIfKeyword \nSynExprIfThenElseTrivia.IsElif \nIsElif \nSynExprIfThenElseTrivia.ThenKeyword \nThenKeyword \nSynExprIfThenElseTrivia.ElseKeyword \nElseKeyword \nSynExprIfThenElseTrivia.IfToThenRange \nIfToThenRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#IfKeyword","title":"SynExprIfThenElseTrivia.IfKeyword","content":"SynExprIfThenElseTrivia.IfKeyword \nIfKeyword \n\n The syntax range of the \u0060if\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#IsElif","title":"SynExprIfThenElseTrivia.IsElif","content":"SynExprIfThenElseTrivia.IsElif \nIsElif \n\n Indicates if the \u0060elif\u0060 keyword was used\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#ThenKeyword","title":"SynExprIfThenElseTrivia.ThenKeyword","content":"SynExprIfThenElseTrivia.ThenKeyword \nThenKeyword \n\n The syntax range of the \u0060then\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#ElseKeyword","title":"SynExprIfThenElseTrivia.ElseKeyword","content":"SynExprIfThenElseTrivia.ElseKeyword \nElseKeyword \n\n The syntax range of the \u0060else\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprifthenelsetrivia.html#IfToThenRange","title":"SynExprIfThenElseTrivia.IfToThenRange","content":"SynExprIfThenElseTrivia.IfToThenRange \nIfToThenRange \n\n The syntax range from the beginning of the \u0060if\u0060 keyword till the end of the \u0060then\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprlambdatrivia.html","title":"SynExprLambdaTrivia","content":"SynExprLambdaTrivia \n\n Represents additional information for SynExpr.Lambda\n \nSynExprLambdaTrivia.Zero \nZero \nSynExprLambdaTrivia.ArrowRange \nArrowRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprlambdatrivia.html#Zero","title":"SynExprLambdaTrivia.Zero","content":"SynExprLambdaTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprlambdatrivia.html#ArrowRange","title":"SynExprLambdaTrivia.ArrowRange","content":"SynExprLambdaTrivia.ArrowRange \nArrowRange \n\n The syntax range of the \u0060-\u003E\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprletorusebangtrivia.html","title":"SynExprLetOrUseBangTrivia","content":"SynExprLetOrUseBangTrivia \n\n Represents additional information for SynExpr.LetOrUseBang\n \nSynExprLetOrUseBangTrivia.Zero \nZero \nSynExprLetOrUseBangTrivia.EqualsRange \nEqualsRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprletorusebangtrivia.html#Zero","title":"SynExprLetOrUseBangTrivia.Zero","content":"SynExprLetOrUseBangTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprletorusebangtrivia.html#EqualsRange","title":"SynExprLetOrUseBangTrivia.EqualsRange","content":"SynExprLetOrUseBangTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprletorusetrivia.html","title":"SynExprLetOrUseTrivia","content":"SynExprLetOrUseTrivia \n\n Represents additional information for SynExpr.LetOrUse\n \nSynExprLetOrUseTrivia.InKeyword \nInKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprletorusetrivia.html#InKeyword","title":"SynExprLetOrUseTrivia.InKeyword","content":"SynExprLetOrUseTrivia.InKeyword \nInKeyword \n\n The syntax range of the \u0060in\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprmatchbangtrivia.html","title":"SynExprMatchBangTrivia","content":"SynExprMatchBangTrivia \n\n Represents additional information for SynExpr.MatchBang\n \nSynExprMatchBangTrivia.MatchBangKeyword \nMatchBangKeyword \nSynExprMatchBangTrivia.WithKeyword \nWithKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprmatchbangtrivia.html#MatchBangKeyword","title":"SynExprMatchBangTrivia.MatchBangKeyword","content":"SynExprMatchBangTrivia.MatchBangKeyword \nMatchBangKeyword \n\n The syntax range of the \u0060match!\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprmatchbangtrivia.html#WithKeyword","title":"SynExprMatchBangTrivia.WithKeyword","content":"SynExprMatchBangTrivia.WithKeyword \nWithKeyword \n\n The syntax range of the \u0060with\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprmatchtrivia.html","title":"SynExprMatchTrivia","content":"SynExprMatchTrivia \n\n Represents additional information for SynExpr.Match\n \nSynExprMatchTrivia.MatchKeyword \nMatchKeyword \nSynExprMatchTrivia.WithKeyword \nWithKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprmatchtrivia.html#MatchKeyword","title":"SynExprMatchTrivia.MatchKeyword","content":"SynExprMatchTrivia.MatchKeyword \nMatchKeyword \n\n The syntax range of the \u0060match\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprmatchtrivia.html#WithKeyword","title":"SynExprMatchTrivia.WithKeyword","content":"SynExprMatchTrivia.WithKeyword \nWithKeyword \n\n The syntax range of the \u0060with\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtryfinallytrivia.html","title":"SynExprTryFinallyTrivia","content":"SynExprTryFinallyTrivia \n\n Represents additional information for SynExpr.TryFinally\n \nSynExprTryFinallyTrivia.TryKeyword \nTryKeyword \nSynExprTryFinallyTrivia.FinallyKeyword \nFinallyKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtryfinallytrivia.html#TryKeyword","title":"SynExprTryFinallyTrivia.TryKeyword","content":"SynExprTryFinallyTrivia.TryKeyword \nTryKeyword \n\n The syntax range of the \u0060try\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtryfinallytrivia.html#FinallyKeyword","title":"SynExprTryFinallyTrivia.FinallyKeyword","content":"SynExprTryFinallyTrivia.FinallyKeyword \nFinallyKeyword \n\n The syntax range of the \u0060finally\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html","title":"SynExprTryWithTrivia","content":"SynExprTryWithTrivia \n\n Represents additional information for SynExpr.TryWith\n \nSynExprTryWithTrivia.TryKeyword \nTryKeyword \nSynExprTryWithTrivia.TryToWithRange \nTryToWithRange \nSynExprTryWithTrivia.WithKeyword \nWithKeyword \nSynExprTryWithTrivia.WithToEndRange \nWithToEndRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#TryKeyword","title":"SynExprTryWithTrivia.TryKeyword","content":"SynExprTryWithTrivia.TryKeyword \nTryKeyword \n\n The syntax range of the \u0060try\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#TryToWithRange","title":"SynExprTryWithTrivia.TryToWithRange","content":"SynExprTryWithTrivia.TryToWithRange \nTryToWithRange \n\n The syntax range from the beginning of the \u0060try\u0060 keyword till the end of the \u0060with\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#WithKeyword","title":"SynExprTryWithTrivia.WithKeyword","content":"SynExprTryWithTrivia.WithKeyword \nWithKeyword \n\n The syntax range of the \u0060with\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synexprtrywithtrivia.html#WithToEndRange","title":"SynExprTryWithTrivia.WithToEndRange","content":"SynExprTryWithTrivia.WithToEndRange \nWithToEndRange \n\n The syntax range from the beginning of the \u0060with\u0060 keyword till the end of the TryWith expression.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html","title":"SynMatchClauseTrivia","content":"SynMatchClauseTrivia \n\n Represents additional information for SynMatchClause\n \nSynMatchClauseTrivia.Zero \nZero \nSynMatchClauseTrivia.ArrowRange \nArrowRange \nSynMatchClauseTrivia.BarRange \nBarRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html#Zero","title":"SynMatchClauseTrivia.Zero","content":"SynMatchClauseTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html#ArrowRange","title":"SynMatchClauseTrivia.ArrowRange","content":"SynMatchClauseTrivia.ArrowRange \nArrowRange \n\n The syntax range of the \u0060-\u003E\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmatchclausetrivia.html#BarRange","title":"SynMatchClauseTrivia.BarRange","content":"SynMatchClauseTrivia.BarRange \nBarRange \n\n The syntax range of the \u0060|\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmemberflagstrivia.html","title":"SynMemberFlagsTrivia","content":"SynMemberFlagsTrivia \n\n Represents additional information for SynMemberFlags\n \nSynMemberFlagsTrivia.Zero \nZero \nSynMemberFlagsTrivia.MemberRange \nMemberRange \nSynMemberFlagsTrivia.OverrideRange \nOverrideRange \nSynMemberFlagsTrivia.AbstractRange \nAbstractRange \nSynMemberFlagsTrivia.StaticRange \nStaticRange \nSynMemberFlagsTrivia.DefaultRange \nDefaultRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmemberflagstrivia.html#Zero","title":"SynMemberFlagsTrivia.Zero","content":"SynMemberFlagsTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmemberflagstrivia.html#MemberRange","title":"SynMemberFlagsTrivia.MemberRange","content":"SynMemberFlagsTrivia.MemberRange \nMemberRange \n\n The syntax range of the \u0060member\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmemberflagstrivia.html#OverrideRange","title":"SynMemberFlagsTrivia.OverrideRange","content":"SynMemberFlagsTrivia.OverrideRange \nOverrideRange \n\n The syntax range of the \u0060override\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmemberflagstrivia.html#AbstractRange","title":"SynMemberFlagsTrivia.AbstractRange","content":"SynMemberFlagsTrivia.AbstractRange \nAbstractRange \n\n The syntax range of the \u0060abstract\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmemberflagstrivia.html#StaticRange","title":"SynMemberFlagsTrivia.StaticRange","content":"SynMemberFlagsTrivia.StaticRange \nStaticRange \n\n The syntax range of the \u0060member\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmemberflagstrivia.html#DefaultRange","title":"SynMemberFlagsTrivia.DefaultRange","content":"SynMemberFlagsTrivia.DefaultRange \nDefaultRange \n\n The syntax range of the \u0060default\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html","title":"SynMemberGetSetTrivia","content":"SynMemberGetSetTrivia \n\n Represents additional information for SynMemberDefn.GetSetMember\n \nSynMemberGetSetTrivia.WithKeyword \nWithKeyword \nSynMemberGetSetTrivia.GetKeyword \nGetKeyword \nSynMemberGetSetTrivia.AndKeyword \nAndKeyword \nSynMemberGetSetTrivia.SetKeyword \nSetKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#WithKeyword","title":"SynMemberGetSetTrivia.WithKeyword","content":"SynMemberGetSetTrivia.WithKeyword \nWithKeyword \n\n The syntax range of the \u0060with\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#GetKeyword","title":"SynMemberGetSetTrivia.GetKeyword","content":"SynMemberGetSetTrivia.GetKeyword \nGetKeyword \n\n The syntax range of the \u0060get\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#AndKeyword","title":"SynMemberGetSetTrivia.AndKeyword","content":"SynMemberGetSetTrivia.AndKeyword \nAndKeyword \n\n The syntax range of the \u0060and\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmembergetsettrivia.html#SetKeyword","title":"SynMemberGetSetTrivia.SetKeyword","content":"SynMemberGetSetTrivia.SetKeyword \nSetKeyword \n\n The syntax range of the \u0060set\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html","title":"SynModuleDeclNestedModuleTrivia","content":"SynModuleDeclNestedModuleTrivia \n\n Represents additional information for SynModuleDecl.NestedModule\n \nSynModuleDeclNestedModuleTrivia.Zero \nZero \nSynModuleDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \nSynModuleDeclNestedModuleTrivia.EqualsRange \nEqualsRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html#Zero","title":"SynModuleDeclNestedModuleTrivia.Zero","content":"SynModuleDeclNestedModuleTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html#ModuleKeyword","title":"SynModuleDeclNestedModuleTrivia.ModuleKeyword","content":"SynModuleDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \n\n The syntax range of the \u0060module\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduledeclnestedmoduletrivia.html#EqualsRange","title":"SynModuleDeclNestedModuleTrivia.EqualsRange","content":"SynModuleDeclNestedModuleTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacesigtrivia.html","title":"SynModuleOrNamespaceSigTrivia","content":"SynModuleOrNamespaceSigTrivia \n\n Represents additional information for SynModuleOrNamespaceSig\n \nSynModuleOrNamespaceSigTrivia.ModuleKeyword \nModuleKeyword \nSynModuleOrNamespaceSigTrivia.NamespaceKeyword \nNamespaceKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacesigtrivia.html#ModuleKeyword","title":"SynModuleOrNamespaceSigTrivia.ModuleKeyword","content":"SynModuleOrNamespaceSigTrivia.ModuleKeyword \nModuleKeyword \n\n The syntax range of the \u0060module\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacesigtrivia.html#NamespaceKeyword","title":"SynModuleOrNamespaceSigTrivia.NamespaceKeyword","content":"SynModuleOrNamespaceSigTrivia.NamespaceKeyword \nNamespaceKeyword \n\n The syntax range of the \u0060namespace\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacetrivia.html","title":"SynModuleOrNamespaceTrivia","content":"SynModuleOrNamespaceTrivia \n\n Represents additional information for SynModuleOrNamespace\n \nSynModuleOrNamespaceTrivia.ModuleKeyword \nModuleKeyword \nSynModuleOrNamespaceTrivia.NamespaceKeyword \nNamespaceKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacetrivia.html#ModuleKeyword","title":"SynModuleOrNamespaceTrivia.ModuleKeyword","content":"SynModuleOrNamespaceTrivia.ModuleKeyword \nModuleKeyword \n\n The syntax range of the \u0060module\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmoduleornamespacetrivia.html#NamespaceKeyword","title":"SynModuleOrNamespaceTrivia.NamespaceKeyword","content":"SynModuleOrNamespaceTrivia.NamespaceKeyword \nNamespaceKeyword \n\n The syntax range of the \u0060namespace\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html","title":"SynModuleSigDeclNestedModuleTrivia","content":"SynModuleSigDeclNestedModuleTrivia \n\n Represents additional information for SynModuleSigDecl.NestedModule\n \nSynModuleSigDeclNestedModuleTrivia.Zero \nZero \nSynModuleSigDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \nSynModuleSigDeclNestedModuleTrivia.EqualsRange \nEqualsRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html#Zero","title":"SynModuleSigDeclNestedModuleTrivia.Zero","content":"SynModuleSigDeclNestedModuleTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html#ModuleKeyword","title":"SynModuleSigDeclNestedModuleTrivia.ModuleKeyword","content":"SynModuleSigDeclNestedModuleTrivia.ModuleKeyword \nModuleKeyword \n\n The syntax range of the \u0060module\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synmodulesigdeclnestedmoduletrivia.html#EqualsRange","title":"SynModuleSigDeclNestedModuleTrivia.EqualsRange","content":"SynModuleSigDeclNestedModuleTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synpatortrivia.html","title":"SynPatOrTrivia","content":"SynPatOrTrivia \n\n Represents additional information for SynPat.Or\n \nSynPatOrTrivia.BarRange \nBarRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synpatortrivia.html#BarRange","title":"SynPatOrTrivia.BarRange","content":"SynPatOrTrivia.BarRange \nBarRange \n\n The syntax range of the \u0060|\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html","title":"SynTypeDefnSigTrivia","content":"SynTypeDefnSigTrivia \n\n Represents additional information for SynTypeDefnSig\n \nSynTypeDefnSigTrivia.Zero \nZero \nSynTypeDefnSigTrivia.TypeKeyword \nTypeKeyword \nSynTypeDefnSigTrivia.EqualsRange \nEqualsRange \nSynTypeDefnSigTrivia.WithKeyword \nWithKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#Zero","title":"SynTypeDefnSigTrivia.Zero","content":"SynTypeDefnSigTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#TypeKeyword","title":"SynTypeDefnSigTrivia.TypeKeyword","content":"SynTypeDefnSigTrivia.TypeKeyword \nTypeKeyword \n\n The syntax range of the \u0060type\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#EqualsRange","title":"SynTypeDefnSigTrivia.EqualsRange","content":"SynTypeDefnSigTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefnsigtrivia.html#WithKeyword","title":"SynTypeDefnSigTrivia.WithKeyword","content":"SynTypeDefnSigTrivia.WithKeyword \nWithKeyword \n\n The syntax range of the \u0060with\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html","title":"SynTypeDefnTrivia","content":"SynTypeDefnTrivia \n\n Represents additional information for SynTypeDefn\n \nSynTypeDefnTrivia.Zero \nZero \nSynTypeDefnTrivia.TypeKeyword \nTypeKeyword \nSynTypeDefnTrivia.EqualsRange \nEqualsRange \nSynTypeDefnTrivia.WithKeyword \nWithKeyword"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#Zero","title":"SynTypeDefnTrivia.Zero","content":"SynTypeDefnTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#TypeKeyword","title":"SynTypeDefnTrivia.TypeKeyword","content":"SynTypeDefnTrivia.TypeKeyword \nTypeKeyword \n\n The syntax range of the \u0060type\u0060 keyword.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#EqualsRange","title":"SynTypeDefnTrivia.EqualsRange","content":"SynTypeDefnTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypedefntrivia.html#WithKeyword","title":"SynTypeDefnTrivia.WithKeyword","content":"SynTypeDefnTrivia.WithKeyword \nWithKeyword \n\n The syntax range of the \u0060with\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypefuntrivia.html","title":"SynTypeFunTrivia","content":"SynTypeFunTrivia \n\n Represents additional information for SynType.Fun\n \nSynTypeFunTrivia.ArrowRange \nArrowRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-syntypefuntrivia.html#ArrowRange","title":"SynTypeFunTrivia.ArrowRange","content":"SynTypeFunTrivia.ArrowRange \nArrowRange \n\n The syntax range of the \u0060-\u003E\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synunioncasetrivia.html","title":"SynUnionCaseTrivia","content":"SynUnionCaseTrivia \n\n Represents additional information for SynUnionCase\n \nSynUnionCaseTrivia.BarRange \nBarRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synunioncasetrivia.html#BarRange","title":"SynUnionCaseTrivia.BarRange","content":"SynUnionCaseTrivia.BarRange \nBarRange \n\n The syntax range of the \u0060|\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html","title":"SynValSigTrivia","content":"SynValSigTrivia \n\n Represents additional information for SynValSig\n \nSynValSigTrivia.Zero \nZero \nSynValSigTrivia.ValKeyword \nValKeyword \nSynValSigTrivia.WithKeyword \nWithKeyword \nSynValSigTrivia.EqualsRange \nEqualsRange"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#Zero","title":"SynValSigTrivia.Zero","content":"SynValSigTrivia.Zero \nZero \n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#ValKeyword","title":"SynValSigTrivia.ValKeyword","content":"SynValSigTrivia.ValKeyword \nValKeyword \n\n The syntax range of the \u0060val\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#WithKeyword","title":"SynValSigTrivia.WithKeyword","content":"SynValSigTrivia.WithKeyword \nWithKeyword \n\n The syntax range of the \u0060with\u0060 keyword\n"},{"uri":"/fantomas/reference/fsharp-compiler-syntaxtrivia-synvalsigtrivia.html#EqualsRange","title":"SynValSigTrivia.EqualsRange","content":"SynValSigTrivia.EqualsRange \nEqualsRange \n\n The syntax range of the \u0060=\u0060 token.\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-line.html","title":"Line","content":"Line \n\n Functions related to converting between lines indexed at 0 and 1\n \nLine.fromZ \nfromZ \nLine.toZ \ntoZ"},{"uri":"/fantomas/reference/fsharp-compiler-text-line.html#fromZ","title":"Line.fromZ","content":"Line.fromZ \nfromZ \n\n Convert a line number from zero-based line counting (used by Visual Studio) to one-based line counting (used internally in the F# compiler and in F# error messages) \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-line.html#toZ","title":"Line.toZ","content":"Line.toZ \ntoZ \n\n Convert a line number from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html","title":"Position","content":"Position \n \nPosition.mkPos \nmkPos \nPosition.posLt \nposLt \nPosition.posGt \nposGt \nPosition.posEq \nposEq \nPosition.posGeq \nposGeq \nPosition.fromZ \nfromZ \nPosition.toZ \ntoZ \nPosition.outputPos \noutputPos \nPosition.stringOfPos \nstringOfPos \nPosition.pos0 \npos0"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#mkPos","title":"Position.mkPos","content":"Position.mkPos \nmkPos \n\n Create a position for the given line and column\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#posLt","title":"Position.posLt","content":"Position.posLt \nposLt \n\n Compare positions for less-than\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#posGt","title":"Position.posGt","content":"Position.posGt \nposGt \n\n Compare positions for greater-than\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#posEq","title":"Position.posEq","content":"Position.posEq \nposEq \n\n Compare positions for equality\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#posGeq","title":"Position.posGeq","content":"Position.posGeq \nposGeq \n\n Compare positions for greater-than-or-equal-to\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#fromZ","title":"Position.fromZ","content":"Position.fromZ \nfromZ \n\n Convert a position from zero-based line counting (used by Visual Studio) to one-based line counting (used internally in the F# compiler and in F# error messages) \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#toZ","title":"Position.toZ","content":"Position.toZ \ntoZ \n\n Convert a position from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#outputPos","title":"Position.outputPos","content":"Position.outputPos \noutputPos \n\n Output a position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#stringOfPos","title":"Position.stringOfPos","content":"Position.stringOfPos \nstringOfPos \n\n Convert a position to a string\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-positionmodule.html#pos0","title":"Position.pos0","content":"Position.pos0 \npos0 \n\n The zero position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html","title":"Range","content":"Range \n \nRange.posOrder \nposOrder \nRange.mkFileIndexRange \nmkFileIndexRange \nRange.mkRange \nmkRange \nRange.mkFirstLineOfFile \nmkFirstLineOfFile \nRange.equals \nequals \nRange.trimRangeToLine \ntrimRangeToLine \nRange.rangeOrder \nrangeOrder \nRange.outputRange \noutputRange \nRange.unionRanges \nunionRanges \nRange.rangeContainsRange \nrangeContainsRange \nRange.rangeContainsPos \nrangeContainsPos \nRange.rangeBeforePos \nrangeBeforePos \nRange.rangeN \nrangeN \nRange.range0 \nrange0 \nRange.rangeStartup \nrangeStartup \nRange.rangeCmdArgs \nrangeCmdArgs \nRange.stringOfRange \nstringOfRange \nRange.toZ \ntoZ \nRange.toFileZ \ntoFileZ \nRange.comparer \ncomparer"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#posOrder","title":"Range.posOrder","content":"Range.posOrder \nposOrder \n\n Ordering on positions\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#mkFileIndexRange","title":"Range.mkFileIndexRange","content":"Range.mkFileIndexRange \nmkFileIndexRange \n\n This view of range marks uses file indexes explicitly \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#mkRange","title":"Range.mkRange","content":"Range.mkRange \nmkRange \n\n This view hides the use of file indexes and just uses filenames \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#mkFirstLineOfFile","title":"Range.mkFirstLineOfFile","content":"Range.mkFirstLineOfFile \nmkFirstLineOfFile \n\n Make a range for the first non-whitespace line of the file if any. Otherwise use line 1 chars 0-80.\n This involves reading the file.\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#equals","title":"Range.equals","content":"Range.equals \nequals \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#trimRangeToLine","title":"Range.trimRangeToLine","content":"Range.trimRangeToLine \ntrimRangeToLine \n\n Reduce a range so it only covers a line\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#rangeOrder","title":"Range.rangeOrder","content":"Range.rangeOrder \nrangeOrder \n\n Order ranges (file, then start pos, then end pos)\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#outputRange","title":"Range.outputRange","content":"Range.outputRange \noutputRange \n\n Output a range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#unionRanges","title":"Range.unionRanges","content":"Range.unionRanges \nunionRanges \n\n Union two ranges, taking their first occurring start position and last occurring end position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#rangeContainsRange","title":"Range.rangeContainsRange","content":"Range.rangeContainsRange \nrangeContainsRange \n\n Test to see if one range contains another range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#rangeContainsPos","title":"Range.rangeContainsPos","content":"Range.rangeContainsPos \nrangeContainsPos \n\n Test to see if a range contains a position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#rangeBeforePos","title":"Range.rangeBeforePos","content":"Range.rangeBeforePos \nrangeBeforePos \n\n Test to see if a range occurs fully before a position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#rangeN","title":"Range.rangeN","content":"Range.rangeN \nrangeN \n\n Make a dummy range for a file\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#range0","title":"Range.range0","content":"Range.range0 \nrange0 \n\n The zero range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#rangeStartup","title":"Range.rangeStartup","content":"Range.rangeStartup \nrangeStartup \n\n A range associated with a dummy file called \u0022startup\u0022\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#rangeCmdArgs","title":"Range.rangeCmdArgs","content":"Range.rangeCmdArgs \nrangeCmdArgs \n\n A range associated with a dummy file for the command line arguments\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#stringOfRange","title":"Range.stringOfRange","content":"Range.stringOfRange \nstringOfRange \n\n Convert a range to a string\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#toZ","title":"Range.toZ","content":"Range.toZ \ntoZ \n\n Convert a range from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#toFileZ","title":"Range.toFileZ","content":"Range.toFileZ \ntoFileZ \n\n Convert a range from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-rangemodule.html#comparer","title":"Range.comparer","content":"Range.comparer \ncomparer \n\n Equality comparer for range.\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-sourcetext.html","title":"SourceText","content":"SourceText \n\n Functions related to ISourceText objects\n \nSourceText.ofString \nofString"},{"uri":"/fantomas/reference/fsharp-compiler-text-sourcetext.html#ofString","title":"SourceText.ofString","content":"SourceText.ofString \nofString \n\n Creates an ISourceText object from the given string\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html","title":"TaggedText","content":"TaggedText \n \nTaggedText.tagText \ntagText \nTaggedText.tagClass \ntagClass \nTaggedText.comma \ncomma \nTaggedText.tagNamespace \ntagNamespace \nTaggedText.tagParameter \ntagParameter \nTaggedText.tagSpace \ntagSpace \nTaggedText.dot \ndot \nTaggedText.colon \ncolon \nTaggedText.minus \nminus \nTaggedText.lineBreak \nlineBreak \nTaggedText.space \nspace"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#tagText","title":"TaggedText.tagText","content":"TaggedText.tagText \ntagText \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#tagClass","title":"TaggedText.tagClass","content":"TaggedText.tagClass \ntagClass \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#comma","title":"TaggedText.comma","content":"TaggedText.comma \ncomma \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#tagNamespace","title":"TaggedText.tagNamespace","content":"TaggedText.tagNamespace \ntagNamespace \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#tagParameter","title":"TaggedText.tagParameter","content":"TaggedText.tagParameter \ntagParameter \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#tagSpace","title":"TaggedText.tagSpace","content":"TaggedText.tagSpace \ntagSpace \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#dot","title":"TaggedText.dot","content":"TaggedText.dot \ndot \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#colon","title":"TaggedText.colon","content":"TaggedText.colon \ncolon \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#minus","title":"TaggedText.minus","content":"TaggedText.minus \nminus \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#lineBreak","title":"TaggedText.lineBreak","content":"TaggedText.lineBreak \nlineBreak \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtextmodule.html#space","title":"TaggedText.space","content":"TaggedText.space \nspace \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html","title":"ISourceText","content":"ISourceText \n\n Represents an input to the F# compiler\n \nISourceText.ContentEquals \nContentEquals \nISourceText.CopyTo \nCopyTo \nISourceText.GetLastCharacterPosition \nGetLastCharacterPosition \nISourceText.GetLineCount \nGetLineCount \nISourceText.GetLineString \nGetLineString \nISourceText.GetSubTextString \nGetSubTextString \nISourceText.SubTextEquals \nSubTextEquals \nISourceText.Length \nLength \nISourceText.Item \nItem"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#ContentEquals","title":"ISourceText.ContentEquals","content":"ISourceText.ContentEquals \nContentEquals \n\n Checks if one input is equal to another\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#CopyTo","title":"ISourceText.CopyTo","content":"ISourceText.CopyTo \nCopyTo \n\n Copies a section of the input to the given destination ad the given index\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#GetLastCharacterPosition","title":"ISourceText.GetLastCharacterPosition","content":"ISourceText.GetLastCharacterPosition \nGetLastCharacterPosition \n\n Gets the last character position in the input, returning line and column\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#GetLineCount","title":"ISourceText.GetLineCount","content":"ISourceText.GetLineCount \nGetLineCount \n\n Gets the count of lines in the input\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#GetLineString","title":"ISourceText.GetLineString","content":"ISourceText.GetLineString \nGetLineString \n\n Gets a line of an input by index\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#GetSubTextString","title":"ISourceText.GetSubTextString","content":"ISourceText.GetSubTextString \nGetSubTextString \n\n Gets a section of the input\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#SubTextEquals","title":"ISourceText.SubTextEquals","content":"ISourceText.SubTextEquals \nSubTextEquals \n\n Checks if a section of the input is equal to the given string\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#Length","title":"ISourceText.Length","content":"ISourceText.Length \nLength \n\n Gets the total length of the input in characters\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-isourcetext.html#Item","title":"ISourceText.Item","content":"ISourceText.Item \nItem \n\n Gets a character in an input based on an index of characters from the start of the file\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-line0.html","title":"Line0","content":"Line0 \n\n Represents a line number when using zero-based line counting (used by Visual Studio)\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-navigabletaggedtext.html","title":"NavigableTaggedText","content":"NavigableTaggedText \n\n An enhancement to TaggedText in the TaggedText layouts generated by FSharp.Compiler.Service\n \nNavigableTaggedText.Range \nRange"},{"uri":"/fantomas/reference/fsharp-compiler-text-navigabletaggedtext.html#Range","title":"NavigableTaggedText.Range","content":"NavigableTaggedText.Range \nRange \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-position.html","title":"Position","content":"Position \n\n Represents a position in a file\n \nPosition.Column \nColumn \nPosition.Line \nLine"},{"uri":"/fantomas/reference/fsharp-compiler-text-position.html#Column","title":"Position.Column","content":"Position.Column \nColumn \n\n The column number for the position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-position.html#Line","title":"Position.Line","content":"Position.Line \nLine \n\n The line number for the position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-position01.html","title":"Position01","content":"Position01 \n\n Represents a position using zero-based line counting (used by Visual Studio)\n \nPosition01.Item1 \nItem1 \nPosition01.Item2 \nItem2"},{"uri":"/fantomas/reference/fsharp-compiler-text-position01.html#Item1","title":"Position01.Item1","content":"Position01.Item1 \nItem1 \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-position01.html#Item2","title":"Position01.Item2","content":"Position01.Item2 \nItem2 \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html","title":"Range","content":"Range \n\n Represents a range within a file\n \nRange.EndRange \nEndRange \nRange.StartColumn \nStartColumn \nRange.End \nEnd \nRange.Start \nStart \nRange.StartLine \nStartLine \nRange.StartRange \nStartRange \nRange.EndColumn \nEndColumn \nRange.EndLine \nEndLine \nRange.FileName \nFileName \nRange.IsSynthetic \nIsSynthetic \nRange.Zero \nZero"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#EndRange","title":"Range.EndRange","content":"Range.EndRange \nEndRange \n\n The empty range that is located at the end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#StartColumn","title":"Range.StartColumn","content":"Range.StartColumn \nStartColumn \n\n The start column of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#End","title":"Range.End","content":"Range.End \nEnd \n\n The end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#Start","title":"Range.Start","content":"Range.Start \nStart \n\n The start position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#StartLine","title":"Range.StartLine","content":"Range.StartLine \nStartLine \n\n The start line of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#StartRange","title":"Range.StartRange","content":"Range.StartRange \nStartRange \n\n The empty range that is located at the start position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#EndColumn","title":"Range.EndColumn","content":"Range.EndColumn \nEndColumn \n\n The column number for the end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#EndLine","title":"Range.EndLine","content":"Range.EndLine \nEndLine \n\n The line number for the end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#FileName","title":"Range.FileName","content":"Range.FileName \nFileName \n\n The file name for the file of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#IsSynthetic","title":"Range.IsSynthetic","content":"Range.IsSynthetic \nIsSynthetic \n\n Synthetic marks ranges which are produced by intermediate compilation phases. This\n bit signifies that the range covers something that should not be visible to language\n service operations like dot-completion.\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range.html#Zero","title":"Range.Zero","content":"Range.Zero \nZero \n\n The range where all values are zero\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range01.html","title":"Range01","content":"Range01 \n\n Represents a range using zero-based line counting (used by Visual Studio)\n \nRange01.Item1 \nItem1 \nRange01.Item2 \nItem2"},{"uri":"/fantomas/reference/fsharp-compiler-text-range01.html#Item1","title":"Range01.Item1","content":"Range01.Item1 \nItem1 \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range01.html#Item2","title":"Range01.Item2","content":"Range01.Item2 \nItem2 \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtext.html","title":"TaggedText","content":"TaggedText \n\n Represents text with a tag\n \nTaggedText.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTaggedText.Text \nText \nTaggedText.Tag \nTag"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtext.html#\u0060\u0060.ctor\u0060\u0060","title":"TaggedText.\u0060\u0060.ctor\u0060\u0060","content":"TaggedText.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n\n Creates text with a tag\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtext.html#Text","title":"TaggedText.Text","content":"TaggedText.Text \nText \n\n Gets the text\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-taggedtext.html#Tag","title":"TaggedText.Tag","content":"TaggedText.Tag \nTag \n\n Gets the tag\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html","title":"TextTag","content":"TextTag \n\n Represents the tag of some tagged text\n \nTextTag.ActivePatternCase \nActivePatternCase \nTextTag.ActivePatternResult \nActivePatternResult \nTextTag.Alias \nAlias \nTextTag.Class \nClass \nTextTag.Union \nUnion \nTextTag.UnionCase \nUnionCase \nTextTag.Delegate \nDelegate \nTextTag.Enum \nEnum \nTextTag.Event \nEvent \nTextTag.Field \nField \nTextTag.Interface \nInterface \nTextTag.Keyword \nKeyword \nTextTag.LineBreak \nLineBreak \nTextTag.Local \nLocal \nTextTag.Record \nRecord \nTextTag.RecordField \nRecordField \nTextTag.Method \nMethod \nTextTag.Member \nMember \nTextTag.ModuleBinding \nModuleBinding \nTextTag.Function \nFunction \nTextTag.Module \nModule \nTextTag.Namespace \nNamespace \nTextTag.NumericLiteral \nNumericLiteral \nTextTag.Operator \nOperator \nTextTag.Parameter \nParameter \nTextTag.Property \nProperty \nTextTag.Space \nSpace \nTextTag.StringLiteral \nStringLiteral \nTextTag.Struct \nStruct \nTextTag.TypeParameter \nTypeParameter \nTextTag.Text \nText \nTextTag.Punctuation \nPunctuation \nTextTag.UnknownType \nUnknownType \nTextTag.UnknownEntity \nUnknownEntity"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#ActivePatternCase","title":"TextTag.ActivePatternCase","content":"TextTag.ActivePatternCase \nActivePatternCase \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#ActivePatternResult","title":"TextTag.ActivePatternResult","content":"TextTag.ActivePatternResult \nActivePatternResult \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Alias","title":"TextTag.Alias","content":"TextTag.Alias \nAlias \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Class","title":"TextTag.Class","content":"TextTag.Class \nClass \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Union","title":"TextTag.Union","content":"TextTag.Union \nUnion \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#UnionCase","title":"TextTag.UnionCase","content":"TextTag.UnionCase \nUnionCase \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Delegate","title":"TextTag.Delegate","content":"TextTag.Delegate \nDelegate \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Enum","title":"TextTag.Enum","content":"TextTag.Enum \nEnum \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Event","title":"TextTag.Event","content":"TextTag.Event \nEvent \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Field","title":"TextTag.Field","content":"TextTag.Field \nField \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Interface","title":"TextTag.Interface","content":"TextTag.Interface \nInterface \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Keyword","title":"TextTag.Keyword","content":"TextTag.Keyword \nKeyword \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#LineBreak","title":"TextTag.LineBreak","content":"TextTag.LineBreak \nLineBreak \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Local","title":"TextTag.Local","content":"TextTag.Local \nLocal \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Record","title":"TextTag.Record","content":"TextTag.Record \nRecord \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#RecordField","title":"TextTag.RecordField","content":"TextTag.RecordField \nRecordField \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Method","title":"TextTag.Method","content":"TextTag.Method \nMethod \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Member","title":"TextTag.Member","content":"TextTag.Member \nMember \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#ModuleBinding","title":"TextTag.ModuleBinding","content":"TextTag.ModuleBinding \nModuleBinding \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Function","title":"TextTag.Function","content":"TextTag.Function \nFunction \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Module","title":"TextTag.Module","content":"TextTag.Module \nModule \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Namespace","title":"TextTag.Namespace","content":"TextTag.Namespace \nNamespace \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#NumericLiteral","title":"TextTag.NumericLiteral","content":"TextTag.NumericLiteral \nNumericLiteral \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Operator","title":"TextTag.Operator","content":"TextTag.Operator \nOperator \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Parameter","title":"TextTag.Parameter","content":"TextTag.Parameter \nParameter \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Property","title":"TextTag.Property","content":"TextTag.Property \nProperty \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Space","title":"TextTag.Space","content":"TextTag.Space \nSpace \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#StringLiteral","title":"TextTag.StringLiteral","content":"TextTag.StringLiteral \nStringLiteral \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Struct","title":"TextTag.Struct","content":"TextTag.Struct \nStruct \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#TypeParameter","title":"TextTag.TypeParameter","content":"TextTag.TypeParameter \nTypeParameter \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Text","title":"TextTag.Text","content":"TextTag.Text \nText \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#Punctuation","title":"TextTag.Punctuation","content":"TextTag.Punctuation \nPunctuation \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#UnknownType","title":"TextTag.UnknownType","content":"TextTag.UnknownType \nUnknownType \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-texttag.html#UnknownEntity","title":"TextTag.UnknownEntity","content":"TextTag.UnknownEntity \nUnknownEntity \n"},{"uri":"/fantomas/reference/fsharp-compiler-text-pos.html","title":"pos","content":"pos \n\n Represents a position in a file\n \npos.Column \nColumn \npos.Line \nLine"},{"uri":"/fantomas/reference/fsharp-compiler-text-pos.html#Column","title":"pos.Column","content":"pos.Column \nColumn \n\n The column number for the position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-pos.html#Line","title":"pos.Line","content":"pos.Line \nLine \n\n The line number for the position\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html","title":"range","content":"range \n\n Represents a range within a file\n \nrange.EndRange \nEndRange \nrange.StartColumn \nStartColumn \nrange.End \nEnd \nrange.Start \nStart \nrange.StartLine \nStartLine \nrange.StartRange \nStartRange \nrange.EndColumn \nEndColumn \nrange.EndLine \nEndLine \nrange.FileName \nFileName \nrange.IsSynthetic \nIsSynthetic \nrange.Zero \nZero"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#EndRange","title":"range.EndRange","content":"range.EndRange \nEndRange \n\n The empty range that is located at the end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#StartColumn","title":"range.StartColumn","content":"range.StartColumn \nStartColumn \n\n The start column of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#End","title":"range.End","content":"range.End \nEnd \n\n The end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#Start","title":"range.Start","content":"range.Start \nStart \n\n The start position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#StartLine","title":"range.StartLine","content":"range.StartLine \nStartLine \n\n The start line of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#StartRange","title":"range.StartRange","content":"range.StartRange \nStartRange \n\n The empty range that is located at the start position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#EndColumn","title":"range.EndColumn","content":"range.EndColumn \nEndColumn \n\n The column number for the end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#EndLine","title":"range.EndLine","content":"range.EndLine \nEndLine \n\n The line number for the end position of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#FileName","title":"range.FileName","content":"range.FileName \nFileName \n\n The file name for the file of the range\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#IsSynthetic","title":"range.IsSynthetic","content":"range.IsSynthetic \nIsSynthetic \n\n Synthetic marks ranges which are produced by intermediate compilation phases. This\n bit signifies that the range covers something that should not be visible to language\n service operations like dot-completion.\n"},{"uri":"/fantomas/reference/fsharp-compiler-text-range-0.html#Zero","title":"range.Zero","content":"range.Zero \nZero \n\n The range where all values are zero\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-prexmldoc.html","title":"PreXmlDoc","content":"PreXmlDoc \n\n Represents the XmlDoc fragments as collected from the lexer during parsing\n \nPreXmlDoc.ToXmlDoc \nToXmlDoc \nPreXmlDoc.IsEmpty \nIsEmpty \nPreXmlDoc.Create \nCreate \nPreXmlDoc.Merge \nMerge \nPreXmlDoc.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-xml-prexmldoc.html#ToXmlDoc","title":"PreXmlDoc.ToXmlDoc","content":"PreXmlDoc.ToXmlDoc \nToXmlDoc \n\n Process and check the PreXmlDoc, checking with respect to the given parameter names\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-prexmldoc.html#IsEmpty","title":"PreXmlDoc.IsEmpty","content":"PreXmlDoc.IsEmpty \nIsEmpty \n\n Indicates if the PreXmlDoc is non-empty\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-prexmldoc.html#Create","title":"PreXmlDoc.Create","content":"PreXmlDoc.Create \nCreate \n\n Create a PreXmlDoc from a collection of unprocessed lines\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-prexmldoc.html#Merge","title":"PreXmlDoc.Merge","content":"PreXmlDoc.Merge \nMerge \n\n Merge two PreXmlDoc\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-prexmldoc.html#Empty","title":"PreXmlDoc.Empty","content":"PreXmlDoc.Empty \nEmpty \n\n Get the empty PreXmlDoc\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html","title":"XmlDoc","content":"XmlDoc \n\n Represents collected XmlDoc lines\n \nXmlDoc.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nXmlDoc.GetElaboratedXmlLines \nGetElaboratedXmlLines \nXmlDoc.GetXmlText \nGetXmlText \nXmlDoc.NonEmpty \nNonEmpty \nXmlDoc.Range \nRange \nXmlDoc.IsEmpty \nIsEmpty \nXmlDoc.UnprocessedLines \nUnprocessedLines \nXmlDoc.Merge \nMerge \nXmlDoc.Empty \nEmpty"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#\u0060\u0060.ctor\u0060\u0060","title":"XmlDoc.\u0060\u0060.ctor\u0060\u0060","content":"XmlDoc.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#GetElaboratedXmlLines","title":"XmlDoc.GetElaboratedXmlLines","content":"XmlDoc.GetElaboratedXmlLines \nGetElaboratedXmlLines \n\n Get the lines after insertion of implicit summary tags and encoding\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#GetXmlText","title":"XmlDoc.GetXmlText","content":"XmlDoc.GetXmlText \nGetXmlText \n\n Get the elaborated XML documentation as XML text\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#NonEmpty","title":"XmlDoc.NonEmpty","content":"XmlDoc.NonEmpty \nNonEmpty \n\n Indicates if the XmlDoc is non-empty\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#Range","title":"XmlDoc.Range","content":"XmlDoc.Range \nRange \n\n Indicates the overall original source range of the XmlDoc\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#IsEmpty","title":"XmlDoc.IsEmpty","content":"XmlDoc.IsEmpty \nIsEmpty \n\n Indicates if the XmlDoc is empty\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#UnprocessedLines","title":"XmlDoc.UnprocessedLines","content":"XmlDoc.UnprocessedLines \nUnprocessedLines \n\n Get the lines before insertion of implicit summary tags and encoding\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#Merge","title":"XmlDoc.Merge","content":"XmlDoc.Merge \nMerge \n\n Merge two XML documentation\n"},{"uri":"/fantomas/reference/fsharp-compiler-xml-xmldoc.html#Empty","title":"XmlDoc.Empty","content":"XmlDoc.Empty \nEmpty \n\n Get the empty XmlDoc\n"},{"uri":"/fantomas/reference/fantomas-client-contracts.html","title":"Contracts","content":"Contracts \n \nContracts.Methods \nMethods \nContracts.FantomasResponse \nFantomasResponse \nContracts.FantomasService \nFantomasService \nContracts.FormatDocumentRequest \nFormatDocumentRequest \nContracts.FormatSelectionRange \nFormatSelectionRange \nContracts.FormatSelectionRequest \nFormatSelectionRequest"},{"uri":"/fantomas/reference/fantomas-client-contracts-methods.html","title":"Methods","content":"Methods \n \nMethods.Version \nVersion \nMethods.FormatDocument \nFormatDocument \nMethods.FormatSelection \nFormatSelection \nMethods.Configuration \nConfiguration"},{"uri":"/fantomas/reference/fantomas-client-contracts-methods.html#Version","title":"Methods.Version","content":"Methods.Version \nVersion \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-methods.html#FormatDocument","title":"Methods.FormatDocument","content":"Methods.FormatDocument \nFormatDocument \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-methods.html#FormatSelection","title":"Methods.FormatSelection","content":"Methods.FormatSelection \nFormatSelection \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-methods.html#Configuration","title":"Methods.Configuration","content":"Methods.Configuration \nConfiguration \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasresponse.html","title":"FantomasResponse","content":"FantomasResponse \n \nFantomasResponse.Code \nCode \nFantomasResponse.FilePath \nFilePath \nFantomasResponse.Content \nContent \nFantomasResponse.SelectedRange \nSelectedRange"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasresponse.html#Code","title":"FantomasResponse.Code","content":"FantomasResponse.Code \nCode \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasresponse.html#FilePath","title":"FantomasResponse.FilePath","content":"FantomasResponse.FilePath \nFilePath \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasresponse.html#Content","title":"FantomasResponse.Content","content":"FantomasResponse.Content \nContent \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasresponse.html#SelectedRange","title":"FantomasResponse.SelectedRange","content":"FantomasResponse.SelectedRange \nSelectedRange \n\n The actual range that was used to format a selection.\n This can differ from the input selection range if the selection had leading or trailing whitespace.\n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasservice.html","title":"FantomasService","content":"FantomasService \n \nFantomasService.ClearCache \nClearCache \nFantomasService.ConfigurationAsync \nConfigurationAsync \nFantomasService.FormatDocumentAsync \nFormatDocumentAsync \nFantomasService.FormatSelectionAsync \nFormatSelectionAsync \nFantomasService.VersionAsync \nVersionAsync"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasservice.html#ClearCache","title":"FantomasService.ClearCache","content":"FantomasService.ClearCache \nClearCache \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasservice.html#ConfigurationAsync","title":"FantomasService.ConfigurationAsync","content":"FantomasService.ConfigurationAsync \nConfigurationAsync \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasservice.html#FormatDocumentAsync","title":"FantomasService.FormatDocumentAsync","content":"FantomasService.FormatDocumentAsync \nFormatDocumentAsync \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasservice.html#FormatSelectionAsync","title":"FantomasService.FormatSelectionAsync","content":"FantomasService.FormatSelectionAsync \nFormatSelectionAsync \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-fantomasservice.html#VersionAsync","title":"FantomasService.VersionAsync","content":"FantomasService.VersionAsync \nVersionAsync \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatdocumentrequest.html","title":"FormatDocumentRequest","content":"FormatDocumentRequest \n \nFormatDocumentRequest.IsSignatureFile \nIsSignatureFile \nFormatDocumentRequest.SourceCode \nSourceCode \nFormatDocumentRequest.FilePath \nFilePath \nFormatDocumentRequest.Config \nConfig"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatdocumentrequest.html#IsSignatureFile","title":"FormatDocumentRequest.IsSignatureFile","content":"FormatDocumentRequest.IsSignatureFile \nIsSignatureFile \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatdocumentrequest.html#SourceCode","title":"FormatDocumentRequest.SourceCode","content":"FormatDocumentRequest.SourceCode \nSourceCode \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatdocumentrequest.html#FilePath","title":"FormatDocumentRequest.FilePath","content":"FormatDocumentRequest.FilePath \nFilePath \n\n File path will be used to identify the .editorconfig options\n Unless the configuration is passed\n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatdocumentrequest.html#Config","title":"FormatDocumentRequest.Config","content":"FormatDocumentRequest.Config \nConfig \n\n Overrides the found .editorconfig.\n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrange.html","title":"FormatSelectionRange","content":"FormatSelectionRange \n \nFormatSelectionRange.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFormatSelectionRange.StartLine \nStartLine \nFormatSelectionRange.StartColumn \nStartColumn \nFormatSelectionRange.EndLine \nEndLine \nFormatSelectionRange.EndColumn \nEndColumn"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrange.html#\u0060\u0060.ctor\u0060\u0060","title":"FormatSelectionRange.\u0060\u0060.ctor\u0060\u0060","content":"FormatSelectionRange.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrange.html#StartLine","title":"FormatSelectionRange.StartLine","content":"FormatSelectionRange.StartLine \nStartLine \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrange.html#StartColumn","title":"FormatSelectionRange.StartColumn","content":"FormatSelectionRange.StartColumn \nStartColumn \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrange.html#EndLine","title":"FormatSelectionRange.EndLine","content":"FormatSelectionRange.EndLine \nEndLine \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrange.html#EndColumn","title":"FormatSelectionRange.EndColumn","content":"FormatSelectionRange.EndColumn \nEndColumn \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrequest.html","title":"FormatSelectionRequest","content":"FormatSelectionRequest \n \nFormatSelectionRequest.IsSignatureFile \nIsSignatureFile \nFormatSelectionRequest.SourceCode \nSourceCode \nFormatSelectionRequest.FilePath \nFilePath \nFormatSelectionRequest.Config \nConfig \nFormatSelectionRequest.Range \nRange"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrequest.html#IsSignatureFile","title":"FormatSelectionRequest.IsSignatureFile","content":"FormatSelectionRequest.IsSignatureFile \nIsSignatureFile \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrequest.html#SourceCode","title":"FormatSelectionRequest.SourceCode","content":"FormatSelectionRequest.SourceCode \nSourceCode \n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrequest.html#FilePath","title":"FormatSelectionRequest.FilePath","content":"FormatSelectionRequest.FilePath \nFilePath \n\n File path will be used to identify the .editorconfig options\n Unless the configuration is passed\n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrequest.html#Config","title":"FormatSelectionRequest.Config","content":"FormatSelectionRequest.Config \nConfig \n\n Overrides the found .editorconfig.\n"},{"uri":"/fantomas/reference/fantomas-client-contracts-formatselectionrequest.html#Range","title":"FormatSelectionRequest.Range","content":"FormatSelectionRequest.Range \nRange \n\n Range follows the same semantics of the FSharp Compiler Range type.\n"},{"uri":"/fantomas/reference/fantomas-client-fantomastoollocator.html","title":"FantomasToolLocator","content":"FantomasToolLocator \n \nFantomasToolLocator.findFantomasTool \nfindFantomasTool \nFantomasToolLocator.createFor \ncreateFor"},{"uri":"/fantomas/reference/fantomas-client-fantomastoollocator.html#findFantomasTool","title":"FantomasToolLocator.findFantomasTool","content":"FantomasToolLocator.findFantomasTool \nfindFantomasTool \n"},{"uri":"/fantomas/reference/fantomas-client-fantomastoollocator.html#createFor","title":"FantomasToolLocator.createFor","content":"FantomasToolLocator.createFor \ncreateFor \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice.html","title":"LSPFantomasService","content":"LSPFantomasService \n \nLSPFantomasService.FantomasServiceError \nFantomasServiceError \nLSPFantomasService.LSPFantomasService \nLSPFantomasService \nLSPFantomasService.Msg \nMsg \nLSPFantomasService.isPathAbsolute \nisPathAbsolute \nLSPFantomasService.mapResultToResponse \nmapResultToResponse"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice.html#isPathAbsolute","title":"LSPFantomasService.isPathAbsolute","content":"LSPFantomasService.isPathAbsolute \nisPathAbsolute \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice.html#mapResultToResponse","title":"LSPFantomasService.mapResultToResponse","content":"LSPFantomasService.mapResultToResponse \nmapResultToResponse \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-fantomasserviceerror.html","title":"FantomasServiceError","content":"FantomasServiceError \n \nFantomasServiceError.DaemonNotFound \nDaemonNotFound \nFantomasServiceError.FileDoesNotExist \nFileDoesNotExist \nFantomasServiceError.FilePathIsNotAbsolute \nFilePathIsNotAbsolute \nFantomasServiceError.CancellationWasRequested \nCancellationWasRequested"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-fantomasserviceerror.html#DaemonNotFound","title":"FantomasServiceError.DaemonNotFound","content":"FantomasServiceError.DaemonNotFound \nDaemonNotFound \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-fantomasserviceerror.html#FileDoesNotExist","title":"FantomasServiceError.FileDoesNotExist","content":"FantomasServiceError.FileDoesNotExist \nFileDoesNotExist \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-fantomasserviceerror.html#FilePathIsNotAbsolute","title":"FantomasServiceError.FilePathIsNotAbsolute","content":"FantomasServiceError.FilePathIsNotAbsolute \nFilePathIsNotAbsolute \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-fantomasserviceerror.html#CancellationWasRequested","title":"FantomasServiceError.CancellationWasRequested","content":"FantomasServiceError.CancellationWasRequested \nCancellationWasRequested \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-lspfantomasservice.html","title":"LSPFantomasService","content":"LSPFantomasService \n \nLSPFantomasService.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-lspfantomasservice.html#\u0060\u0060.ctor\u0060\u0060","title":"LSPFantomasService.\u0060\u0060.ctor\u0060\u0060","content":"LSPFantomasService.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-msg.html","title":"Msg","content":"Msg \n \nMsg.GetDaemon \nGetDaemon \nMsg.Reset \nReset"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-msg.html#GetDaemon","title":"Msg.GetDaemon","content":"Msg.GetDaemon \nGetDaemon \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservice-msg.html#Reset","title":"Msg.Reset","content":"Msg.Reset \nReset \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes.html","title":"LSPFantomasServiceTypes","content":"LSPFantomasServiceTypes \n \nLSPFantomasServiceTypes.DotNetToolListError \nDotNetToolListError \nLSPFantomasServiceTypes.FantomasExecutableFile \nFantomasExecutableFile \nLSPFantomasServiceTypes.FantomasResponseCode \nFantomasResponseCode \nLSPFantomasServiceTypes.FantomasToolError \nFantomasToolError \nLSPFantomasServiceTypes.FantomasToolFound \nFantomasToolFound \nLSPFantomasServiceTypes.FantomasToolStartInfo \nFantomasToolStartInfo \nLSPFantomasServiceTypes.FantomasVersion \nFantomasVersion \nLSPFantomasServiceTypes.Folder \nFolder \nLSPFantomasServiceTypes.FormatDocumentResponse \nFormatDocumentResponse \nLSPFantomasServiceTypes.FormatSelectionResponse \nFormatSelectionResponse \nLSPFantomasServiceTypes.GetDaemonError \nGetDaemonError \nLSPFantomasServiceTypes.ProcessStartError \nProcessStartError \nLSPFantomasServiceTypes.RunningFantomasTool \nRunningFantomasTool \nLSPFantomasServiceTypes.ServiceState \nServiceState"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-dotnettoollisterror.html","title":"DotNetToolListError","content":"DotNetToolListError \n \nDotNetToolListError.ProcessStartError \nProcessStartError \nDotNetToolListError.ExitCodeNonZero \nExitCodeNonZero"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-dotnettoollisterror.html#ProcessStartError","title":"DotNetToolListError.ProcessStartError","content":"DotNetToolListError.ProcessStartError \nProcessStartError \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-dotnettoollisterror.html#ExitCodeNonZero","title":"DotNetToolListError.ExitCodeNonZero","content":"DotNetToolListError.ExitCodeNonZero \nExitCodeNonZero \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasexecutablefile.html","title":"FantomasExecutableFile","content":"FantomasExecutableFile \n \nFantomasExecutableFile.FantomasExecutableFile \nFantomasExecutableFile"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasexecutablefile.html#FantomasExecutableFile","title":"FantomasExecutableFile.FantomasExecutableFile","content":"FantomasExecutableFile.FantomasExecutableFile \nFantomasExecutableFile \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html","title":"FantomasResponseCode","content":"FantomasResponseCode \n \nFantomasResponseCode.Formatted \nFormatted \nFantomasResponseCode.UnChanged \nUnChanged \nFantomasResponseCode.Error \nError \nFantomasResponseCode.Ignored \nIgnored \nFantomasResponseCode.Version \nVersion \nFantomasResponseCode.ToolNotFound \nToolNotFound \nFantomasResponseCode.FileNotFound \nFileNotFound \nFantomasResponseCode.Configuration \nConfiguration \nFantomasResponseCode.FilePathIsNotAbsolute \nFilePathIsNotAbsolute \nFantomasResponseCode.CancellationWasRequested \nCancellationWasRequested \nFantomasResponseCode.DaemonCreationFailed \nDaemonCreationFailed"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#Formatted","title":"FantomasResponseCode.Formatted","content":"FantomasResponseCode.Formatted \nFormatted \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#UnChanged","title":"FantomasResponseCode.UnChanged","content":"FantomasResponseCode.UnChanged \nUnChanged \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#Error","title":"FantomasResponseCode.Error","content":"FantomasResponseCode.Error \nError \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#Ignored","title":"FantomasResponseCode.Ignored","content":"FantomasResponseCode.Ignored \nIgnored \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#Version","title":"FantomasResponseCode.Version","content":"FantomasResponseCode.Version \nVersion \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#ToolNotFound","title":"FantomasResponseCode.ToolNotFound","content":"FantomasResponseCode.ToolNotFound \nToolNotFound \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#FileNotFound","title":"FantomasResponseCode.FileNotFound","content":"FantomasResponseCode.FileNotFound \nFileNotFound \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#Configuration","title":"FantomasResponseCode.Configuration","content":"FantomasResponseCode.Configuration \nConfiguration \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#FilePathIsNotAbsolute","title":"FantomasResponseCode.FilePathIsNotAbsolute","content":"FantomasResponseCode.FilePathIsNotAbsolute \nFilePathIsNotAbsolute \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#CancellationWasRequested","title":"FantomasResponseCode.CancellationWasRequested","content":"FantomasResponseCode.CancellationWasRequested \nCancellationWasRequested \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasresponsecode.html#DaemonCreationFailed","title":"FantomasResponseCode.DaemonCreationFailed","content":"FantomasResponseCode.DaemonCreationFailed \nDaemonCreationFailed \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolerror.html","title":"FantomasToolError","content":"FantomasToolError \n \nFantomasToolError.NoCompatibleVersionFound \nNoCompatibleVersionFound \nFantomasToolError.DotNetListError \nDotNetListError"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolerror.html#NoCompatibleVersionFound","title":"FantomasToolError.NoCompatibleVersionFound","content":"FantomasToolError.NoCompatibleVersionFound \nNoCompatibleVersionFound \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolerror.html#DotNetListError","title":"FantomasToolError.DotNetListError","content":"FantomasToolError.DotNetListError \nDotNetListError \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolfound.html","title":"FantomasToolFound","content":"FantomasToolFound \n \nFantomasToolFound.FantomasToolFound \nFantomasToolFound"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolfound.html#FantomasToolFound","title":"FantomasToolFound.FantomasToolFound","content":"FantomasToolFound.FantomasToolFound \nFantomasToolFound \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolstartinfo.html","title":"FantomasToolStartInfo","content":"FantomasToolStartInfo \n \nFantomasToolStartInfo.LocalTool \nLocalTool \nFantomasToolStartInfo.GlobalTool \nGlobalTool \nFantomasToolStartInfo.ToolOnPath \nToolOnPath"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolstartinfo.html#LocalTool","title":"FantomasToolStartInfo.LocalTool","content":"FantomasToolStartInfo.LocalTool \nLocalTool \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolstartinfo.html#GlobalTool","title":"FantomasToolStartInfo.GlobalTool","content":"FantomasToolStartInfo.GlobalTool \nGlobalTool \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomastoolstartinfo.html#ToolOnPath","title":"FantomasToolStartInfo.ToolOnPath","content":"FantomasToolStartInfo.ToolOnPath \nToolOnPath \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasversion.html","title":"FantomasVersion","content":"FantomasVersion \n \nFantomasVersion.FantomasVersion \nFantomasVersion"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-fantomasversion.html#FantomasVersion","title":"FantomasVersion.FantomasVersion","content":"FantomasVersion.FantomasVersion \nFantomasVersion \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-folder.html","title":"Folder","content":"Folder \n \nFolder.Folder \nFolder"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-folder.html#Folder","title":"Folder.Folder","content":"Folder.Folder \nFolder \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatdocumentresponse.html","title":"FormatDocumentResponse","content":"FormatDocumentResponse \n \nFormatDocumentResponse.AsFormatResponse \nAsFormatResponse \nFormatDocumentResponse.Formatted \nFormatted \nFormatDocumentResponse.Unchanged \nUnchanged \nFormatDocumentResponse.Error \nError \nFormatDocumentResponse.IgnoredFile \nIgnoredFile"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatdocumentresponse.html#AsFormatResponse","title":"FormatDocumentResponse.AsFormatResponse","content":"FormatDocumentResponse.AsFormatResponse \nAsFormatResponse \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatdocumentresponse.html#Formatted","title":"FormatDocumentResponse.Formatted","content":"FormatDocumentResponse.Formatted \nFormatted \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatdocumentresponse.html#Unchanged","title":"FormatDocumentResponse.Unchanged","content":"FormatDocumentResponse.Unchanged \nUnchanged \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatdocumentresponse.html#Error","title":"FormatDocumentResponse.Error","content":"FormatDocumentResponse.Error \nError \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatdocumentresponse.html#IgnoredFile","title":"FormatDocumentResponse.IgnoredFile","content":"FormatDocumentResponse.IgnoredFile \nIgnoredFile \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatselectionresponse.html","title":"FormatSelectionResponse","content":"FormatSelectionResponse \n \nFormatSelectionResponse.AsFormatResponse \nAsFormatResponse \nFormatSelectionResponse.Formatted \nFormatted \nFormatSelectionResponse.Error \nError"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatselectionresponse.html#AsFormatResponse","title":"FormatSelectionResponse.AsFormatResponse","content":"FormatSelectionResponse.AsFormatResponse \nAsFormatResponse \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatselectionresponse.html#Formatted","title":"FormatSelectionResponse.Formatted","content":"FormatSelectionResponse.Formatted \nFormatted \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-formatselectionresponse.html#Error","title":"FormatSelectionResponse.Error","content":"FormatSelectionResponse.Error \nError \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-getdaemonerror.html","title":"GetDaemonError","content":"GetDaemonError \n \nGetDaemonError.DotNetToolListError \nDotNetToolListError \nGetDaemonError.FantomasProcessStart \nFantomasProcessStart \nGetDaemonError.InCompatibleVersionFound \nInCompatibleVersionFound \nGetDaemonError.CompatibleVersionIsKnownButNoDaemonIsRunning \nCompatibleVersionIsKnownButNoDaemonIsRunning"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-getdaemonerror.html#DotNetToolListError","title":"GetDaemonError.DotNetToolListError","content":"GetDaemonError.DotNetToolListError \nDotNetToolListError \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-getdaemonerror.html#FantomasProcessStart","title":"GetDaemonError.FantomasProcessStart","content":"GetDaemonError.FantomasProcessStart \nFantomasProcessStart \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-getdaemonerror.html#InCompatibleVersionFound","title":"GetDaemonError.InCompatibleVersionFound","content":"GetDaemonError.InCompatibleVersionFound \nInCompatibleVersionFound \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-getdaemonerror.html#CompatibleVersionIsKnownButNoDaemonIsRunning","title":"GetDaemonError.CompatibleVersionIsKnownButNoDaemonIsRunning","content":"GetDaemonError.CompatibleVersionIsKnownButNoDaemonIsRunning \nCompatibleVersionIsKnownButNoDaemonIsRunning \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-processstarterror.html","title":"ProcessStartError","content":"ProcessStartError \n \nProcessStartError.ExecutableFileNotFound \nExecutableFileNotFound \nProcessStartError.UnExpectedException \nUnExpectedException"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-processstarterror.html#ExecutableFileNotFound","title":"ProcessStartError.ExecutableFileNotFound","content":"ProcessStartError.ExecutableFileNotFound \nExecutableFileNotFound \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-processstarterror.html#UnExpectedException","title":"ProcessStartError.UnExpectedException","content":"ProcessStartError.UnExpectedException \nUnExpectedException \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-runningfantomastool.html","title":"RunningFantomasTool","content":"RunningFantomasTool \n \nRunningFantomasTool.Process \nProcess \nRunningFantomasTool.RpcClient \nRpcClient \nRunningFantomasTool.StartInfo \nStartInfo"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-runningfantomastool.html#Process","title":"RunningFantomasTool.Process","content":"RunningFantomasTool.Process \nProcess \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-runningfantomastool.html#RpcClient","title":"RunningFantomasTool.RpcClient","content":"RunningFantomasTool.RpcClient \nRpcClient \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-runningfantomastool.html#StartInfo","title":"RunningFantomasTool.StartInfo","content":"RunningFantomasTool.StartInfo \nStartInfo \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-servicestate.html","title":"ServiceState","content":"ServiceState \n \nServiceState.Empty \nEmpty \nServiceState.Daemons \nDaemons \nServiceState.FolderToVersion \nFolderToVersion"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-servicestate.html#Empty","title":"ServiceState.Empty","content":"ServiceState.Empty \nEmpty \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-servicestate.html#Daemons","title":"ServiceState.Daemons","content":"ServiceState.Daemons \nDaemons \n"},{"uri":"/fantomas/reference/fantomas-client-lspfantomasservicetypes-servicestate.html#FolderToVersion","title":"ServiceState.FolderToVersion","content":"ServiceState.FolderToVersion \nFolderToVersion \n"},{"uri":"/fantomas/reference/fantomas-core-async.html","title":"Async","content":"Async \n \nAsync.map \nmap"},{"uri":"/fantomas/reference/fantomas-core-async.html#map","title":"Async.map","content":"Async.map \nmap \n"},{"uri":"/fantomas/reference/fantomas-core-cache.html","title":"Cache","content":"Cache \n \nCache.LambdaEqByRef\u003C\u0027a, \u0027b\u003E \nLambdaEqByRef\u003C\u0027a, \u0027b\u003E \nCache.alreadyVisited \nalreadyVisited \nCache.memoizeBy \nmemoizeBy"},{"uri":"/fantomas/reference/fantomas-core-cache.html#alreadyVisited","title":"Cache.alreadyVisited","content":"Cache.alreadyVisited \nalreadyVisited \n"},{"uri":"/fantomas/reference/fantomas-core-cache.html#memoizeBy","title":"Cache.memoizeBy","content":"Cache.memoizeBy \nmemoizeBy \n"},{"uri":"/fantomas/reference/fantomas-core-cache-lambdaeqbyref-2.html","title":"LambdaEqByRef\u003C\u0027a, \u0027b\u003E","content":"LambdaEqByRef\u003C\u0027a, \u0027b\u003E \n \nLambdaEqByRef\u003C\u0027a, \u0027b\u003E.LambdaEqByRef \nLambdaEqByRef"},{"uri":"/fantomas/reference/fantomas-core-cache-lambdaeqbyref-2.html#LambdaEqByRef","title":"LambdaEqByRef\u003C\u0027a, \u0027b\u003E.LambdaEqByRef","content":"LambdaEqByRef\u003C\u0027a, \u0027b\u003E.LambdaEqByRef \nLambdaEqByRef \n"},{"uri":"/fantomas/reference/fantomas-core-char.html","title":"Char","content":"Char \n \nChar.escape \nescape"},{"uri":"/fantomas/reference/fantomas-core-char.html#escape","title":"Char.escape","content":"Char.escape \nescape \n"},{"uri":"/fantomas/reference/fantomas-core-continuation.html","title":"Continuation","content":"Continuation \n \nContinuation.sequence \nsequence"},{"uri":"/fantomas/reference/fantomas-core-continuation.html#sequence","title":"Continuation.sequence","content":"Continuation.sequence \nsequence \n"},{"uri":"/fantomas/reference/fantomas-core-dict.html","title":"Dict","content":"Dict \n \nDict.tryGet \ntryGet"},{"uri":"/fantomas/reference/fantomas-core-dict.html#tryGet","title":"Dict.tryGet","content":"Dict.tryGet \ntryGet \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig.html","title":"FormatConfig","content":"FormatConfig \n \nFormatConfig.EndOfLineStyle \nEndOfLineStyle \nFormatConfig.FormatConfig \nFormatConfig \nFormatConfig.FormatException \nFormatException \nFormatConfig.MultilineFormatterType \nMultilineFormatterType \nFormatConfig.Num \nNum \nFormatConfig.satSolveMaxStepsMaxSteps \nsatSolveMaxStepsMaxSteps"},{"uri":"/fantomas/reference/fantomas-core-formatconfig.html#satSolveMaxStepsMaxSteps","title":"FormatConfig.satSolveMaxStepsMaxSteps","content":"FormatConfig.satSolveMaxStepsMaxSteps \nsatSolveMaxStepsMaxSteps \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html","title":"EndOfLineStyle","content":"EndOfLineStyle \n \nEndOfLineStyle.NewLineString \nNewLineString \nEndOfLineStyle.OfConfigString \nOfConfigString \nEndOfLineStyle.ToConfigString \nToConfigString \nEndOfLineStyle.FromEnvironment \nFromEnvironment \nEndOfLineStyle.LF \nLF \nEndOfLineStyle.CR \nCR \nEndOfLineStyle.CRLF \nCRLF"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html#NewLineString","title":"EndOfLineStyle.NewLineString","content":"EndOfLineStyle.NewLineString \nNewLineString \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html#OfConfigString","title":"EndOfLineStyle.OfConfigString","content":"EndOfLineStyle.OfConfigString \nOfConfigString \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html#ToConfigString","title":"EndOfLineStyle.ToConfigString","content":"EndOfLineStyle.ToConfigString \nToConfigString \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html#FromEnvironment","title":"EndOfLineStyle.FromEnvironment","content":"EndOfLineStyle.FromEnvironment \nFromEnvironment \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html#LF","title":"EndOfLineStyle.LF","content":"EndOfLineStyle.LF \nLF \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html#CR","title":"EndOfLineStyle.CR","content":"EndOfLineStyle.CR \nCR \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-endoflinestyle.html#CRLF","title":"EndOfLineStyle.CRLF","content":"EndOfLineStyle.CRLF \nCRLF \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html","title":"FormatConfig","content":"FormatConfig \n \nFormatConfig.Default \nDefault \nFormatConfig.IndentSize \nIndentSize \nFormatConfig.MaxLineLength \nMaxLineLength \nFormatConfig.EndOfLine \nEndOfLine \nFormatConfig.InsertFinalNewline \nInsertFinalNewline \nFormatConfig.SpaceBeforeParameter \nSpaceBeforeParameter \nFormatConfig.SpaceBeforeLowercaseInvocation \nSpaceBeforeLowercaseInvocation \nFormatConfig.SpaceBeforeUppercaseInvocation \nSpaceBeforeUppercaseInvocation \nFormatConfig.SpaceBeforeClassConstructor \nSpaceBeforeClassConstructor \nFormatConfig.SpaceBeforeMember \nSpaceBeforeMember \nFormatConfig.SpaceBeforeColon \nSpaceBeforeColon \nFormatConfig.SpaceAfterComma \nSpaceAfterComma \nFormatConfig.SpaceBeforeSemicolon \nSpaceBeforeSemicolon \nFormatConfig.SpaceAfterSemicolon \nSpaceAfterSemicolon \nFormatConfig.SpaceAroundDelimiter \nSpaceAroundDelimiter \nFormatConfig.MaxIfThenShortWidth \nMaxIfThenShortWidth \nFormatConfig.MaxIfThenElseShortWidth \nMaxIfThenElseShortWidth \nFormatConfig.MaxInfixOperatorExpression \nMaxInfixOperatorExpression \nFormatConfig.MaxRecordWidth \nMaxRecordWidth \nFormatConfig.MaxRecordNumberOfItems \nMaxRecordNumberOfItems \nFormatConfig.RecordMultilineFormatter \nRecordMultilineFormatter \nFormatConfig.MaxArrayOrListWidth \nMaxArrayOrListWidth \nFormatConfig.MaxArrayOrListNumberOfItems \nMaxArrayOrListNumberOfItems \nFormatConfig.ArrayOrListMultilineFormatter \nArrayOrListMultilineFormatter \nFormatConfig.MaxValueBindingWidth \nMaxValueBindingWidth \nFormatConfig.MaxFunctionBindingWidth \nMaxFunctionBindingWidth \nFormatConfig.MaxDotGetExpressionWidth \nMaxDotGetExpressionWidth \nFormatConfig.MultilineBlockBracketsOnSameColumn \nMultilineBlockBracketsOnSameColumn \nFormatConfig.NewlineBetweenTypeDefinitionAndMembers \nNewlineBetweenTypeDefinitionAndMembers \nFormatConfig.AlignFunctionSignatureToIndentation \nAlignFunctionSignatureToIndentation \nFormatConfig.AlternativeLongMemberDefinitions \nAlternativeLongMemberDefinitions \nFormatConfig.MultiLineLambdaClosingNewline \nMultiLineLambdaClosingNewline \nFormatConfig.ExperimentalKeepIndentInBranch \nExperimentalKeepIndentInBranch \nFormatConfig.BlankLinesAroundNestedMultilineExpressions \nBlankLinesAroundNestedMultilineExpressions \nFormatConfig.BarBeforeDiscriminatedUnionDeclaration \nBarBeforeDiscriminatedUnionDeclaration \nFormatConfig.ExperimentalStroustrupStyle \nExperimentalStroustrupStyle \nFormatConfig.KeepMaxNumberOfBlankLines \nKeepMaxNumberOfBlankLines \nFormatConfig.StrictMode \nStrictMode"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#Default","title":"FormatConfig.Default","content":"FormatConfig.Default \nDefault \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#IndentSize","title":"FormatConfig.IndentSize","content":"FormatConfig.IndentSize \nIndentSize \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxLineLength","title":"FormatConfig.MaxLineLength","content":"FormatConfig.MaxLineLength \nMaxLineLength \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#EndOfLine","title":"FormatConfig.EndOfLine","content":"FormatConfig.EndOfLine \nEndOfLine \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#InsertFinalNewline","title":"FormatConfig.InsertFinalNewline","content":"FormatConfig.InsertFinalNewline \nInsertFinalNewline \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceBeforeParameter","title":"FormatConfig.SpaceBeforeParameter","content":"FormatConfig.SpaceBeforeParameter \nSpaceBeforeParameter \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceBeforeLowercaseInvocation","title":"FormatConfig.SpaceBeforeLowercaseInvocation","content":"FormatConfig.SpaceBeforeLowercaseInvocation \nSpaceBeforeLowercaseInvocation \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceBeforeUppercaseInvocation","title":"FormatConfig.SpaceBeforeUppercaseInvocation","content":"FormatConfig.SpaceBeforeUppercaseInvocation \nSpaceBeforeUppercaseInvocation \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceBeforeClassConstructor","title":"FormatConfig.SpaceBeforeClassConstructor","content":"FormatConfig.SpaceBeforeClassConstructor \nSpaceBeforeClassConstructor \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceBeforeMember","title":"FormatConfig.SpaceBeforeMember","content":"FormatConfig.SpaceBeforeMember \nSpaceBeforeMember \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceBeforeColon","title":"FormatConfig.SpaceBeforeColon","content":"FormatConfig.SpaceBeforeColon \nSpaceBeforeColon \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceAfterComma","title":"FormatConfig.SpaceAfterComma","content":"FormatConfig.SpaceAfterComma \nSpaceAfterComma \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceBeforeSemicolon","title":"FormatConfig.SpaceBeforeSemicolon","content":"FormatConfig.SpaceBeforeSemicolon \nSpaceBeforeSemicolon \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceAfterSemicolon","title":"FormatConfig.SpaceAfterSemicolon","content":"FormatConfig.SpaceAfterSemicolon \nSpaceAfterSemicolon \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#SpaceAroundDelimiter","title":"FormatConfig.SpaceAroundDelimiter","content":"FormatConfig.SpaceAroundDelimiter \nSpaceAroundDelimiter \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxIfThenShortWidth","title":"FormatConfig.MaxIfThenShortWidth","content":"FormatConfig.MaxIfThenShortWidth \nMaxIfThenShortWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxIfThenElseShortWidth","title":"FormatConfig.MaxIfThenElseShortWidth","content":"FormatConfig.MaxIfThenElseShortWidth \nMaxIfThenElseShortWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxInfixOperatorExpression","title":"FormatConfig.MaxInfixOperatorExpression","content":"FormatConfig.MaxInfixOperatorExpression \nMaxInfixOperatorExpression \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxRecordWidth","title":"FormatConfig.MaxRecordWidth","content":"FormatConfig.MaxRecordWidth \nMaxRecordWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxRecordNumberOfItems","title":"FormatConfig.MaxRecordNumberOfItems","content":"FormatConfig.MaxRecordNumberOfItems \nMaxRecordNumberOfItems \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#RecordMultilineFormatter","title":"FormatConfig.RecordMultilineFormatter","content":"FormatConfig.RecordMultilineFormatter \nRecordMultilineFormatter \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxArrayOrListWidth","title":"FormatConfig.MaxArrayOrListWidth","content":"FormatConfig.MaxArrayOrListWidth \nMaxArrayOrListWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxArrayOrListNumberOfItems","title":"FormatConfig.MaxArrayOrListNumberOfItems","content":"FormatConfig.MaxArrayOrListNumberOfItems \nMaxArrayOrListNumberOfItems \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#ArrayOrListMultilineFormatter","title":"FormatConfig.ArrayOrListMultilineFormatter","content":"FormatConfig.ArrayOrListMultilineFormatter \nArrayOrListMultilineFormatter \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxValueBindingWidth","title":"FormatConfig.MaxValueBindingWidth","content":"FormatConfig.MaxValueBindingWidth \nMaxValueBindingWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxFunctionBindingWidth","title":"FormatConfig.MaxFunctionBindingWidth","content":"FormatConfig.MaxFunctionBindingWidth \nMaxFunctionBindingWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MaxDotGetExpressionWidth","title":"FormatConfig.MaxDotGetExpressionWidth","content":"FormatConfig.MaxDotGetExpressionWidth \nMaxDotGetExpressionWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MultilineBlockBracketsOnSameColumn","title":"FormatConfig.MultilineBlockBracketsOnSameColumn","content":"FormatConfig.MultilineBlockBracketsOnSameColumn \nMultilineBlockBracketsOnSameColumn \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#NewlineBetweenTypeDefinitionAndMembers","title":"FormatConfig.NewlineBetweenTypeDefinitionAndMembers","content":"FormatConfig.NewlineBetweenTypeDefinitionAndMembers \nNewlineBetweenTypeDefinitionAndMembers \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#AlignFunctionSignatureToIndentation","title":"FormatConfig.AlignFunctionSignatureToIndentation","content":"FormatConfig.AlignFunctionSignatureToIndentation \nAlignFunctionSignatureToIndentation \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#AlternativeLongMemberDefinitions","title":"FormatConfig.AlternativeLongMemberDefinitions","content":"FormatConfig.AlternativeLongMemberDefinitions \nAlternativeLongMemberDefinitions \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#MultiLineLambdaClosingNewline","title":"FormatConfig.MultiLineLambdaClosingNewline","content":"FormatConfig.MultiLineLambdaClosingNewline \nMultiLineLambdaClosingNewline \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#ExperimentalKeepIndentInBranch","title":"FormatConfig.ExperimentalKeepIndentInBranch","content":"FormatConfig.ExperimentalKeepIndentInBranch \nExperimentalKeepIndentInBranch \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#BlankLinesAroundNestedMultilineExpressions","title":"FormatConfig.BlankLinesAroundNestedMultilineExpressions","content":"FormatConfig.BlankLinesAroundNestedMultilineExpressions \nBlankLinesAroundNestedMultilineExpressions \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#BarBeforeDiscriminatedUnionDeclaration","title":"FormatConfig.BarBeforeDiscriminatedUnionDeclaration","content":"FormatConfig.BarBeforeDiscriminatedUnionDeclaration \nBarBeforeDiscriminatedUnionDeclaration \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#ExperimentalStroustrupStyle","title":"FormatConfig.ExperimentalStroustrupStyle","content":"FormatConfig.ExperimentalStroustrupStyle \nExperimentalStroustrupStyle \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#KeepMaxNumberOfBlankLines","title":"FormatConfig.KeepMaxNumberOfBlankLines","content":"FormatConfig.KeepMaxNumberOfBlankLines \nKeepMaxNumberOfBlankLines \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatconfig.html#StrictMode","title":"FormatConfig.StrictMode","content":"FormatConfig.StrictMode \nStrictMode \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatexception.html","title":"FormatException","content":"FormatException \n \nFormatException.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-formatexception.html#\u0060\u0060.ctor\u0060\u0060","title":"FormatException.\u0060\u0060.ctor\u0060\u0060","content":"FormatException.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-multilineformattertype.html","title":"MultilineFormatterType","content":"MultilineFormatterType \n \nMultilineFormatterType.OfConfigString \nOfConfigString \nMultilineFormatterType.ToConfigString \nToConfigString \nMultilineFormatterType.CharacterWidth \nCharacterWidth \nMultilineFormatterType.NumberOfItems \nNumberOfItems"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-multilineformattertype.html#OfConfigString","title":"MultilineFormatterType.OfConfigString","content":"MultilineFormatterType.OfConfigString \nOfConfigString \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-multilineformattertype.html#ToConfigString","title":"MultilineFormatterType.ToConfigString","content":"MultilineFormatterType.ToConfigString \nToConfigString \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-multilineformattertype.html#CharacterWidth","title":"MultilineFormatterType.CharacterWidth","content":"MultilineFormatterType.CharacterWidth \nCharacterWidth \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-multilineformattertype.html#NumberOfItems","title":"MultilineFormatterType.NumberOfItems","content":"MultilineFormatterType.NumberOfItems \nNumberOfItems \n"},{"uri":"/fantomas/reference/fantomas-core-formatconfig-num.html","title":"Num","content":"Num \n"},{"uri":"/fantomas/reference/fantomas-core-isourcetextextensions.html","title":"ISourceTextExtensions","content":"ISourceTextExtensions \n \nISourceTextExtensions.GetContentAt \nGetContentAt"},{"uri":"/fantomas/reference/fantomas-core-isourcetextextensions.html#GetContentAt","title":"ISourceTextExtensions.GetContentAt","content":"ISourceTextExtensions.GetContentAt \nGetContentAt \n"},{"uri":"/fantomas/reference/fantomas-core-list.html","title":"List","content":"List \n \nList.appendItem \nappendItem \nList.prependItem \nprependItem \nList.takeWhileState \ntakeWhileState \nList.chooseState \nchooseState \nList.isNotEmpty \nisNotEmpty \nList.moreThanOne \nmoreThanOne \nList.partitionWhile \npartitionWhile"},{"uri":"/fantomas/reference/fantomas-core-list.html#appendItem","title":"List.appendItem","content":"List.appendItem \nappendItem \n"},{"uri":"/fantomas/reference/fantomas-core-list.html#prependItem","title":"List.prependItem","content":"List.prependItem \nprependItem \n"},{"uri":"/fantomas/reference/fantomas-core-list.html#takeWhileState","title":"List.takeWhileState","content":"List.takeWhileState \ntakeWhileState \n"},{"uri":"/fantomas/reference/fantomas-core-list.html#chooseState","title":"List.chooseState","content":"List.chooseState \nchooseState \n"},{"uri":"/fantomas/reference/fantomas-core-list.html#isNotEmpty","title":"List.isNotEmpty","content":"List.isNotEmpty \nisNotEmpty \n"},{"uri":"/fantomas/reference/fantomas-core-list.html#moreThanOne","title":"List.moreThanOne","content":"List.moreThanOne \nmoreThanOne \n"},{"uri":"/fantomas/reference/fantomas-core-list.html#partitionWhile","title":"List.partitionWhile","content":"List.partitionWhile \npartitionWhile \n"},{"uri":"/fantomas/reference/fantomas-core-map.html","title":"Map","content":"Map \n \nMap.tryFindOrDefault \ntryFindOrDefault \nMap.tryFindOrEmptyList \ntryFindOrEmptyList"},{"uri":"/fantomas/reference/fantomas-core-map.html#tryFindOrDefault","title":"Map.tryFindOrDefault","content":"Map.tryFindOrDefault \ntryFindOrDefault \n"},{"uri":"/fantomas/reference/fantomas-core-map.html#tryFindOrEmptyList","title":"Map.tryFindOrEmptyList","content":"Map.tryFindOrEmptyList \ntryFindOrEmptyList \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html","title":"Queue","content":"Queue \n \nQueue.empty \nempty \nQueue.head \nhead \nQueue.tryHead \ntryHead \nQueue.isEmpty \nisEmpty \nQueue.length \nlength \nQueue.ofList \nofList \nQueue.ofSeq \nofSeq \nQueue.rev \nrev \nQueue.toSeq \ntoSeq \nQueue.append \nappend \nQueue.skipExists \nskipExists"},{"uri":"/fantomas/reference/fantomas-core-queue.html#empty","title":"Queue.empty","content":"Queue.empty \nempty \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#head","title":"Queue.head","content":"Queue.head \nhead \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#tryHead","title":"Queue.tryHead","content":"Queue.tryHead \ntryHead \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#isEmpty","title":"Queue.isEmpty","content":"Queue.isEmpty \nisEmpty \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#length","title":"Queue.length","content":"Queue.length \nlength \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#ofList","title":"Queue.ofList","content":"Queue.ofList \nofList \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#ofSeq","title":"Queue.ofSeq","content":"Queue.ofSeq \nofSeq \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#rev","title":"Queue.rev","content":"Queue.rev \nrev \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#toSeq","title":"Queue.toSeq","content":"Queue.toSeq \ntoSeq \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#append","title":"Queue.append","content":"Queue.append \nappend \n"},{"uri":"/fantomas/reference/fantomas-core-queue.html#skipExists","title":"Queue.skipExists","content":"Queue.skipExists \nskipExists \n\n Equivalent of q |\u003E Queue.toSeq |\u003E Seq.skip n |\u003E Seq.skipWhile p |\u003E Seq.exists f\n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html","title":"RangeHelpers","content":"RangeHelpers \n \nRangeHelpers.rangeContainsRange \nrangeContainsRange \nRangeHelpers.\u0060\u0060range after\u0060\u0060 \n\u0060\u0060range after\u0060\u0060 \nRangeHelpers.rangeStartEq \nrangeStartEq \nRangeHelpers.rangeEndEq \nrangeEndEq \nRangeHelpers.rangeEq \nrangeEq \nRangeHelpers.isAdjacentTo \nisAdjacentTo \nRangeHelpers.mkStartRange \nmkStartRange \nRangeHelpers.mkStartEndRange \nmkStartEndRange \nRangeHelpers.mergeRanges \nmergeRanges \nRangeHelpers.surfaceArea \nsurfaceArea"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#rangeContainsRange","title":"RangeHelpers.rangeContainsRange","content":"RangeHelpers.rangeContainsRange \nrangeContainsRange \n\n Checks if Range B is fully contained by Range A\n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#\u0060\u0060range after\u0060\u0060","title":"RangeHelpers.\u0060\u0060range after\u0060\u0060","content":"RangeHelpers.\u0060\u0060range after\u0060\u0060 \n\u0060\u0060range after\u0060\u0060 \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#rangeStartEq","title":"RangeHelpers.rangeStartEq","content":"RangeHelpers.rangeStartEq \nrangeStartEq \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#rangeEndEq","title":"RangeHelpers.rangeEndEq","content":"RangeHelpers.rangeEndEq \nrangeEndEq \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#rangeEq","title":"RangeHelpers.rangeEq","content":"RangeHelpers.rangeEq \nrangeEq \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#isAdjacentTo","title":"RangeHelpers.isAdjacentTo","content":"RangeHelpers.isAdjacentTo \nisAdjacentTo \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#mkStartRange","title":"RangeHelpers.mkStartRange","content":"RangeHelpers.mkStartRange \nmkStartRange \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#mkStartEndRange","title":"RangeHelpers.mkStartEndRange","content":"RangeHelpers.mkStartEndRange \nmkStartEndRange \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#mergeRanges","title":"RangeHelpers.mergeRanges","content":"RangeHelpers.mergeRanges \nmergeRanges \n"},{"uri":"/fantomas/reference/fantomas-core-rangehelpers.html#surfaceArea","title":"RangeHelpers.surfaceArea","content":"RangeHelpers.surfaceArea \nsurfaceArea \n\n Calculate an artificial surface area based on the range.\n"},{"uri":"/fantomas/reference/fantomas-core-rangepatterns.html","title":"RangePatterns","content":"RangePatterns \n \nRangePatterns.(|StartEndRange|) \n(|StartEndRange|) \nRangePatterns.(|StartRange|) \n(|StartRange|)"},{"uri":"/fantomas/reference/fantomas-core-rangepatterns.html#(|StartEndRange|)","title":"RangePatterns.(|StartEndRange|)","content":"RangePatterns.(|StartEndRange|) \n(|StartEndRange|) \n"},{"uri":"/fantomas/reference/fantomas-core-rangepatterns.html#(|StartRange|)","title":"RangePatterns.(|StartRange|)","content":"RangePatterns.(|StartRange|) \n(|StartRange|) \n"},{"uri":"/fantomas/reference/fantomas-core-string.html","title":"String","content":"String \n \nString.normalizeNewLine \nnormalizeNewLine \nString.normalizeThenSplitNewLine \nnormalizeThenSplitNewLine \nString.startsWithOrdinal \nstartsWithOrdinal \nString.splitInFragments \nsplitInFragments \nString.merge \nmerge \nString.empty \nempty \nString.isNotNullOrEmpty \nisNotNullOrEmpty \nString.isNotNullOrWhitespace \nisNotNullOrWhitespace \nString.isMultiline \nisMultiline"},{"uri":"/fantomas/reference/fantomas-core-string.html#normalizeNewLine","title":"String.normalizeNewLine","content":"String.normalizeNewLine \nnormalizeNewLine \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#normalizeThenSplitNewLine","title":"String.normalizeThenSplitNewLine","content":"String.normalizeThenSplitNewLine \nnormalizeThenSplitNewLine \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#startsWithOrdinal","title":"String.startsWithOrdinal","content":"String.startsWithOrdinal \nstartsWithOrdinal \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#splitInFragments","title":"String.splitInFragments","content":"String.splitInFragments \nsplitInFragments \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#merge","title":"String.merge","content":"String.merge \nmerge \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#empty","title":"String.empty","content":"String.empty \nempty \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#isNotNullOrEmpty","title":"String.isNotNullOrEmpty","content":"String.isNotNullOrEmpty \nisNotNullOrEmpty \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#isNotNullOrWhitespace","title":"String.isNotNullOrWhitespace","content":"String.isNotNullOrWhitespace \nisNotNullOrWhitespace \n"},{"uri":"/fantomas/reference/fantomas-core-string.html#isMultiline","title":"String.isMultiline","content":"String.isMultiline \nisMultiline \n"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html","title":"CodeFormatter","content":"CodeFormatter \n \nCodeFormatter.FormatASTAsync \nFormatASTAsync \nCodeFormatter.FormatDocumentAsync \nFormatDocumentAsync \nCodeFormatter.FormatSelectionAsync \nFormatSelectionAsync \nCodeFormatter.GetVersion \nGetVersion \nCodeFormatter.IsValidFSharpCodeAsync \nIsValidFSharpCodeAsync \nCodeFormatter.MakeRange \nMakeRange \nCodeFormatter.ParseAsync \nParseAsync"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html#FormatASTAsync","title":"CodeFormatter.FormatASTAsync","content":"CodeFormatter.FormatASTAsync \nFormatASTAsync \n\n Format an abstract syntax tree using an optional source for trivia processing\n"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html#FormatDocumentAsync","title":"CodeFormatter.FormatDocumentAsync","content":"CodeFormatter.FormatDocumentAsync \nFormatDocumentAsync \n\n Format a source string using an optional config\n"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html#FormatSelectionAsync","title":"CodeFormatter.FormatSelectionAsync","content":"CodeFormatter.FormatSelectionAsync \nFormatSelectionAsync \n\n Format a part of source string using given config, and return the (formatted) selected part only.\n Beware that the range argument is inclusive. The closest expression inside the selection will be formatted if possible.\n"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html#GetVersion","title":"CodeFormatter.GetVersion","content":"CodeFormatter.GetVersion \nGetVersion \n\n Returns the version of Fantomas found in the AssemblyInfo\n"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html#IsValidFSharpCodeAsync","title":"CodeFormatter.IsValidFSharpCodeAsync","content":"CodeFormatter.IsValidFSharpCodeAsync \nIsValidFSharpCodeAsync \n\n Check whether an input string is invalid in F# by attempting to parse the code.\n"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html#MakeRange","title":"CodeFormatter.MakeRange","content":"CodeFormatter.MakeRange \nMakeRange \n\n Make a range from (startLine, startCol) to (endLine, endCol) to select some text\n"},{"uri":"/fantomas/reference/fantomas-core-codeformatter.html#ParseAsync","title":"CodeFormatter.ParseAsync","content":"CodeFormatter.ParseAsync \nParseAsync \n\n Parse a source string using given config\n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html","title":"Queue\u003C\u0027T\u003E","content":"Queue\u003C\u0027T\u003E \n\n append only collection optimized for quick append of block of data and query operations\n data - list of blocks in reverse order\n \nQueue\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nQueue\u003C\u0027T\u003E.Append \nAppend \nQueue\u003C\u0027T\u003E.Rev \nRev \nQueue\u003C\u0027T\u003E.SkipExists \nSkipExists \nQueue\u003C\u0027T\u003E.Tail \nTail \nQueue\u003C\u0027T\u003E.Length \nLength \nQueue\u003C\u0027T\u003E.IsEmpty \nIsEmpty \nQueue\u003C\u0027T\u003E.Head \nHead \nQueue\u003C\u0027T\u003E.TryHead \nTryHead"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#\u0060\u0060.ctor\u0060\u0060","title":"Queue\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060","content":"Queue\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#Append","title":"Queue\u003C\u0027T\u003E.Append","content":"Queue\u003C\u0027T\u003E.Append \nAppend \n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#Rev","title":"Queue\u003C\u0027T\u003E.Rev","content":"Queue\u003C\u0027T\u003E.Rev \nRev \n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#SkipExists","title":"Queue\u003C\u0027T\u003E.SkipExists","content":"Queue\u003C\u0027T\u003E.SkipExists \nSkipExists \n\n Equivalent of q |\u003E Queue.toSeq |\u003E Seq.skip n |\u003E Seq.skipWhile p |\u003E Seq.exists f, optimized for speed\n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#Tail","title":"Queue\u003C\u0027T\u003E.Tail","content":"Queue\u003C\u0027T\u003E.Tail \nTail \n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#Length","title":"Queue\u003C\u0027T\u003E.Length","content":"Queue\u003C\u0027T\u003E.Length \nLength \n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#IsEmpty","title":"Queue\u003C\u0027T\u003E.IsEmpty","content":"Queue\u003C\u0027T\u003E.IsEmpty \nIsEmpty \n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#Head","title":"Queue\u003C\u0027T\u003E.Head","content":"Queue\u003C\u0027T\u003E.Head \nHead \n"},{"uri":"/fantomas/reference/fantomas-core-queue-1.html#TryHead","title":"Queue\u003C\u0027T\u003E.TryHead","content":"Queue\u003C\u0027T\u003E.TryHead \nTryHead \n"},{"uri":"/fantomas/reference/fantomas-fcs-parse.html","title":"Parse","content":"Parse \n \nParse.FSharpParserDiagnostic \nFSharpParserDiagnostic \nParse.parseFile \nparseFile"},{"uri":"/fantomas/reference/fantomas-fcs-parse.html#parseFile","title":"Parse.parseFile","content":"Parse.parseFile \nparseFile \n"},{"uri":"/fantomas/reference/fantomas-fcs-parse-fsharpparserdiagnostic.html","title":"FSharpParserDiagnostic","content":"FSharpParserDiagnostic \n \nFSharpParserDiagnostic.Severity \nSeverity \nFSharpParserDiagnostic.SubCategory \nSubCategory \nFSharpParserDiagnostic.Range \nRange \nFSharpParserDiagnostic.ErrorNumber \nErrorNumber \nFSharpParserDiagnostic.Message \nMessage"},{"uri":"/fantomas/reference/fantomas-fcs-parse-fsharpparserdiagnostic.html#Severity","title":"FSharpParserDiagnostic.Severity","content":"FSharpParserDiagnostic.Severity \nSeverity \n"},{"uri":"/fantomas/reference/fantomas-fcs-parse-fsharpparserdiagnostic.html#SubCategory","title":"FSharpParserDiagnostic.SubCategory","content":"FSharpParserDiagnostic.SubCategory \nSubCategory \n"},{"uri":"/fantomas/reference/fantomas-fcs-parse-fsharpparserdiagnostic.html#Range","title":"FSharpParserDiagnostic.Range","content":"FSharpParserDiagnostic.Range \nRange \n"},{"uri":"/fantomas/reference/fantomas-fcs-parse-fsharpparserdiagnostic.html#ErrorNumber","title":"FSharpParserDiagnostic.ErrorNumber","content":"FSharpParserDiagnostic.ErrorNumber \nErrorNumber \n"},{"uri":"/fantomas/reference/fantomas-fcs-parse-fsharpparserdiagnostic.html#Message","title":"FSharpParserDiagnostic.Message","content":"FSharpParserDiagnostic.Message \nMessage \n"},{"uri":"/fantomas/docs/FAKE.html","title":"FAKE build system\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 2\n---\n# FAKE build system\n# Fantomas Integration with FAKE build system.\nCheck out the [sample](https://github.com/fsprojects/fantomas/blob/master/fake-sample/README.md).\nTODO: document how to use fantomas with FAKE using the provided sample"},{"uri":"/fantomas/docs/FAQ.html","title":"FAQ\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 1000\n---\n# FAQ\n## Why the name \u0022Fantomas\u0022?\nThere are a few reasons to choose the name as such.\nFirst, it starts with an \u0022F\u0022 just like many other F# projects.\nSecond, Fantomas is my favourite character in the literature.\nFinally, Fantomas has the same Greek root as \u0022[phantom](https://en.wiktionary.org/wiki/phantom)\u0022; coincidentally F# ASTs and formatting rules are so *mysterious* to be handled correctly.\n\n## Can I make a design suggestion?\n\n## Is it safe to use the Alpha version of Fantomas?\nTBD\n\n"},{"uri":"/fantomas/docs/IgnoreFiles.html","title":"Ignore Files\n","content":"---\ncategory: Documentation\ncategoryindex: 1\nindex: 7\n---\n# Ignore Files \n\n*starting version 4.1*\n\nTo exclude files from formatting, create a \u0060.fantomasignore\u0060 file in the root of your project.\n\u0060.fantomasignore\u0060 uses [gitignore](https://git-scm.com/docs/gitignore) syntax (processed via [Ignore](https://github.com/goelhardik/ignore)).\nIgnored files will be picked up when the [Fantomas cli tool](https://www.nuget.org/packages/fantomas/).\nExclusion applies both to formatting and the format checking.\n\n\u0060\u0060\u0060\n# Ignore Fable files\n.fable/\n\n# Ignore script files\n*.fsx\n\u0060\u0060\u0060\n\nNote that Fantomas only searches for a \u0060.fantomasignore\u0060 file in or above its current working directory, if one exists; unlike Git, it does not traverse the filesystem for each input file to find an appropriate ignore file.\n(This is not true of the Fantomas daemon. The daemon can\u0027t rely on being invoked from the right place, and indeed there may not even be a well-defined notion of \u0022right place\u0022 for the formatting tasks the daemon is required to perform, so it does search the filesystem for every file individually.)\n"},{"uri":"/fantomas/docs/Configuration.html","title":"Configuration\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 5\n---\n# Configuration\n\nFantomas ships with a series of format options.\nThese can be stored in an [.editorconfig](https://editorconfig.org/) file and will be picked up automatically by the commandline tool.\n\nA default .editorconfig file would look like\n\u0060\u0060\u0060ini\n[*.{fs,fsx}]\nindent_size=4\nmax_line_length=120\nend_of_line=crlf\ninsert_final_newline=true\nfsharp_space_before_parameter=true\nfsharp_space_before_lowercase_invocation=true\nfsharp_space_before_uppercase_invocation=false\nfsharp_space_before_class_constructor=false\nfsharp_space_before_member=false\nfsharp_space_before_colon=false\nfsharp_space_after_comma=true\nfsharp_space_before_semicolon=false\nfsharp_space_after_semicolon=true\nfsharp_space_around_delimiter=true\nfsharp_max_if_then_short_width=0\nfsharp_max_if_then_else_short_width=40\nfsharp_max_infix_operator_expression=50\nfsharp_max_record_width=40\nfsharp_max_record_number_of_items=1\nfsharp_record_multiline_formatter=character_width\nfsharp_max_array_or_list_width=40\nfsharp_max_array_or_list_number_of_items=1\nfsharp_array_or_list_multiline_formatter=character_width\nfsharp_max_value_binding_width=80\nfsharp_max_function_binding_width=40\nfsharp_max_dot_get_expression_width=50\nfsharp_multiline_block_brackets_on_same_column=false\nfsharp_newline_between_type_definition_and_members=false\nfsharp_align_function_signature_to_indentation=false\nfsharp_alternative_long_member_definitions=false\nfsharp_multi_line_lambda_closing_newline=false\nfsharp_experimental_keep_indent_in_branch=false\nfsharp_blank_lines_around_nested_multiline_expressions=true\nfsharp_bar_before_discriminated_union_declaration=false\nfsharp_experimental_stroustrup_style=false\nfsharp_keep_max_number_of_blank_lines=100\nfsharp_strict_mode=false\n\u0060\u0060\u0060\n\nPlease note that you should only add settings to the \u0060.editorconfig\u0060 file when you want to deviate from the default settings.\nCopying the entire list above is unnecessary.\n\n### indent_size\n\n\u0060 indent_size\u0060 has to be between 1 and 10.\n\nThis preference sets the indentation\nThe common values are 2 and 4. \nThe same indentation is ensured to be consistent in a source file.\nDefault = 4.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet inline selectRandom (f: _ []) =\n    let r = random 1.0\n\n    let rec find =\n        function\n        | 0 -\u003E fst f.[0]\n        | n when r \u003C snd f.[n] -\u003E fst f.[n]\n        | n -\u003E find (n - 1)\n\n    find \u003C| f.Length - 1\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with IdentSize = 2 }\u0060\n\n\u0060\u0060\u0060fsharp\nlet inline selectRandom (f: _ []) =\n  let r = random 1.0\n\n  let rec find =\n    function\n    | 0 -\u003E fst f.[0]\n    | n when r \u003C snd f.[n] -\u003E fst f.[n]\n    | n -\u003E find (n - 1)\n\n  find \u003C| f.Length - 1\n\u0060\u0060\u0060\n\n### max_line_length\n\n\u0060max_line_length\u0060 has to be an integer greater or equal to 60.\nThis preference sets the column where we break F# constructs into new lines.\nDefault = 120.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nmatch myValue with\n| Some foo -\u003E someLongFunctionNameThatWillTakeFooAndReturnsUnit foo\n| None -\u003E printfn \u0022nothing\u0022\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxLineLength = 60 }\u0060\n\n\u0060\u0060\u0060fsharp\nmatch myValue with\n| Some foo -\u003E\n    someLongFunctionNameThatWillTakeFooAndReturnsUnit foo\n| None -\u003E printfn \u0022nothing\u0022\n\u0060\u0060\u0060\n\n### end_of_line\n\n\u0060end_of_line\u0060 determines the newline character, \u0060lf\u0060 will add \u0060\\n\u0060 where \u0060crlf\u0060 will add \u0060\\r\\n\u0060.\n\u0060cr\u0060 is not supported by the F# language spec.\nIf not set by the user, the default value is determined by \u0060System.Environment.NewLine\u0060.\n\n### insert_final_newline\n\nAdds a final newline character at the end of the file.\nDefault = true\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = 42\n\n\u0060\u0060\u0060\n\n\u0060{ default with InsertFinalNewline = false }\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = 42\n\u0060\u0060\u0060\n\n### fsharp_space_before_parameter\n\nAdd a space after the name of a function and before the opening parenthesis of the first parameter.\nThis setting influences function definitions.\nDefault = true.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet value (a: int) = x\nlet DumpTrace () = ()\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceBeforeParameter = false }\u0060\n\n\u0060\u0060\u0060fsharp\nlet value(a: int) = x\nlet DumpTrace() = ()\n\u0060\u0060\u0060\n\n### fsharp_space_before_lowercase_invocation\n\nAdd a space after the name of a lowercased function and before the opening parenthesis of the first argument.\nThis setting influences function invocation.\nDefault = true.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nvalue (a, b)\nstartTimer ()\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceBeforeLowercaseInvocation = false }\u0060\n\n\u0060\u0060\u0060fsharp\nvalue(a, b)\nstartTimer()\n\u0060\u0060\u0060\n\n### fsharp_space_before_uppercase_invocation\n\nAdd a space after the name of a uppercased function and before the opening parenthesis of the first argument.\nThis setting influences function invocation.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nValue(a, b)\nperson.ToString()\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceBeforeUppercaseInvocation = true }\u0060\n\n\u0060\u0060\u0060fsharp\nValue (a, b)\nperson.ToString ()\n\u0060\u0060\u0060\n\n### fsharp_space_before_class_constructor\n\nAdd a space after a type name and before the class constructor.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype Person() =\n    class\n    end\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceBeforeClassConstructor = true }\u0060\n\n\u0060\u0060\u0060fsharp\ntype Person () =\n    class\n    end\n\u0060\u0060\u0060\n\n### fsharp_space_before_member\n\nAdd a space after a member name and before the opening parenthesis of the first parameter.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype Person() =\n    member this.Walk(distance: int) = ()\n    member this.Sleep() = ignore\n    member __.singAlong() = ()\n    member __.swim(duration: TimeSpan) = ()\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceBeforeMember = true }\u0060\n\n\u0060\u0060\u0060fsharp\ntype Person() =\n    member this.Walk (distance: int) = ()\n    member this.Sleep () = ignore\n    member __.singAlong () = ()\n    member __.swim (duration: TimeSpan) = ()\n\u0060\u0060\u0060\n\n### fsharp_space_before_colon\n\nAdd a space before \u0060:\u0060. Please note that not every \u0060:\u0060 is controlled by this setting.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype Point = { x: int; y: int }\nlet myValue: int = 42 // See https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#right-pad-value-and-function-argument-type-annotations\nlet update (msg: Msg) (model: Model) : Model = model // See https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#surround-return-type-annotations-with-white-space\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceBeforeColon = true }\u0060\n\n\u0060\u0060\u0060fsharp\ntype Point = { x : int; y : int }\nlet myValue : int = 42\nlet update (msg : Msg) (model : Model) : Model = model\n\u0060\u0060\u0060\n\n### fsharp_space_after_comma\n\nAdds a space after \u0060,\u0060 in tuples.\nDefault = true.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nmyValue.SomeFunction(foo, bar, somethingElse)\n(a, b, c)\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceAfterComma = false }\u0060\n\n\u0060\u0060\u0060fsharp\nmyValue.SomeFunction(foo,bar,somethingElse)\n(a,b,c)\n\u0060\u0060\u0060\n\n### fsharp_space_before_semicolon\n\nAdds a space before \u0060;\u0060 in records, arrays, lists, etc.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = [ 1; 2; 3 ]\nlet b = [| foo; bar |]\ntype C = { X: int; Y: int }\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceBeforeSemicolon = true }\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = [ 1 ; 2 ; 3 ]\nlet b = [| foo ; bar |]\ntype C = { X: int ; Y: int }\n\u0060\u0060\u0060\n\n### fsharp_space_after_semicolon\n\nAdds a space after \u0060;\u0060 in records, arrays, lists, etc.\nDefault = true.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = [ 1; 2; 3 ]\nlet b = [| foo; bar |]\ntype C = { X: int; Y: int }\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceAfterSemicolon = false }\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = [ 1;2;3 ]\nlet b = [| foo;bar |]\ntype C = { X: int;Y: int }\n\u0060\u0060\u0060\n\n### fsharp_space_around_delimiter\n\nAdds a space around delimiters like \u0060[\u0060,\u0060[|\u0060,\u0060{\u0060.\nDefault = true.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = [ 1;2;3 ]\nlet b = [| 4;5;6 |]\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with SpaceAroundDelimiter = false }\u0060\n\n\u0060\u0060\u0060fsharp\nlet a = [1;2;3]\nlet b = [|4;5;6|]\n\u0060\u0060\u0060\n### fsharp_max_if_then_short_width\n\nControl the maximum length for which if/then expression without an else expression can be on one line.  \nThe [Microsoft F# style guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-if-expressions) recommends to never write such an expression in one line.\n\u003E If the else expression is absent, it is recommended to never to write the entire expression in one line.\nDefault = 0.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nif a then \n    ()\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxIfThenShortWidth = 15 }\u0060\n\n\u0060\u0060\u0060fsharp\nif a then ()\n\u0060\u0060\u0060\n\n### fsharp_max_if_then_else_short_width\n\nFantomas by default follows the if/then/else conventions listed in the [Microsoft F# style guide](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting#formatting-if-expressions).\nThere is stated:\n\n\u003E Indentation of conditionals depends on the size and complexity of the expressions that make them up. Write them on one line when:\n\u003E cond, e1, and e2 are short\n\u003E e1 and e2 are not if/then/else expressions themselves.\n\nThis setting facilitates this by determining the maximum character width where the if/then/else expression stays in one line.\nDefault = 40.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nif myCheck then truth else bogus\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxIfThenElseShortWidth = 10 }\u0060\n\n\u0060\u0060\u0060fsharp\nif myCheck then \n    truth \nelse \n    bogus\n\u0060\u0060\u0060\n\n### fsharp_max_infix_operator_expression\n\nControl the maximum length for which infix expression can be on one line.\nDefault = 50.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet WebApp =\n    route \u0022/ping\u0022 \u003E=\u003E authorized \u003E=\u003E text \u0022pong\u0022\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxInfixOperatorExpression = 20 }\u0060\n\n\u0060\u0060\u0060fsharp\nlet WebApp =\n    route \u0022/ping\u0022\n    \u003E=\u003E authorized\n    \u003E=\u003E text \u0022pong\u0022\n\u0060\u0060\u0060\n\n### fsharp_max_record_width\n\nControl the maximum width for which records should be in one line. Default = 40.\nRequires \u0060fsharp_record_multiline_formatter\u0060 to be \u0060character_width\u0060 to take\neffect.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype MyRecord = { X: int; Y: int; Length: int }\nlet myInstance = { X = 10; Y = 20; Length = 90 }\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxRecordWidth = 20 }\u0060\n\n\u0060\u0060\u0060fsharp\ntype MyRecord =\n    { X: int\n      Y: int\n      Length: int }\n\nlet myInstance =\n    { X = 10\n      Y = 20\n      Length = 90 }\n\u0060\u0060\u0060\n\n### fsharp_max_record_number_of_items\n\nControl the maximum number of fields for which records should be in one line.\nDefault = 1. Requires \u0060fsharp_record_multiline_formatter\u0060 to be\n\u0060number_of_items\u0060 to take effect.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype R = { x: int }\n\ntype S = { x: int; y: string }\n\ntype T = { x: int; y: string; z: float }\n\nlet myRecord = { r = 3 }\n\nlet myRecord\u0027 = { r with x = 3 }\n\nlet myRecord\u0027\u0027 = { r with x = 3; y = \u0022hello\u0022 }\n\nlet myRecord\u0027\u0027\u0027 = { r with x = 3; y = \u0022hello\u0022; z = 0.0 }\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxRecordSize = 2; RecordMultilineFormatter =\nMultilineFormatterType.NumberOfItems }\u0060\n\n\u0060\u0060\u0060fsharp\ntype R = { x: int }\n\ntype S = { x: int; y: string }\n\ntype T =\n    { x: int\n      y: string\n      z: float }\n\nlet myRecord = { r = 3 }\n\nlet myRecord\u0027 = { r with x = 3 }\n\nlet myRecord\u0027\u0027 = { r with x = 3; y = \u0022hello\u0022 }\n\nlet myRecord\u0027\u0027\u0027 =\n    { r with\n          x = 3\n          y = \u0022hello\u0022\n          z = 0.0 }\n\u0060\u0060\u0060\n\n### fsharp_record_multiline_formatter\n\nSplit records expressions/statements into multiple lines based on the given\ncondition. \u0060character_width\u0060 uses character count of the expression, controlled\nby \u0060fsharp_max_record_width\u0060. \u0060number_of_items\u0060 uses the number of fields in the\nrecord, controlled by \u0060fsharp_max_record_number_of_items\u0060. Default =\n\u0060character_width\u0060. Note that in either case, record expressions/statements are\nstill governed by \u0060max_line_length\u0060.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype R = { x: int }\n\ntype S = { x: int; y: string }\n\nlet myRecord = { r = 3 }\n\nlet myRecord\u0027 = { r with x = 3 }\n\nlet myRecord\u0027\u0027 = { r with x = 3; y = \u0022hello\u0022 }\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with RecordMultilineFormatter =\nMultilineFormatterType.NumberOfItems }\u0060\n\n\u0060\u0060\u0060fsharp\ntype R = { x: int }\n\ntype S =\n    { x: int\n      y: string }\n\nlet myRecord = { x = 3 }\n\nlet myRecord\u0027 = { r with x = 3 }\n\nlet myRecord\u0027\u0027 =\n    { r with\n          x = 3\n          y = \u0022hello\u0022 }\n\u0060\u0060\u0060\n\n### fsharp_max_array_or_list_width\n\nControl the maximum width for which lists and arrays can be in one line. Default\n= 40. Requires \u0060fsharp_array_or_list_multiline_formatter\u0060 to be\n\u0060character_width\u0060 to take effect.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet myArray = [| one; two; three |]\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxArrayOrListWidth = 20 }\u0060\n\n\u0060\u0060\u0060fsharp\nlet myArray =\n    [| one\n       two\n       three |]\n\u0060\u0060\u0060\n\n### fsharp_max_array_or_list_number_of_items\n\nControl the maximum number of elements for which lists and arrays can be in\none line. Default = 1. Requires \u0060fsharp_array_or_list_multiline_formatter\u0060 to be\n\u0060number_of_items\u0060 to take effect.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet myList = [ one; two ]\n\nlet myArray = [| one; two; three |]\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxArrayOrListNumberOfItems = 2; ArrayOrListMultilineFormatter =\nMultilineFormatterType.NumberOfItems }\u0060\n\n\u0060\u0060\u0060fsharp\nlet myList = [ one; two ]\n\nlet myArray =\n    [| one\n       two\n       three |]\n\u0060\u0060\u0060\n\n### fsharp_array_or_list_multiline_formatter\n\nSplit arrays and lists into multiple lines based on the given condition.\n\u0060character_width\u0060 uses character count of the expression, controlled by\n\u0060fsharp_max_array_or_list_width\u0060. \u0060number_of_items\u0060 uses the number of elements\nin the array or list, controlled by \u0060fsharp_max_array_or_list_number_of_items\u0060.\nDefault = \u0060character_width\u0060. Note that in either case, list expressions are\nstill governed by \u0060max_line_length\u0060.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet myArray = [| one; two; three |]\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with ArrayOrListMultilineFormatter =\nMultilineFormatterType.NumberOfItems }\u0060\n\n\u0060\u0060\u0060fsharp\nlet myArray =\n    [| one\n       two\n       three |]\n\u0060\u0060\u0060\n\n### fsharp_max_value_binding_width\n\nControl the maximum expression width for which let and member value/property bindings should be in one line.\nThe width is that of the pattern for the binding plus the implementating expression but not the keywords (e.g. \u0022let\u0022).\nDefault = 80.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet title = \u0022Great title of project\u0022\n\ntype MyType() =\n    member this.HelpText = \u0022Some help text\u0022\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxValueBindingWidth = 10 }\u0060\n\n\u0060\u0060\u0060fsharp\nlet title =\n    \u0022Great title of project\u0022\n\ntype MyType() =\n    member this.HelpText =\n        \u0022Some help text\u0022\n\u0060\u0060\u0060\n\n### fsharp_max_function_binding_width\n\nControl the maximum width for which function and member bindings should be in one line.\nDefault = 40.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet printScore score total = printfn \u0022%i / %i\u0022 score total\n\ntype Triangle() =\n    member this.CalculateSurface(width: int, height: int) = width * height / 2\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxFunctionBindingWidth = 10 }\u0060\n\n\u0060\u0060\u0060fsharp\nlet printScore score total =\n    printfn \u0022%i / %i\u0022 score total\n\ntype Triangle() =\n    member this.CalculateSurface(width: int, height: int) =\n        width * height / 2\n\u0060\u0060\u0060\n\n### fsharp_max_dot_get_expression_width\n\nControl the maximum width for which (nested) [SynExpr.DotGet](https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotGet) expressions should be in one line.\nDefault = 50.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet job =\n    JobBuilder\n        .UsingJobData(jobDataMap)\n        .Create\u003CWrapperJob\u003E()\n        .Build()\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MaxDotGetExpressionWidth = 100 }\u0060\n\n\u0060\u0060\u0060fsharp\nlet job =\n    JobBuilder.UsingJobData(jobDataMap).Create\u003CWrapperJob\u003E().Build()\n\u0060\u0060\u0060\n\n### fsharp_multiline_block_brackets_on_same_column\n\nAlternative way of formatting records, arrays and lists. This will align the braces at the same column level.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet myRecord =\n    { Level = 1\n      Progress = \u0022foo\u0022\n      Bar = \u0022bar\u0022\n      Street = \u0022Bakerstreet\u0022\n      Number = 42 }\n\ntype Range =\n    { From: float\n      To: float }\n\nlet a =\n    [| (1, 2, 3)\n       (4, 5, 6)\n       (7, 8, 9) |]\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MultilineBlockBracketsOnSameColumn = true }\u0060\n\n\u0060\u0060\u0060fsharp\nlet myRecord =\n    {\n        Level = 1\n        Progress = \u0022foo\u0022\n        Bar = \u0022bar\u0022\n        Street = \u0022Bakerstreet\u0022\n        Number = 42\n    }\n\ntype Range =\n    {\n        From: float\n        To: float\n    }\n\nlet a =\n    [|\n        (1, 2, 3)\n        (4, 5, 6)\n        (7, 8, 9)\n    |]\n\u0060\u0060\u0060\n\n### fsharp_newline_between_type_definition_and_members\n\nAdds a new line between a type definition and its first member.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype Range =\n    { From: float\n      To: float }\n    member this.Length = this.To - this.From\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with NewlineBetweenTypeDefinitionAndMembers = true }\u0060\n\n\u0060\u0060\u0060fsharp\ntype Range =\n    { From: float\n      To: float }\n\n    member this.Length = this.To - this.From\n\u0060\u0060\u0060\n\n### fsharp_align_function_signature_to_indentation\n\nWhen a function signature exceeds the \u0060max_line_length\u0060, Fantomas will put all parameters on separate lines.\nThis setting also places the equals sign and return type on a new line.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\n[\u003CFunctionName(\u0022FormatCode\u0022)\u003E]\nlet run \n    ([\u003CHttpTrigger(AuthorizationLevel.Anonymous, \u0022get\u0022, \u0022post\u0022, Route = \u0022{*any}\u0022)\u003E] req: HttpRequest)\n    (log: ILogger)\n    : HttpResponse =\n    Http.main CodeFormatter.GetVersion format FormatConfig.FormatConfig.Default log req\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with AlignFunctionSignatureToIndentation = true }\u0060\n\n\u0060\u0060\u0060fsharp\n[\u003CFunctionName(\u0022FormatCode\u0022)\u003E]\nlet run\n    ([\u003CHttpTrigger(AuthorizationLevel.Anonymous, \u0022get\u0022, \u0022post\u0022, Route = \u0022{*any}\u0022)\u003E] req: HttpRequest)\n    (log: ILogger)\n    : HttpResponse\n    =\n    Http.main CodeFormatter.GetVersion format FormatConfig.FormatConfig.Default log req\n\u0060\u0060\u0060\n\n### fsharp_alternative_long_member_definitions\n\nProvides an alternative way of formatting long member and constructor definitions,\nwhere the difference is mainly in the equal sign and returned type placement.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\ntype C\n    (\n        aVeryLongType: AVeryLongTypeThatYouNeedToUse,\n        aSecondVeryLongType: AVeryLongTypeThatYouNeedToUse,\n        aThirdVeryLongType: AVeryLongTypeThatYouNeedToUse\n    ) =\n    class\n    end\n\ntype D() =\n    member _.LongMethodWithLotsOfParameters\n        (\n            aVeryLongParam: AVeryLongTypeThatYouNeedToUse,\n            aSecondVeryLongParam: AVeryLongTypeThatYouNeedToUse,\n            aThirdVeryLongParam: AVeryLongTypeThatYouNeedToUse\n        ) : ReturnType =\n        42\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with AlternativeLongMemberDefinitions = true }\u0060\n\n\u0060\u0060\u0060fsharp\ntype C\n    (\n        aVeryLongType: AVeryLongTypeThatYouNeedToUse,\n        aSecondVeryLongType: AVeryLongTypeThatYouNeedToUse,\n        aThirdVeryLongType: AVeryLongTypeThatYouNeedToUse\n    )\n    =\n    class\n    end\n\ntype D() =\n    member _.LongMethodWithLotsOfParameters\n        (\n            aVeryLongParam: AVeryLongTypeThatYouNeedToUse,\n            aSecondVeryLongParam: AVeryLongTypeThatYouNeedToUse,\n            aThirdVeryLongParam: AVeryLongTypeThatYouNeedToUse\n        )\n        : ReturnType\n        =\n        42\n\u0060\u0060\u0060\n\n### fsharp_multi_line_lambda_closing_newline\n\nPlaces the closing parenthesis of a multiline lambda argument on the next line.\nDefault = false.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet printListWithOffset a list1 =\n    List.iter\n        (fun { ItemOne = a } -\u003E\n            // print\n            printfn \u0022%s\u0022 a)\n        list1\n\nlet printListWithOffset a list1 =\n    list1\n    |\u003E List.iter\n        (fun elem -\u003E\n            // print stuff\n            printfn \u0022%d\u0022 (a \u002B elem))\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with MultiLineLambdaClosingNewline = true }\u0060\n\n\u0060\u0060\u0060fsharp\nlet printListWithOffset a list1 =\n    List.iter\n        (fun { ItemOne = a } -\u003E\n            // print\n            printfn \u0022%s\u0022 a\n        )\n        list1\n\nlet printListWithOffset a list1 =\n    list1\n    |\u003E List.iter (fun elem -\u003E\n        // print stuff\n        printfn \u0022%d\u0022 (a \u002B elem)\n    )\n\u0060\u0060\u0060\n\n### fsharp_experimental_keep_indent_in_branch\n\nBreaks the normal indentation flow for the last branch of a pattern match or if/then/else expression.\nOnly when the pattern match or if/then/else is the return value of a function or member.\n\n*This feature is considered experimental and is subject to change*\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet main argv =\n    let args = parse argv\n\n    let instructions = Library.foo args\n\n    if args.DryRun = RunMode.Dry then\n        printfn \u0022Would execute actions, but --dry-run was supplied: %\u002BA\u0022 instructions\n        0\n    else\n        // proceed with main method\n        let output = Library.execute instructions\n        // do more stuff\n        0\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with KeepIndentInBranch = true }\u0060\n\n\u0060\u0060\u0060fsharp\nlet main argv =\n    let args = parse argv\n\n    let instructions = Library.foo args\n\n    if args.DryRun = RunMode.Dry then\n        printfn \u0022Would execute actions, but --dry-run was supplied: %\u002BA\u0022 instructions\n        0\n    else\n    // proceed with main method\n    let output = Library.execute instructions\n    // do more stuff\n    0\n\u0060\u0060\u0060\n\n### fsharp_blank_lines_around_nested_multiline_expressions\n\nSurround **nested** multi-line expressions with blank lines.\nExisting blank lines are always preserved (via trivia), with exception when [fsharp_keep_max_number_of_blank_lines](#fsharp_keep_max_number_of_blank_lines) is used.  \nTop level expressions will always follow the [2020 blank lines revision](https://github.com/fsprojects/fantomas/blob/master/docs/FormattingConventions.md#2020-revision) principle.\nDefault = true.\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nlet topLevelFunction () =\n    printfn \u0022Something to print\u0022\n\n    try\n            nothing ()\n    with\n    | ex -\u003E\n        splash ()\n    ()\n\nlet secondTopLevelFunction () =\n    // ...\n    ()\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with BlankLinesAroundNestedMultilineExpressions = false }\u0060\n\n\u0060\u0060\u0060fsharp\nlet topLevelFunction () =\n    printfn \u0022Something to print\u0022\n    try\n            nothing ()\n    with\n    | ex -\u003E\n        splash ()\n    ()\n\nlet secondTopLevelFunction () =\n    // ...\n    ()\n\u0060\u0060\u0060\n\n### fsharp_bar_before_discriminated_union_declaration\n\nAlways use a \u0060|\u0060 before every case in the declaration of a discriminated union. If \u0060false\u0060, a \u0060|\u0060 character is used only in multiple-case discriminated unions, and is omitted in short single-case DUs.\nDefault = false.\n\n\u0060\u0060\u0060fsharp\ntype MyDU = Short of int\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with BarBeforeDiscriminatedUnionDeclaration = true }\u0060\n\n\u0060\u0060\u0060fsharp\ntype MyDU = | Short of int\n\u0060\u0060\u0060\n\n### fsharp_experimental_stroustrup_style\n\nPlease contribute to https://github.com/fsprojects/fantomas/issues/1408.\n\n### fsharp_keep_max_number_of_blank_lines\n\nSet maximal number of consecutive blank lines to keep from original source. It doesn\u0027t change number of new blank lines generated by Fantomas.\nDefault=100\n\n\u0060defaultConfig\u0060\n\n\u0060\u0060\u0060fsharp\nopen Foo\n\n\nlet x = 42\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with KeepMaxNumberOfBlankLines = 1 }\u0060\n\n\u0060\u0060\u0060fsharp\nopen Foo\n\nlet x = 42\n\u0060\u0060\u0060\n\n\n### fsharp_strict_mode\n\nIf being set, pretty printing is only done via ASTs. Compiler directives, inline comments and block comments will be ignored.\nThere are numerous situations when the information in the AST alone cannot restore the original code.\n**Please do not use this setting for formatting hand written code!**\nValid use-case of this settings is code generation in projects like [FsAst](https://github.com/ionide/FsAst) and [Myriad](https://github.com/MoiraeSoftware/myriad).\nDefault = false.\n\n\u0060hand written code\u0060\n\n\u0060\u0060\u0060fsharp\n// some great comment\nlet add a b =\n#if INTERACTIVE\n    42\n#else\n    a \u002B b\n#endif\n\u0060\u0060\u0060\n\n\u0060{ defaultConfig with StrictMode = true }\u0060\n\n\u0060\u0060\u0060fsharp\nlet add a b = a \u002B b\n\u0060\u0060\u0060\n"},{"uri":"/fantomas/docs/index.html","title":"Fantomas\n","content":"Fantomas\n========\n\n[![Build Status Github Actions](https://github.com/fsprojects/fantomas/workflows/Build%20master/badge.svg?branch=master\u0026event=push)](https://github.com/fsprojects/fantomas/actions)\n[![Discord](https://img.shields.io/discord/940511234179096586?label=Fantomas%20Discord\u0026style=flat-square)](https://discord.gg/D5QXvQrBVa)\n\nF# source code formatter, inspired by [scalariform](https://github.com/mdr/scalariform) for Scala, [ocp-indent](https://github.com/OCamlPro/ocp-indent) for OCaml and [PythonTidy](https://github.com/acdha/PythonTidy) for Python.\n\n## Purpose\nThis project aims at formatting F# source files based on a given configuration.\nFantomas will ensure correct indentation and consistent spacing between elements in the source files.\nWe assume that the source files are *parsable by F# compiler* before feeding into the tool.\nFantomas follows two F# style guides: the [F# code formatting guidelines](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting) from Microsoft by default and the [G-Research F# code formatting guidelines](https://github.com/G-Research/fsharp-formatting-conventions) via various [settings](https://github.com/G-Research/fsharp-formatting-conventions/blob/master/.editorconfig).\n\n## Contributing Guidelines\n\nSee the [Contribution Guidelines](./CONTRIBUTING.md).\n\n## Credits\nWe would like to gratefully thank the following persons for their contributions.\nhttps://github.com/fsprojects/fantomas/graphs/contributors\n\n## License\nThe library and tool are available under Apache 2.0 license.\nFor more information see the [License file](LICENSE.md)."},{"uri":"/fantomas/docs/FormattingCheck.html","title":"Formatting Check\n","content":"---\ncategory: Documentation\ncategoryindex: 1\nindex: 8\n---\n# Formatting Check\n## Set files to be formatted inside build.fsx with snippet\n## Add format param to build.fsx with snippet\n## Add CheckFormat param to build.fsx with snippet\n## How to run"},{"uri":"/fantomas/docs/VisualStudio.html","title":"Visual Studio\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 6\n---\n# Visual Studio\nTODO: Explain version of fantomas used in Visual Studio.\nThe F# Formatting extension sets up Fantomas as the default formatter for F# files, configurable from Visual Studio\u0027s options.\n\n* [Visual Studio 2019](https://marketplace.visualstudio.com/items?itemName=asti.fantomas-vs)\n* [Visual Studio 2022](https://marketplace.visualstudio.com/items?itemName=asti.fantomas-vs22)\n\n### Visual Studio for Mac\n\nInstall [fantomas](https://www.nuget.org/packages/fantomas) locally with \u0060dotnet tool install fantomas-tool\u0060 and configure it as an [External tool]\n\n![VS Mac external tool window](./docs/vsmac-external-tool.png)"},{"uri":"/fantomas/docs/GettingStarted.html","title":"Getting Started\n","content":"---\ncategory: Documentation\ncategoryindex: 1\nindex: 1\n---\n# Getting Started\n\n* [Command line](#Command-line-tool-API)\n* [Fake build system](FAKE.html): Fantomas can be easily integrated with FAKE build system\n* [JetBrains Rider](Rider.html)\n* [VSCode](VSCode.html)\n* [Visual Studio](VisualStudio.html)\n* Try Fantomas [online](https://fsprojects.github.io/fantomas-tools/#/fantomas/preview)\n\n## Command line tool / API\nTODO: Style blockquotes\u003C/br\u003E\nCreate a [.NET tool manifest](https://docs.microsoft.com/en-us/dotnet/core/tools/local-tools-how-to-use) to install tools locally\n\u003E dotnet new tool-manifest\n\nInstall the command line tool with:\n\u003E dotnet tool install fantomas\n\nor install the tool globally with\n\u003E dotnet tool install -g fantomas\n\nFor the overview how to use the tool, you can type the command\n\n\tdotnet fantomas --help\n\n\u0060\u0060\u0060\nUSAGE: dotnet fantomas [--help] [--recurse] [--force] [--profile] [--fsi \u003Cstring\u003E] [--stdin] [--stdout] [--out \u003Cstring\u003E] [--check] [--daemon] [--version] [\u003Cstring\u003E...]\n\nINPUT:\n\n    \u003Cstring\u003E...           Input paths: can be multiple folders or files with *.fs,*.fsi,*.fsx,*.ml,*.mli extension.\n\nOPTIONS:\n\n    --recurse, -r         Process the input folder recursively.\n    --force               Print the source unchanged if it cannot be parsed correctly.\n    --profile             Print performance profiling information.\n    --fsi \u003Cstring\u003E        Read F# source from stdin as F# signatures.\n    --stdin               Read F# source from standard input.\n    --stdout              Write the formatted source code to standard output.\n    --out \u003Cstring\u003E        Give a valid path for files/folders. Files should have .fs, .fsx, .fsi, .ml or .mli extension only.\n    --check               Don\u0027t format files, just check if they have changed. Exits with 0 if it\u0027s formatted correctly, with 1 if some files need formatting and 99 if there was an internal error\n    --daemon              Daemon mode, launches an LSP-like server to can be used by editor tooling.\n    --version, -v         Displays the version of Fantomas\n    --help                display this list of options.\n\n\u0060\u0060\u0060\n\nYou have to specify an input path and optionally an output path. \nThe output path is prompted by \u0060--out\u0060 e.g.\n\n\tdotnet fantomas ../../../../tests/stackexchange/array.fs --out ../../../../tests/stackexchange_output/array.fs \n\nBoth paths have to be files or folders at the same time. \nIf they are folders, the structure of input folder will be reflected in the output one. \nThe tool will explore the input folder recursively if you set \u0060--recurse\u0060 option.\nIf you omit the output path, Fantomas will overwrite the input files.\n\n### Check mode\n\n*starting version 3.3*\n\nVerify that a single file or folder was formatted correctly.\n\n\u003E dotnet fantomas --check Source.fs\n\nThis will verify if the file \u0060Source.fs\u0060 still needs formatting.\nIf it does, the process will return exit code 99.\nIn the case that the file does not require any formatting, exit code 0 is returned.\nUnexpected errors will return exit code 1.\n\nThis scenario is meant to be executed in a continuous integration environment, to enforce that the newly added code was formatted correctly.\n\n### Multiple paths\n\n*starting version 4.5*\n\nMultiple paths can be passed as last argument, these can be both files and folders.  \nThis cannot be combined with the \u0060--out\u0060 and \u0060--stdout\u0060 flags.  \nWhen combined with the \u0060--recurse\u0060 flag, all passed folders will be processed recursively.\n\nOne interesting use-case of passing down multiple paths is that you can easily control the selection and filtering of paths from the current shell.\n\nConsider the following PowerShell scripts:\n\u0060\u0060\u0060powershell\n# Create an array with paths\n$files =\n     Get-ChildItem src/*.fs -Recurse # Find all *.fs files in src,\n     | Where-Object { $_.FullName -notlike \u0022*obj*\u0022 } # ignore files in the \u0060obj\u0060 folder\n     | ForEach-Object { $_.FullName } #  and select the full path name.\n\n\u0026 \u0022dotnet\u0022 \u0022fantomas\u0022 $files\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060powershell\n# Filter all added and modified files in git\n$files = git status --porcelain | Where-Object { $_ -match \u0022^\\s?A?M(.*)\\.fs(x|i)?$\u0022 } | ForEach-Object { $_.TrimStart(\u0022AM\u0022).TrimStart(\u0022 \u0022, \u0022M\u0022) }\n\u0026 \u0022dotnet\u0022 \u0022fantomas\u0022 $files\n\u0060\u0060\u0060\n\nOr usage with \u0060find\u0060 on unix:\n\n\u0060find my-project/ -type f -name \u0022*.fs\u0022 -not -path \u0022*obj*\u0022 | xargs dotnet fantomas --check\u0060"},{"uri":"/fantomas/docs/Benchmarks.html","title":"Benchmarks\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 10\n---\n# Benchmarks\n## TODO: add benchmarks"},{"uri":"/fantomas/docs/VSCode.html","title":"Visual Studio Code\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 4\n---\n# Visual Studio Code\nTODO: Explain version of fantomas used in VSCode.\u003C/br\u003E\nThe recommended way to use Fantomas is by using the [Ionide plugin](http://ionide.io/). Fantomas is integrated in [FSAutoComplete](https://github.com/fsharp/FsAutoComplete/) which is the language server used by Ionide.\n"},{"uri":"/fantomas/docs/StyleGuide.html","title":"Style guide\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 6\n---\n# Style guide\nTODO: Write a style guide page that explains why we are following https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/formatting and https://github.com/G-Research/fsharp-formatting-conventions.\n\nHow the proposal process over at https://github.com/fsharp/fslang-design#style-guide works.\nHow to contribute to the MS guide over at https://github.com/dotnet/docs.\n(Example of that: dotnet/docs#30094)"},{"uri":"/fantomas/docs/GitHooks.html","title":"Git hooks\n","content":"---\ncategory: Documentation\ncategoryindex: 1\nindex: 9\n---\n# Git hooks\n## A git pre-commit hook sample\n\nA very elegant and transparent way to use Fantomas is including it in a pre-commit git hook, by creating a \u0060.git/hooks/pre-commit\u0060 file with:\n\n\u0060\u0060\u0060\n#!/bin/sh\ngit diff --cached --name-only --diff-filter=ACM -z | xargs -0 $HOME/.dotnet/tools/fantomas\ngit diff --cached --name-only --diff-filter=ACM -z | xargs -0 git add\n\u0060\u0060\u0060\n\nThis script assumes you have installed Fantomas globally as a [dotnet tool](https://www.nuget.org/packages/fantomas/)\n\n**Please use with caution** as [Fantomas is not without bugs](https://github.com/fsprojects/fantomas/issues?q=is%3Aissue\u002Bis%3Aopen\u002Blabel%3A%22bug\u002B%28soundness%29%22).\n"},{"uri":"/fantomas/docs/Rider.html","title":"JetBrains Rider\n","content":"---\ncategory: End-user documentation\ncategoryindex: 1\nindex: 3\n---\n# JetBrains Rider\n\nThe [resharper-fsharp](https://github.com/JetBrains/resharper-fsharp) uses fantomas under the hood to format the source code. No need for any additional plugins.\n\n#### Using the latest version inside Rider\n\nFor technical reasons Rider cannot always use the latest version of Fantomas found on NuGet.\nAs a workaround you could install [fantomas](https://www.nuget.org/packages/fantomas-tool) locally with \u0060dotnet tool install fantomas-tool\u0060 and configure it as an [External tool](https://www.jetbrains.com/help/rider/Settings_Tools_External_Tools.html).\n\n![Rider external tool window](./docs/rider-external-tool.png)\n\n![Rider action window](./docs/rider-action-window.png)\n\n**This will have an impact on your editing experiencing in Rider**, the external change to the file by the command line application might trigger more internal logic inside Rider than necessary.\nIt could be noticeable in regards to the default formatting experience.\n"},{"uri":"/fantomas/docs/contributors/Index.html","title":"Contributors\n","content":"---\ncategory: Contributors\ncategoryindex: 2\nindex: 1\n---\n# Contributors\n\n\u003E \u201CIt\u0027s a dangerous business, Frodo, going out of your door,\u0022 he used to say. \u0022You step into the Road, and if you don\u0027t keep your feet, there is no knowing where you might be swept off to. \u2015 J.R.R. Tolkien, The Fellowship of the Ring\n\nFantomas is a project that has its roots deeply nested in the F# compiler. This can be an overwhelming experience at first, and it might even make you nervous about contributing in the first place.\nFear not: once you get the hang of it, things are less complicated than they seem.\n\nIn short, Fantomas is a source-code-to-source-code compiler. It will transform the text in the source code to an intermediate format and transform that again to source code.\nIt uses the F# Compiler to do this. The parser from the F# compiler will be used to create an [UnTyped Abstract Syntax](https://fsharp.github.io/FSharp.Compiler.Service/reference/fsharp-compiler-syntaxtree.html) tree (or \u0022AST\u0022).\nThe AST is then reprinted in \u0060CodePrinter.fs\u0060: once the whole tree is traversed, the formatted code can be constructed.\n\nIn this section of our documentation, we wish to teach you everything you need to know to contribute to Fantomas.\nEvery F# developer should be able to understand the project, even the ones new to the language.\nThe best is yet to come!\n\nPS: Don\u0027t hesitate to open [an issue](https://github.com/fsprojects/fantomas/issues/new/choose) if you have any questions. \nOr if something isn\u0027t all that clear. Our goal is to make this documentation as complete as possible\uD83C\uDF89!\n\n\u003Cdiv class=\u0022text-end\u0022\u003E\n    \u003Ca href=\u0022./FSharp.html\u0022\u003ENext\u003C/a\u003E\n\u003C/div\u003E"},{"uri":"/fantomas/docs/contributors/FSharp.html","title":"F#\n","content":"---\ncategory: Contributors\ncategoryindex: 2\nindex: 2\n---\n# F#\n\n## New to F#?\n\nIf you are truly brand-new to the F# language, you might want to start by reading the [F# documentation of Microsoft](https://dotnet.microsoft.com/en-us/languages/fsharp).  \nSome other great resources (in no particular order) are:\n\n- [Essential F#](https://leanpub.com/essential-fsharp)\n- [F# for Fun and Profit](https://fsharpforfunandprofit.com/)\n- [F# Fundamentals Tutorial | Learn Functional Programming | Step-by-Step Guide](https://www.youtube.com/watch?v=SvOInBxPL30)\n- [F# Foundation Slack](https://fsharp.org/guides/slack/)\n- [F# on Discord](https://discord.com/invite/R6n7c54)\n\n## Used F# features\n\nF# has a lot of nice language features, although not all of them are used in Fantomas.\nWe wish to highlight the most important ones that we use before continuing:\n\n- [Partial active patterns](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/active-patterns#partial-active-patterns), these are heavily used in \u0060SourceParser.fs\u0060.\n  In short, we use the \u0060Untyped Abstract Syntax Tree\u0060 created by the F# parser, we don\u0027t use all the information in that tree to restore the source code.\n\nFor example [SynExpr.For](https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#For), the definition looks like:\n\n\u0060\u0060\u0060fsharp\ntype SynExpr =\n    ...\n    /// F# syntax: \u0027for i = ... to ... do ...\u0027\n    | For of\n        forDebugPoint: DebugPointAtFor *\n        toDebugPoint: DebugPointAtInOrTo *\n        ident: Ident *\n        equalsRange: range option *\n        identBody: SynExpr *\n        direction: bool *\n        toBody: SynExpr *\n        doBody: SynExpr *\n        range: range\n\u0060\u0060\u0060\n\n  However, in Fantomas we have a partial active pattern that we use to easily grab the information we need from the AST.\n\u0060\u0060\u0060fsharp\nlet (|For|_|) =\n    function\n    | SynExpr.For (_, _, ident, equalsRange, e1, isUp, e2, e3, _) -\u003E Some(ident, equalsRange, e1, e2, e3, isUp)\n    | _ -\u003E None  \n\u0060\u0060\u0060\n\nNotice the underscores, we don\u0027t use the \u0060DebugPoint\u0060 info and \u0060range\u0060, so we drop that information in the result of the partial active pattern.\nWe then later use this pattern to work with the AST we need.\nExample usage in \u0060CodePrinter.fs\u0060:\n\n\u0060\u0060\u0060fsharp\nmatch expr with\n| For (ident, equalsRange, e1, e2, e3, isUp) -\u003E\n    atCurrentColumn (\n        !- \u0022for \u0022\n        \u002B\u003E genIdent ident\n        \u002B\u003E genEq SynExpr_For_Equals equalsRange\n        \u002B\u003E sepSpace\n        \u002B\u003E genExpr astContext e1\n        \u002B\u003E ifElse isUp (!- \u0022 to \u0022) (!- \u0022 downto \u0022)\n        \u002B\u003E genExpr astContext e2\n        \u002B\u003E !- \u0022 do\u0022\n        \u002B\u003E indent\n        \u002B\u003E sepNln\n        \u002B\u003E genExpr astContext e3\n        \u002B\u003E unindent\n    )\n| _ -\u003E ...\n\u0060\u0060\u0060\n\n- [Custom operators](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/operator-overloading#creating-new-operators). In F# there are some special operators like [|\u003E](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-operators.html#(|%3E)) and [\u003E\u003E](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-operators.html#(%3E%3E)).  \n\nNote that these are just functions themselves as well. Instead of specifying all the arguments after the function name, (infix) operators let you specify an argument before the operator and after. \n\nIn F#, you are able to create your own operators as well. In Fantomas, the most notable are \u0060!-\u0060 and \u0060\u002B\u003E\u0060. We will cover them later, but if you peek in \u0060CodePrinter.fs\u0060, they are heavily used there.\n\n- [Signature files](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/signature-files).\n\nIn Fantomas we use signature files to define the module boundaries. Everything that is both defined in the implementation file (the \u0060*.fs\u0060 file) and in the signature file (the \u0060*.fsi\u0060 file) is considered to be visible to other modules.\nIf a signature file is present, there is no need to specify \u0060private\u0060 in a function you don\u0027t want to be visible to other modules. Just don\u0027t add a \u0060val\u0060 entry to the signature file and it will be private automatically.\nYou can look at a signature file to get a glimpse of what the module really does.\n\n- [Type extensions](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/type-extensions).\n\nIn contrast to partial active patterns, where we want to hide some AST information, it can occur that we need to extend the type of an AST node.\nWe do this by adding a new type member to an existing Syntax tree type.\nExample in \u0060AstExtensions.fs\u0060:\n\n\u0060\u0060\u0060fsharp\ntype SynMemberFlags with\n\n    member memberFlags.FullRange: range option =\n        RangeHelpers.mergeRanges\n            [ yield! Option.toList memberFlags.Trivia.AbstractRange\n              yield! Option.toList memberFlags.Trivia.DefaultRange\n              yield! Option.toList memberFlags.Trivia.MemberRange\n              yield! Option.toList memberFlags.Trivia.OverrideRange\n              yield! Option.toList memberFlags.Trivia.StaticRange ]\n\u0060\u0060\u0060\n\nThe type \u0060SynMemberFlags\u0060 does not expose any range information, but we can extend it to do so.  \nThe \u0060.FullRange\u0060 naming convention is used to indicate that we are not satisfied by the original range or it is lacking all together.  \nDon\u0027t worry just yet about this implementation, so keep in mind that with this feature we can later use \u0060memberFlags.FullRange\u0060 on a \u0060SynMemberFlags\u0060 instance.\n\n- [Function Values](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/functions/#function-values)\n\nThis is well-known concept in F# and for completion sake we do mention this. In F#, you can pass a function as an argument to another function.\nFantomas is full of this kind of functions, so be sure to grasp this concept before continuing.\n\n- [Tail recursion](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/functions/recursive-functions-the-rec-keyword#tail-recursion)\n\nThere are places in the code base where we use some more advanced recursion techniques. \u0060AstTransformer.fs\u0060 is one of them.  \nA very good explanation of what happens here can be found in this [blogpost](https://www.gresearch.co.uk/blog/article/advanced-recursion-techniques-in-f/).\n\n- [Event Sourcing](https://medium.com/@dzoukr/event-sourcing-step-by-step-in-f-be808aa0ca18)\n\nWe use event sourcing to capture the instructions on how to write the new code. Instead of writing the new code directly to for example a \u0060StringBuilder\u0060, we write it to a list of events.  \nThat list of events will contain instructions like \u0060Write \u0022let\u0022\u0060, \u0060IndentBy 4\u0060, \u0060WriteLine\u0060 etc. So it is useful to have some notion of event sourcing.\n\nAlthough, it really is an implementation detail in \u0060Context.fs\u0060, think of it as writing a letter with a pen and a paper.\nWe first rehearse what we want to say, then we write the letter. Not write evey word as we are making up the letter, but write the letter as a whole once we know the content.  \nThese events are used to achieve this.\n"}]